// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/metrics/v1/metrics.proto

package io.opentelemetry.proto.metrics.v1;

/**
 * <pre>
 * Defines a Metric which has one or more timeseries.  The following is a
 * brief summary of the Metric data model.  For more details, see:
 *   https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/datamodel.md
 * The data model and relation between entities is shown in the
 * diagram below. Here, "DataPoint" is the term used to refer to any
 * one of the specific data point value types, and "points" is the term used
 * to refer to any one of the lists of points contained in the Metric.
 * - Metric is composed of a metadata and data.
 * - Metadata part contains a name, description, unit.
 * - Data is one of the possible types (Sum, Gauge, Histogram, Summary).
 * - DataPoint contains timestamps, attributes, and one of the possible value type
 *   fields.
 *     Metric
 *  +------------+
 *  |name        |
 *  |description |
 *  |unit        |     +------------------------------------+
 *  |data        |---&gt; |Gauge, Sum, Histogram, Summary, ... |
 *  +------------+     +------------------------------------+
 *    Data [One of Gauge, Sum, Histogram, Summary, ...]
 *  +-----------+
 *  |...        |  // Metadata about the Data.
 *  |points     |--+
 *  +-----------+  |
 *                 |      +---------------------------+
 *                 |      |DataPoint 1                |
 *                 v      |+------+------+   +------+ |
 *              +-----+   ||label |label |...|label | |
 *              |  1  |--&gt;||value1|value2|...|valueN| |
 *              +-----+   |+------+------+   +------+ |
 *              |  .  |   |+-----+                    |
 *              |  .  |   ||value|                    |
 *              |  .  |   |+-----+                    |
 *              |  .  |   +---------------------------+
 *              |  .  |                   .
 *              |  .  |                   .
 *              |  .  |                   .
 *              |  .  |   +---------------------------+
 *              |  .  |   |DataPoint M                |
 *              +-----+   |+------+------+   +------+ |
 *              |  M  |--&gt;||label |label |...|label | |
 *              +-----+   ||value1|value2|...|valueN| |
 *                        |+------+------+   +------+ |
 *                        |+-----+                    |
 *                        ||value|                    |
 *                        |+-----+                    |
 *                        +---------------------------+
 * Each distinct type of DataPoint represents the output of a specific
 * aggregation function, the result of applying the DataPoint's
 * associated function of to one or more measurements.
 * All DataPoint types have three common fields:
 * - Attributes includes key-value pairs associated with the data point
 * - TimeUnixNano is required, set to the end time of the aggregation
 * - StartTimeUnixNano is optional, but strongly encouraged for DataPoints
 *   having an AggregationTemporality field, as discussed below.
 * Both TimeUnixNano and StartTimeUnixNano values are expressed as
 * UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
 * # TimeUnixNano
 * This field is required, having consistent interpretation across
 * DataPoint types.  TimeUnixNano is the moment corresponding to when
 * the data point's aggregate value was captured.
 * Data points with the 0 value for TimeUnixNano SHOULD be rejected
 * by consumers.
 * # StartTimeUnixNano
 * StartTimeUnixNano in general allows detecting when a sequence of
 * observations is unbroken.  This field indicates to consumers the
 * start time for points with cumulative and delta
 * AggregationTemporality, and it should be included whenever possible
 * to support correct rate calculation.  Although it may be omitted
 * when the start time is truly unknown, setting StartTimeUnixNano is
 * strongly encouraged.
 * </pre>
 * <p>
 * Protobuf type {@code opentelemetry.proto.metrics.v1.Metric}
 */
public final class Metric extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:opentelemetry.proto.metrics.v1.Metric)
        MetricOrBuilder {
    private static final long serialVersionUID = 0L;

    // Use Metric.newBuilder() to construct.
    private Metric(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
    }

    private Metric() {
        name_ = "";
        description_ = "";
        unit_ = "";
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
            UnusedPrivateParameter unused) {
        return new Metric();
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
        return this.unknownFields;
    }

    private Metric(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
            throw new NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
            boolean done = false;
            while (!done) {
                int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    case 10: {
                        String s = input.readStringRequireUtf8();

                        name_ = s;
                        break;
                    }
                    case 18: {
                        String s = input.readStringRequireUtf8();

                        description_ = s;
                        break;
                    }
                    case 26: {
                        String s = input.readStringRequireUtf8();

                        unit_ = s;
                        break;
                    }
                    case 34: {
                        IntGauge.Builder subBuilder = null;
                        if (dataCase_ == 4) {
                            subBuilder = ((IntGauge) data_).toBuilder();
                        }
                        data_ =
                                input.readMessage(IntGauge.parser(), extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom((IntGauge) data_);
                            data_ = subBuilder.buildPartial();
                        }
                        dataCase_ = 4;
                        break;
                    }
                    case 42: {
                        Gauge.Builder subBuilder = null;
                        if (dataCase_ == 5) {
                            subBuilder = ((Gauge) data_).toBuilder();
                        }
                        data_ =
                                input.readMessage(Gauge.parser(), extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom((Gauge) data_);
                            data_ = subBuilder.buildPartial();
                        }
                        dataCase_ = 5;
                        break;
                    }
                    case 50: {
                        IntSum.Builder subBuilder = null;
                        if (dataCase_ == 6) {
                            subBuilder = ((IntSum) data_).toBuilder();
                        }
                        data_ =
                                input.readMessage(IntSum.parser(), extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom((IntSum) data_);
                            data_ = subBuilder.buildPartial();
                        }
                        dataCase_ = 6;
                        break;
                    }
                    case 58: {
                        Sum.Builder subBuilder = null;
                        if (dataCase_ == 7) {
                            subBuilder = ((Sum) data_).toBuilder();
                        }
                        data_ =
                                input.readMessage(Sum.parser(), extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom((Sum) data_);
                            data_ = subBuilder.buildPartial();
                        }
                        dataCase_ = 7;
                        break;
                    }
                    case 66: {
                        IntHistogram.Builder subBuilder = null;
                        if (dataCase_ == 8) {
                            subBuilder = ((IntHistogram) data_).toBuilder();
                        }
                        data_ =
                                input.readMessage(IntHistogram.parser(), extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom((IntHistogram) data_);
                            data_ = subBuilder.buildPartial();
                        }
                        dataCase_ = 8;
                        break;
                    }
                    case 74: {
                        Histogram.Builder subBuilder = null;
                        if (dataCase_ == 9) {
                            subBuilder = ((Histogram) data_).toBuilder();
                        }
                        data_ =
                                input.readMessage(Histogram.parser(), extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom((Histogram) data_);
                            data_ = subBuilder.buildPartial();
                        }
                        dataCase_ = 9;
                        break;
                    }
                    case 90: {
                        Summary.Builder subBuilder = null;
                        if (dataCase_ == 11) {
                            subBuilder = ((Summary) data_).toBuilder();
                        }
                        data_ =
                                input.readMessage(Summary.parser(), extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom((Summary) data_);
                            data_ = subBuilder.buildPartial();
                        }
                        dataCase_ = 11;
                        break;
                    }
                    default: {
                        if (!parseUnknownField(
                                input, unknownFields, extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                }
            }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                    e).setUnfinishedMessage(this);
        } finally {
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
        }
    }

    public static final com.google.protobuf.Descriptors.Descriptor
    getDescriptor() {
        return MetricsProto.internal_static_opentelemetry_proto_metrics_v1_Metric_descriptor;
    }

    @Override
    protected FieldAccessorTable
    internalGetFieldAccessorTable() {
        return MetricsProto.internal_static_opentelemetry_proto_metrics_v1_Metric_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                        Metric.class, Builder.class);
    }

    private int dataCase_ = 0;
    private Object data_;

    public enum DataCase
            implements com.google.protobuf.Internal.EnumLite,
            InternalOneOfEnum {
        @Deprecated INT_GAUGE(4),
        GAUGE(5),
        @Deprecated INT_SUM(6),
        SUM(7),
        @Deprecated INT_HISTOGRAM(8),
        HISTOGRAM(9),
        SUMMARY(11),
        DATA_NOT_SET(0);
        private final int value;

        private DataCase(int value) {
            this.value = value;
        }

        /**
         * @param value The number of the enum to look for.
         * @return The enum associated with the given number.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @Deprecated
        public static DataCase valueOf(int value) {
            return forNumber(value);
        }

        public static DataCase forNumber(int value) {
            switch (value) {
                case 4:
                    return INT_GAUGE;
                case 5:
                    return GAUGE;
                case 6:
                    return INT_SUM;
                case 7:
                    return SUM;
                case 8:
                    return INT_HISTOGRAM;
                case 9:
                    return HISTOGRAM;
                case 11:
                    return SUMMARY;
                case 0:
                    return DATA_NOT_SET;
                default:
                    return null;
            }
        }

        public int getNumber() {
            return this.value;
        }
    }

    ;

    public DataCase
    getDataCase() {
        return DataCase.forNumber(
                dataCase_);
    }

    public static final int NAME_FIELD_NUMBER = 1;
    private volatile Object name_;

    /**
     * <pre>
     * name of the metric, including its DNS name prefix. It must be unique.
     * </pre>
     *
     * <code>string name = 1;</code>
     *
     * @return The name.
     */
    @Override
    public String getName() {
        Object ref = name_;
        if (ref instanceof String) {
            return (String) ref;
        } else {
            com.google.protobuf.ByteString bs =
                    (com.google.protobuf.ByteString) ref;
            String s = bs.toStringUtf8();
            name_ = s;
            return s;
        }
    }

    /**
     * <pre>
     * name of the metric, including its DNS name prefix. It must be unique.
     * </pre>
     *
     * <code>string name = 1;</code>
     *
     * @return The bytes for name.
     */
    @Override
    public com.google.protobuf.ByteString
    getNameBytes() {
        Object ref = name_;
        if (ref instanceof String) {
            com.google.protobuf.ByteString b =
                    com.google.protobuf.ByteString.copyFromUtf8(
                            (String) ref);
            name_ = b;
            return b;
        } else {
            return (com.google.protobuf.ByteString) ref;
        }
    }

    public static final int DESCRIPTION_FIELD_NUMBER = 2;
    private volatile Object description_;

    /**
     * <pre>
     * description of the metric, which can be used in documentation.
     * </pre>
     *
     * <code>string description = 2;</code>
     *
     * @return The description.
     */
    @Override
    public String getDescription() {
        Object ref = description_;
        if (ref instanceof String) {
            return (String) ref;
        } else {
            com.google.protobuf.ByteString bs =
                    (com.google.protobuf.ByteString) ref;
            String s = bs.toStringUtf8();
            description_ = s;
            return s;
        }
    }

    /**
     * <pre>
     * description of the metric, which can be used in documentation.
     * </pre>
     *
     * <code>string description = 2;</code>
     *
     * @return The bytes for description.
     */
    @Override
    public com.google.protobuf.ByteString
    getDescriptionBytes() {
        Object ref = description_;
        if (ref instanceof String) {
            com.google.protobuf.ByteString b =
                    com.google.protobuf.ByteString.copyFromUtf8(
                            (String) ref);
            description_ = b;
            return b;
        } else {
            return (com.google.protobuf.ByteString) ref;
        }
    }

    public static final int UNIT_FIELD_NUMBER = 3;
    private volatile Object unit_;

    /**
     * <pre>
     * unit in which the metric value is reported. Follows the format
     * described by http://unitsofmeasure.org/ucum.html.
     * </pre>
     *
     * <code>string unit = 3;</code>
     *
     * @return The unit.
     */
    @Override
    public String getUnit() {
        Object ref = unit_;
        if (ref instanceof String) {
            return (String) ref;
        } else {
            com.google.protobuf.ByteString bs =
                    (com.google.protobuf.ByteString) ref;
            String s = bs.toStringUtf8();
            unit_ = s;
            return s;
        }
    }

    /**
     * <pre>
     * unit in which the metric value is reported. Follows the format
     * described by http://unitsofmeasure.org/ucum.html.
     * </pre>
     *
     * <code>string unit = 3;</code>
     *
     * @return The bytes for unit.
     */
    @Override
    public com.google.protobuf.ByteString
    getUnitBytes() {
        Object ref = unit_;
        if (ref instanceof String) {
            com.google.protobuf.ByteString b =
                    com.google.protobuf.ByteString.copyFromUtf8(
                            (String) ref);
            unit_ = b;
            return b;
        } else {
            return (com.google.protobuf.ByteString) ref;
        }
    }

    public static final int INT_GAUGE_FIELD_NUMBER = 4;

    /**
     * <pre>
     * IntGauge and IntSum are deprecated and will be removed soon.
     * 1. Old senders and receivers that are not aware of this change will
     * continue using the `int_gauge` and `int_sum` fields.
     * 2. New senders, which are aware of this change MUST send only `gauge`
     * and `sum` fields.
     * 3. New receivers, which are aware of this change MUST convert these into
     * `gauge` and `sum` by using the provided as_int field in the oneof values.
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>.opentelemetry.proto.metrics.v1.IntGauge int_gauge = 4 [deprecated = true];</code>
     *
     * @return Whether the intGauge field is set.
     */
    @Override
    @Deprecated
    public boolean hasIntGauge() {
        return dataCase_ == 4;
    }

    /**
     * <pre>
     * IntGauge and IntSum are deprecated and will be removed soon.
     * 1. Old senders and receivers that are not aware of this change will
     * continue using the `int_gauge` and `int_sum` fields.
     * 2. New senders, which are aware of this change MUST send only `gauge`
     * and `sum` fields.
     * 3. New receivers, which are aware of this change MUST convert these into
     * `gauge` and `sum` by using the provided as_int field in the oneof values.
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>.opentelemetry.proto.metrics.v1.IntGauge int_gauge = 4 [deprecated = true];</code>
     *
     * @return The intGauge.
     */
    @Override
    @Deprecated
    public IntGauge getIntGauge() {
        if (dataCase_ == 4) {
            return (IntGauge) data_;
        }
        return IntGauge.getDefaultInstance();
    }

    /**
     * <pre>
     * IntGauge and IntSum are deprecated and will be removed soon.
     * 1. Old senders and receivers that are not aware of this change will
     * continue using the `int_gauge` and `int_sum` fields.
     * 2. New senders, which are aware of this change MUST send only `gauge`
     * and `sum` fields.
     * 3. New receivers, which are aware of this change MUST convert these into
     * `gauge` and `sum` by using the provided as_int field in the oneof values.
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>.opentelemetry.proto.metrics.v1.IntGauge int_gauge = 4 [deprecated = true];</code>
     */
    @Override
    @Deprecated
    public IntGaugeOrBuilder getIntGaugeOrBuilder() {
        if (dataCase_ == 4) {
            return (IntGauge) data_;
        }
        return IntGauge.getDefaultInstance();
    }

    public static final int GAUGE_FIELD_NUMBER = 5;

    /**
     * <code>.opentelemetry.proto.metrics.v1.Gauge gauge = 5;</code>
     *
     * @return Whether the gauge field is set.
     */
    @Override
    public boolean hasGauge() {
        return dataCase_ == 5;
    }

    /**
     * <code>.opentelemetry.proto.metrics.v1.Gauge gauge = 5;</code>
     *
     * @return The gauge.
     */
    @Override
    public Gauge getGauge() {
        if (dataCase_ == 5) {
            return (Gauge) data_;
        }
        return Gauge.getDefaultInstance();
    }

    /**
     * <code>.opentelemetry.proto.metrics.v1.Gauge gauge = 5;</code>
     */
    @Override
    public GaugeOrBuilder getGaugeOrBuilder() {
        if (dataCase_ == 5) {
            return (Gauge) data_;
        }
        return Gauge.getDefaultInstance();
    }

    public static final int INT_SUM_FIELD_NUMBER = 6;

    /**
     * <pre>
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>.opentelemetry.proto.metrics.v1.IntSum int_sum = 6 [deprecated = true];</code>
     *
     * @return Whether the intSum field is set.
     */
    @Override
    @Deprecated
    public boolean hasIntSum() {
        return dataCase_ == 6;
    }

    /**
     * <pre>
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>.opentelemetry.proto.metrics.v1.IntSum int_sum = 6 [deprecated = true];</code>
     *
     * @return The intSum.
     */
    @Override
    @Deprecated
    public IntSum getIntSum() {
        if (dataCase_ == 6) {
            return (IntSum) data_;
        }
        return IntSum.getDefaultInstance();
    }

    /**
     * <pre>
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>.opentelemetry.proto.metrics.v1.IntSum int_sum = 6 [deprecated = true];</code>
     */
    @Override
    @Deprecated
    public IntSumOrBuilder getIntSumOrBuilder() {
        if (dataCase_ == 6) {
            return (IntSum) data_;
        }
        return IntSum.getDefaultInstance();
    }

    public static final int SUM_FIELD_NUMBER = 7;

    /**
     * <code>.opentelemetry.proto.metrics.v1.Sum sum = 7;</code>
     *
     * @return Whether the sum field is set.
     */
    @Override
    public boolean hasSum() {
        return dataCase_ == 7;
    }

    /**
     * <code>.opentelemetry.proto.metrics.v1.Sum sum = 7;</code>
     *
     * @return The sum.
     */
    @Override
    public Sum getSum() {
        if (dataCase_ == 7) {
            return (Sum) data_;
        }
        return Sum.getDefaultInstance();
    }

    /**
     * <code>.opentelemetry.proto.metrics.v1.Sum sum = 7;</code>
     */
    @Override
    public SumOrBuilder getSumOrBuilder() {
        if (dataCase_ == 7) {
            return (Sum) data_;
        }
        return Sum.getDefaultInstance();
    }

    public static final int INT_HISTOGRAM_FIELD_NUMBER = 8;

    /**
     * <pre>
     * IntHistogram is deprecated and will be removed soon.
     * 1. Old senders and receivers that are not aware of this change will
     * continue using the `int_histogram` field.
     * 2. New senders, which are aware of this change MUST send only `histogram`.
     * 3. New receivers, which are aware of this change MUST convert this into
     * `histogram` by simply converting all int64 values into float.
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>.opentelemetry.proto.metrics.v1.IntHistogram int_histogram = 8 [deprecated = true];</code>
     *
     * @return Whether the intHistogram field is set.
     */
    @Override
    @Deprecated
    public boolean hasIntHistogram() {
        return dataCase_ == 8;
    }

    /**
     * <pre>
     * IntHistogram is deprecated and will be removed soon.
     * 1. Old senders and receivers that are not aware of this change will
     * continue using the `int_histogram` field.
     * 2. New senders, which are aware of this change MUST send only `histogram`.
     * 3. New receivers, which are aware of this change MUST convert this into
     * `histogram` by simply converting all int64 values into float.
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>.opentelemetry.proto.metrics.v1.IntHistogram int_histogram = 8 [deprecated = true];</code>
     *
     * @return The intHistogram.
     */
    @Override
    @Deprecated
    public IntHistogram getIntHistogram() {
        if (dataCase_ == 8) {
            return (IntHistogram) data_;
        }
        return IntHistogram.getDefaultInstance();
    }

    /**
     * <pre>
     * IntHistogram is deprecated and will be removed soon.
     * 1. Old senders and receivers that are not aware of this change will
     * continue using the `int_histogram` field.
     * 2. New senders, which are aware of this change MUST send only `histogram`.
     * 3. New receivers, which are aware of this change MUST convert this into
     * `histogram` by simply converting all int64 values into float.
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>.opentelemetry.proto.metrics.v1.IntHistogram int_histogram = 8 [deprecated = true];</code>
     */
    @Override
    @Deprecated
    public IntHistogramOrBuilder getIntHistogramOrBuilder() {
        if (dataCase_ == 8) {
            return (IntHistogram) data_;
        }
        return IntHistogram.getDefaultInstance();
    }

    public static final int HISTOGRAM_FIELD_NUMBER = 9;

    /**
     * <code>.opentelemetry.proto.metrics.v1.Histogram histogram = 9;</code>
     *
     * @return Whether the histogram field is set.
     */
    @Override
    public boolean hasHistogram() {
        return dataCase_ == 9;
    }

    /**
     * <code>.opentelemetry.proto.metrics.v1.Histogram histogram = 9;</code>
     *
     * @return The histogram.
     */
    @Override
    public Histogram getHistogram() {
        if (dataCase_ == 9) {
            return (Histogram) data_;
        }
        return Histogram.getDefaultInstance();
    }

    /**
     * <code>.opentelemetry.proto.metrics.v1.Histogram histogram = 9;</code>
     */
    @Override
    public HistogramOrBuilder getHistogramOrBuilder() {
        if (dataCase_ == 9) {
            return (Histogram) data_;
        }
        return Histogram.getDefaultInstance();
    }

    public static final int SUMMARY_FIELD_NUMBER = 11;

    /**
     * <code>.opentelemetry.proto.metrics.v1.Summary summary = 11;</code>
     *
     * @return Whether the summary field is set.
     */
    @Override
    public boolean hasSummary() {
        return dataCase_ == 11;
    }

    /**
     * <code>.opentelemetry.proto.metrics.v1.Summary summary = 11;</code>
     *
     * @return The summary.
     */
    @Override
    public Summary getSummary() {
        if (dataCase_ == 11) {
            return (Summary) data_;
        }
        return Summary.getDefaultInstance();
    }

    /**
     * <code>.opentelemetry.proto.metrics.v1.Summary summary = 11;</code>
     */
    @Override
    public SummaryOrBuilder getSummaryOrBuilder() {
        if (dataCase_ == 11) {
            return (Summary) data_;
        }
        return Summary.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;

    @Override
    public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
            throws java.io.IOException {
        if (!getNameBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
        }
        if (!getDescriptionBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 2, description_);
        }
        if (!getUnitBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 3, unit_);
        }
        if (dataCase_ == 4) {
            output.writeMessage(4, (IntGauge) data_);
        }
        if (dataCase_ == 5) {
            output.writeMessage(5, (Gauge) data_);
        }
        if (dataCase_ == 6) {
            output.writeMessage(6, (IntSum) data_);
        }
        if (dataCase_ == 7) {
            output.writeMessage(7, (Sum) data_);
        }
        if (dataCase_ == 8) {
            output.writeMessage(8, (IntHistogram) data_);
        }
        if (dataCase_ == 9) {
            output.writeMessage(9, (Histogram) data_);
        }
        if (dataCase_ == 11) {
            output.writeMessage(11, (Summary) data_);
        }
        unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!getNameBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
        }
        if (!getDescriptionBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, description_);
        }
        if (!getUnitBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, unit_);
        }
        if (dataCase_ == 4) {
            size += com.google.protobuf.CodedOutputStream
                    .computeMessageSize(4, (IntGauge) data_);
        }
        if (dataCase_ == 5) {
            size += com.google.protobuf.CodedOutputStream
                    .computeMessageSize(5, (Gauge) data_);
        }
        if (dataCase_ == 6) {
            size += com.google.protobuf.CodedOutputStream
                    .computeMessageSize(6, (IntSum) data_);
        }
        if (dataCase_ == 7) {
            size += com.google.protobuf.CodedOutputStream
                    .computeMessageSize(7, (Sum) data_);
        }
        if (dataCase_ == 8) {
            size += com.google.protobuf.CodedOutputStream
                    .computeMessageSize(8, (IntHistogram) data_);
        }
        if (dataCase_ == 9) {
            size += com.google.protobuf.CodedOutputStream
                    .computeMessageSize(9, (Histogram) data_);
        }
        if (dataCase_ == 11) {
            size += com.google.protobuf.CodedOutputStream
                    .computeMessageSize(11, (Summary) data_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
    }

    @Override
    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof Metric)) {
            return super.equals(obj);
        }
        Metric other = (Metric) obj;

        if (!getName()
                .equals(other.getName())) return false;
        if (!getDescription()
                .equals(other.getDescription())) return false;
        if (!getUnit()
                .equals(other.getUnit())) return false;
        if (!getDataCase().equals(other.getDataCase())) return false;
        switch (dataCase_) {
            case 4:
                if (!getIntGauge()
                        .equals(other.getIntGauge())) return false;
                break;
            case 5:
                if (!getGauge()
                        .equals(other.getGauge())) return false;
                break;
            case 6:
                if (!getIntSum()
                        .equals(other.getIntSum())) return false;
                break;
            case 7:
                if (!getSum()
                        .equals(other.getSum())) return false;
                break;
            case 8:
                if (!getIntHistogram()
                        .equals(other.getIntHistogram())) return false;
                break;
            case 9:
                if (!getHistogram()
                        .equals(other.getHistogram())) return false;
                break;
            case 11:
                if (!getSummary()
                        .equals(other.getSummary())) return false;
                break;
            case 0:
            default:
        }
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
    }

    @Override
    public int hashCode() {
        if (memoizedHashCode != 0) {
            return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
        hash = (37 * hash) + DESCRIPTION_FIELD_NUMBER;
        hash = (53 * hash) + getDescription().hashCode();
        hash = (37 * hash) + UNIT_FIELD_NUMBER;
        hash = (53 * hash) + getUnit().hashCode();
        switch (dataCase_) {
            case 4:
                hash = (37 * hash) + INT_GAUGE_FIELD_NUMBER;
                hash = (53 * hash) + getIntGauge().hashCode();
                break;
            case 5:
                hash = (37 * hash) + GAUGE_FIELD_NUMBER;
                hash = (53 * hash) + getGauge().hashCode();
                break;
            case 6:
                hash = (37 * hash) + INT_SUM_FIELD_NUMBER;
                hash = (53 * hash) + getIntSum().hashCode();
                break;
            case 7:
                hash = (37 * hash) + SUM_FIELD_NUMBER;
                hash = (53 * hash) + getSum().hashCode();
                break;
            case 8:
                hash = (37 * hash) + INT_HISTOGRAM_FIELD_NUMBER;
                hash = (53 * hash) + getIntHistogram().hashCode();
                break;
            case 9:
                hash = (37 * hash) + HISTOGRAM_FIELD_NUMBER;
                hash = (53 * hash) + getHistogram().hashCode();
                break;
            case 11:
                hash = (37 * hash) + SUMMARY_FIELD_NUMBER;
                hash = (53 * hash) + getSummary().hashCode();
                break;
            case 0:
            default:
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
    }

    public static Metric parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static Metric parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static Metric parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static Metric parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static Metric parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static Metric parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static Metric parseFrom(java.io.InputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
    }

    public static Metric parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static Metric parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input);
    }

    public static Metric parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }

    public static Metric parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
    }

    public static Metric parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() {
        return newBuilder();
    }

    public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(Metric prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    @Override
    public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
                ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
            BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
    }

    /**
     * <pre>
     * Defines a Metric which has one or more timeseries.  The following is a
     * brief summary of the Metric data model.  For more details, see:
     *   https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/datamodel.md
     * The data model and relation between entities is shown in the
     * diagram below. Here, "DataPoint" is the term used to refer to any
     * one of the specific data point value types, and "points" is the term used
     * to refer to any one of the lists of points contained in the Metric.
     * - Metric is composed of a metadata and data.
     * - Metadata part contains a name, description, unit.
     * - Data is one of the possible types (Sum, Gauge, Histogram, Summary).
     * - DataPoint contains timestamps, attributes, and one of the possible value type
     *   fields.
     *     Metric
     *  +------------+
     *  |name        |
     *  |description |
     *  |unit        |     +------------------------------------+
     *  |data        |---&gt; |Gauge, Sum, Histogram, Summary, ... |
     *  +------------+     +------------------------------------+
     *    Data [One of Gauge, Sum, Histogram, Summary, ...]
     *  +-----------+
     *  |...        |  // Metadata about the Data.
     *  |points     |--+
     *  +-----------+  |
     *                 |      +---------------------------+
     *                 |      |DataPoint 1                |
     *                 v      |+------+------+   +------+ |
     *              +-----+   ||label |label |...|label | |
     *              |  1  |--&gt;||value1|value2|...|valueN| |
     *              +-----+   |+------+------+   +------+ |
     *              |  .  |   |+-----+                    |
     *              |  .  |   ||value|                    |
     *              |  .  |   |+-----+                    |
     *              |  .  |   +---------------------------+
     *              |  .  |                   .
     *              |  .  |                   .
     *              |  .  |                   .
     *              |  .  |   +---------------------------+
     *              |  .  |   |DataPoint M                |
     *              +-----+   |+------+------+   +------+ |
     *              |  M  |--&gt;||label |label |...|label | |
     *              +-----+   ||value1|value2|...|valueN| |
     *                        |+------+------+   +------+ |
     *                        |+-----+                    |
     *                        ||value|                    |
     *                        |+-----+                    |
     *                        +---------------------------+
     * Each distinct type of DataPoint represents the output of a specific
     * aggregation function, the result of applying the DataPoint's
     * associated function of to one or more measurements.
     * All DataPoint types have three common fields:
     * - Attributes includes key-value pairs associated with the data point
     * - TimeUnixNano is required, set to the end time of the aggregation
     * - StartTimeUnixNano is optional, but strongly encouraged for DataPoints
     *   having an AggregationTemporality field, as discussed below.
     * Both TimeUnixNano and StartTimeUnixNano values are expressed as
     * UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
     * # TimeUnixNano
     * This field is required, having consistent interpretation across
     * DataPoint types.  TimeUnixNano is the moment corresponding to when
     * the data point's aggregate value was captured.
     * Data points with the 0 value for TimeUnixNano SHOULD be rejected
     * by consumers.
     * # StartTimeUnixNano
     * StartTimeUnixNano in general allows detecting when a sequence of
     * observations is unbroken.  This field indicates to consumers the
     * start time for points with cumulative and delta
     * AggregationTemporality, and it should be included whenever possible
     * to support correct rate calculation.  Although it may be omitted
     * when the start time is truly unknown, setting StartTimeUnixNano is
     * strongly encouraged.
     * </pre>
     * <p>
     * Protobuf type {@code opentelemetry.proto.metrics.v1.Metric}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:opentelemetry.proto.metrics.v1.Metric)
            MetricOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return MetricsProto.internal_static_opentelemetry_proto_metrics_v1_Metric_descriptor;
        }

        @Override
        protected FieldAccessorTable
        internalGetFieldAccessorTable() {
            return MetricsProto.internal_static_opentelemetry_proto_metrics_v1_Metric_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            Metric.class, Builder.class);
        }

        // Construct using io.opentelemetry.proto.metrics.v1.Metric.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }

        private Builder(
                BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
        }

        private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessageV3
                    .alwaysUseFieldBuilders) {
            }
        }

        @Override
        public Builder clear() {
            super.clear();
            name_ = "";

            description_ = "";

            unit_ = "";

            dataCase_ = 0;
            data_ = null;
            return this;
        }

        @Override
        public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
            return MetricsProto.internal_static_opentelemetry_proto_metrics_v1_Metric_descriptor;
        }

        @Override
        public Metric getDefaultInstanceForType() {
            return Metric.getDefaultInstance();
        }

        @Override
        public Metric build() {
            Metric result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        @Override
        public Metric buildPartial() {
            Metric result = new Metric(this);
            result.name_ = name_;
            result.description_ = description_;
            result.unit_ = unit_;
            if (dataCase_ == 4) {
                if (intGaugeBuilder_ == null) {
                    result.data_ = data_;
                } else {
                    result.data_ = intGaugeBuilder_.build();
                }
            }
            if (dataCase_ == 5) {
                if (gaugeBuilder_ == null) {
                    result.data_ = data_;
                } else {
                    result.data_ = gaugeBuilder_.build();
                }
            }
            if (dataCase_ == 6) {
                if (intSumBuilder_ == null) {
                    result.data_ = data_;
                } else {
                    result.data_ = intSumBuilder_.build();
                }
            }
            if (dataCase_ == 7) {
                if (sumBuilder_ == null) {
                    result.data_ = data_;
                } else {
                    result.data_ = sumBuilder_.build();
                }
            }
            if (dataCase_ == 8) {
                if (intHistogramBuilder_ == null) {
                    result.data_ = data_;
                } else {
                    result.data_ = intHistogramBuilder_.build();
                }
            }
            if (dataCase_ == 9) {
                if (histogramBuilder_ == null) {
                    result.data_ = data_;
                } else {
                    result.data_ = histogramBuilder_.build();
                }
            }
            if (dataCase_ == 11) {
                if (summaryBuilder_ == null) {
                    result.data_ = data_;
                } else {
                    result.data_ = summaryBuilder_.build();
                }
            }
            result.dataCase_ = dataCase_;
            onBuilt();
            return result;
        }

        @Override
        public Builder clone() {
            return super.clone();
        }

        @Override
        public Builder setField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                Object value) {
            return super.setField(field, value);
        }

        @Override
        public Builder clearField(
                com.google.protobuf.Descriptors.FieldDescriptor field) {
            return super.clearField(field);
        }

        @Override
        public Builder clearOneof(
                com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return super.clearOneof(oneof);
        }

        @Override
        public Builder setRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                int index, Object value) {
            return super.setRepeatedField(field, index, value);
        }

        @Override
        public Builder addRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                Object value) {
            return super.addRepeatedField(field, value);
        }

        @Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof Metric) {
                return mergeFrom((Metric) other);
            } else {
                super.mergeFrom(other);
                return this;
            }
        }

        public Builder mergeFrom(Metric other) {
            if (other == Metric.getDefaultInstance()) return this;
            if (!other.getName().isEmpty()) {
                name_ = other.name_;
                onChanged();
            }
            if (!other.getDescription().isEmpty()) {
                description_ = other.description_;
                onChanged();
            }
            if (!other.getUnit().isEmpty()) {
                unit_ = other.unit_;
                onChanged();
            }
            switch (other.getDataCase()) {
                case INT_GAUGE: {
                    mergeIntGauge(other.getIntGauge());
                    break;
                }
                case GAUGE: {
                    mergeGauge(other.getGauge());
                    break;
                }
                case INT_SUM: {
                    mergeIntSum(other.getIntSum());
                    break;
                }
                case SUM: {
                    mergeSum(other.getSum());
                    break;
                }
                case INT_HISTOGRAM: {
                    mergeIntHistogram(other.getIntHistogram());
                    break;
                }
                case HISTOGRAM: {
                    mergeHistogram(other.getHistogram());
                    break;
                }
                case SUMMARY: {
                    mergeSummary(other.getSummary());
                    break;
                }
                case DATA_NOT_SET: {
                    break;
                }
            }
            this.mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
        }

        @Override
        public final boolean isInitialized() {
            return true;
        }

        @Override
        public Builder mergeFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            Metric parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                parsedMessage = (Metric) e.getUnfinishedMessage();
                throw e.unwrapIOException();
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }

        private int dataCase_ = 0;
        private Object data_;

        public DataCase
        getDataCase() {
            return DataCase.forNumber(
                    dataCase_);
        }

        public Builder clearData() {
            dataCase_ = 0;
            data_ = null;
            onChanged();
            return this;
        }


        private Object name_ = "";

        /**
         * <pre>
         * name of the metric, including its DNS name prefix. It must be unique.
         * </pre>
         *
         * <code>string name = 1;</code>
         *
         * @return The name.
         */
        public String getName() {
            Object ref = name_;
            if (!(ref instanceof String)) {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                name_ = s;
                return s;
            } else {
                return (String) ref;
            }
        }

        /**
         * <pre>
         * name of the metric, including its DNS name prefix. It must be unique.
         * </pre>
         *
         * <code>string name = 1;</code>
         *
         * @return The bytes for name.
         */
        public com.google.protobuf.ByteString
        getNameBytes() {
            Object ref = name_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                name_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        /**
         * <pre>
         * name of the metric, including its DNS name prefix. It must be unique.
         * </pre>
         *
         * <code>string name = 1;</code>
         *
         * @param value The name to set.
         * @return This builder for chaining.
         */
        public Builder setName(
                String value) {
            if (value == null) {
                throw new NullPointerException();
            }

            name_ = value;
            onChanged();
            return this;
        }

        /**
         * <pre>
         * name of the metric, including its DNS name prefix. It must be unique.
         * </pre>
         *
         * <code>string name = 1;</code>
         *
         * @return This builder for chaining.
         */
        public Builder clearName() {

            name_ = getDefaultInstance().getName();
            onChanged();
            return this;
        }

        /**
         * <pre>
         * name of the metric, including its DNS name prefix. It must be unique.
         * </pre>
         *
         * <code>string name = 1;</code>
         *
         * @param value The bytes for name to set.
         * @return This builder for chaining.
         */
        public Builder setNameBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            checkByteStringIsUtf8(value);

            name_ = value;
            onChanged();
            return this;
        }

        private Object description_ = "";

        /**
         * <pre>
         * description of the metric, which can be used in documentation.
         * </pre>
         *
         * <code>string description = 2;</code>
         *
         * @return The description.
         */
        public String getDescription() {
            Object ref = description_;
            if (!(ref instanceof String)) {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                description_ = s;
                return s;
            } else {
                return (String) ref;
            }
        }

        /**
         * <pre>
         * description of the metric, which can be used in documentation.
         * </pre>
         *
         * <code>string description = 2;</code>
         *
         * @return The bytes for description.
         */
        public com.google.protobuf.ByteString
        getDescriptionBytes() {
            Object ref = description_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                description_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        /**
         * <pre>
         * description of the metric, which can be used in documentation.
         * </pre>
         *
         * <code>string description = 2;</code>
         *
         * @param value The description to set.
         * @return This builder for chaining.
         */
        public Builder setDescription(
                String value) {
            if (value == null) {
                throw new NullPointerException();
            }

            description_ = value;
            onChanged();
            return this;
        }

        /**
         * <pre>
         * description of the metric, which can be used in documentation.
         * </pre>
         *
         * <code>string description = 2;</code>
         *
         * @return This builder for chaining.
         */
        public Builder clearDescription() {

            description_ = getDefaultInstance().getDescription();
            onChanged();
            return this;
        }

        /**
         * <pre>
         * description of the metric, which can be used in documentation.
         * </pre>
         *
         * <code>string description = 2;</code>
         *
         * @param value The bytes for description to set.
         * @return This builder for chaining.
         */
        public Builder setDescriptionBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            checkByteStringIsUtf8(value);

            description_ = value;
            onChanged();
            return this;
        }

        private Object unit_ = "";

        /**
         * <pre>
         * unit in which the metric value is reported. Follows the format
         * described by http://unitsofmeasure.org/ucum.html.
         * </pre>
         *
         * <code>string unit = 3;</code>
         *
         * @return The unit.
         */
        public String getUnit() {
            Object ref = unit_;
            if (!(ref instanceof String)) {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                unit_ = s;
                return s;
            } else {
                return (String) ref;
            }
        }

        /**
         * <pre>
         * unit in which the metric value is reported. Follows the format
         * described by http://unitsofmeasure.org/ucum.html.
         * </pre>
         *
         * <code>string unit = 3;</code>
         *
         * @return The bytes for unit.
         */
        public com.google.protobuf.ByteString
        getUnitBytes() {
            Object ref = unit_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                unit_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        /**
         * <pre>
         * unit in which the metric value is reported. Follows the format
         * described by http://unitsofmeasure.org/ucum.html.
         * </pre>
         *
         * <code>string unit = 3;</code>
         *
         * @param value The unit to set.
         * @return This builder for chaining.
         */
        public Builder setUnit(
                String value) {
            if (value == null) {
                throw new NullPointerException();
            }

            unit_ = value;
            onChanged();
            return this;
        }

        /**
         * <pre>
         * unit in which the metric value is reported. Follows the format
         * described by http://unitsofmeasure.org/ucum.html.
         * </pre>
         *
         * <code>string unit = 3;</code>
         *
         * @return This builder for chaining.
         */
        public Builder clearUnit() {

            unit_ = getDefaultInstance().getUnit();
            onChanged();
            return this;
        }

        /**
         * <pre>
         * unit in which the metric value is reported. Follows the format
         * described by http://unitsofmeasure.org/ucum.html.
         * </pre>
         *
         * <code>string unit = 3;</code>
         *
         * @param value The bytes for unit to set.
         * @return This builder for chaining.
         */
        public Builder setUnitBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            checkByteStringIsUtf8(value);

            unit_ = value;
            onChanged();
            return this;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
                IntGauge, IntGauge.Builder, IntGaugeOrBuilder> intGaugeBuilder_;

        /**
         * <pre>
         * IntGauge and IntSum are deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `int_gauge` and `int_sum` fields.
         * 2. New senders, which are aware of this change MUST send only `gauge`
         * and `sum` fields.
         * 3. New receivers, which are aware of this change MUST convert these into
         * `gauge` and `sum` by using the provided as_int field in the oneof values.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>.opentelemetry.proto.metrics.v1.IntGauge int_gauge = 4 [deprecated = true];</code>
         *
         * @return Whether the intGauge field is set.
         */
        @Override
        @Deprecated
        public boolean hasIntGauge() {
            return dataCase_ == 4;
        }

        /**
         * <pre>
         * IntGauge and IntSum are deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `int_gauge` and `int_sum` fields.
         * 2. New senders, which are aware of this change MUST send only `gauge`
         * and `sum` fields.
         * 3. New receivers, which are aware of this change MUST convert these into
         * `gauge` and `sum` by using the provided as_int field in the oneof values.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>.opentelemetry.proto.metrics.v1.IntGauge int_gauge = 4 [deprecated = true];</code>
         *
         * @return The intGauge.
         */
        @Override
        @Deprecated
        public IntGauge getIntGauge() {
            if (intGaugeBuilder_ == null) {
                if (dataCase_ == 4) {
                    return (IntGauge) data_;
                }
                return IntGauge.getDefaultInstance();
            } else {
                if (dataCase_ == 4) {
                    return intGaugeBuilder_.getMessage();
                }
                return IntGauge.getDefaultInstance();
            }
        }

        /**
         * <pre>
         * IntGauge and IntSum are deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `int_gauge` and `int_sum` fields.
         * 2. New senders, which are aware of this change MUST send only `gauge`
         * and `sum` fields.
         * 3. New receivers, which are aware of this change MUST convert these into
         * `gauge` and `sum` by using the provided as_int field in the oneof values.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>.opentelemetry.proto.metrics.v1.IntGauge int_gauge = 4 [deprecated = true];</code>
         */
        @Deprecated
        public Builder setIntGauge(IntGauge value) {
            if (intGaugeBuilder_ == null) {
                if (value == null) {
                    throw new NullPointerException();
                }
                data_ = value;
                onChanged();
            } else {
                intGaugeBuilder_.setMessage(value);
            }
            dataCase_ = 4;
            return this;
        }

        /**
         * <pre>
         * IntGauge and IntSum are deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `int_gauge` and `int_sum` fields.
         * 2. New senders, which are aware of this change MUST send only `gauge`
         * and `sum` fields.
         * 3. New receivers, which are aware of this change MUST convert these into
         * `gauge` and `sum` by using the provided as_int field in the oneof values.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>.opentelemetry.proto.metrics.v1.IntGauge int_gauge = 4 [deprecated = true];</code>
         */
        @Deprecated
        public Builder setIntGauge(
                IntGauge.Builder builderForValue) {
            if (intGaugeBuilder_ == null) {
                data_ = builderForValue.build();
                onChanged();
            } else {
                intGaugeBuilder_.setMessage(builderForValue.build());
            }
            dataCase_ = 4;
            return this;
        }

        /**
         * <pre>
         * IntGauge and IntSum are deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `int_gauge` and `int_sum` fields.
         * 2. New senders, which are aware of this change MUST send only `gauge`
         * and `sum` fields.
         * 3. New receivers, which are aware of this change MUST convert these into
         * `gauge` and `sum` by using the provided as_int field in the oneof values.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>.opentelemetry.proto.metrics.v1.IntGauge int_gauge = 4 [deprecated = true];</code>
         */
        @Deprecated
        public Builder mergeIntGauge(IntGauge value) {
            if (intGaugeBuilder_ == null) {
                if (dataCase_ == 4 &&
                        data_ != IntGauge.getDefaultInstance()) {
                    data_ = IntGauge.newBuilder((IntGauge) data_)
                            .mergeFrom(value).buildPartial();
                } else {
                    data_ = value;
                }
                onChanged();
            } else {
                if (dataCase_ == 4) {
                    intGaugeBuilder_.mergeFrom(value);
                }
                intGaugeBuilder_.setMessage(value);
            }
            dataCase_ = 4;
            return this;
        }

        /**
         * <pre>
         * IntGauge and IntSum are deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `int_gauge` and `int_sum` fields.
         * 2. New senders, which are aware of this change MUST send only `gauge`
         * and `sum` fields.
         * 3. New receivers, which are aware of this change MUST convert these into
         * `gauge` and `sum` by using the provided as_int field in the oneof values.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>.opentelemetry.proto.metrics.v1.IntGauge int_gauge = 4 [deprecated = true];</code>
         */
        @Deprecated
        public Builder clearIntGauge() {
            if (intGaugeBuilder_ == null) {
                if (dataCase_ == 4) {
                    dataCase_ = 0;
                    data_ = null;
                    onChanged();
                }
            } else {
                if (dataCase_ == 4) {
                    dataCase_ = 0;
                    data_ = null;
                }
                intGaugeBuilder_.clear();
            }
            return this;
        }

        /**
         * <pre>
         * IntGauge and IntSum are deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `int_gauge` and `int_sum` fields.
         * 2. New senders, which are aware of this change MUST send only `gauge`
         * and `sum` fields.
         * 3. New receivers, which are aware of this change MUST convert these into
         * `gauge` and `sum` by using the provided as_int field in the oneof values.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>.opentelemetry.proto.metrics.v1.IntGauge int_gauge = 4 [deprecated = true];</code>
         */
        @Deprecated
        public IntGauge.Builder getIntGaugeBuilder() {
            return getIntGaugeFieldBuilder().getBuilder();
        }

        /**
         * <pre>
         * IntGauge and IntSum are deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `int_gauge` and `int_sum` fields.
         * 2. New senders, which are aware of this change MUST send only `gauge`
         * and `sum` fields.
         * 3. New receivers, which are aware of this change MUST convert these into
         * `gauge` and `sum` by using the provided as_int field in the oneof values.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>.opentelemetry.proto.metrics.v1.IntGauge int_gauge = 4 [deprecated = true];</code>
         */
        @Override
        @Deprecated
        public IntGaugeOrBuilder getIntGaugeOrBuilder() {
            if ((dataCase_ == 4) && (intGaugeBuilder_ != null)) {
                return intGaugeBuilder_.getMessageOrBuilder();
            } else {
                if (dataCase_ == 4) {
                    return (IntGauge) data_;
                }
                return IntGauge.getDefaultInstance();
            }
        }

        /**
         * <pre>
         * IntGauge and IntSum are deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `int_gauge` and `int_sum` fields.
         * 2. New senders, which are aware of this change MUST send only `gauge`
         * and `sum` fields.
         * 3. New receivers, which are aware of this change MUST convert these into
         * `gauge` and `sum` by using the provided as_int field in the oneof values.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>.opentelemetry.proto.metrics.v1.IntGauge int_gauge = 4 [deprecated = true];</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
                IntGauge, IntGauge.Builder, IntGaugeOrBuilder>
        getIntGaugeFieldBuilder() {
            if (intGaugeBuilder_ == null) {
                if (!(dataCase_ == 4)) {
                    data_ = IntGauge.getDefaultInstance();
                }
                intGaugeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                        IntGauge, IntGauge.Builder, IntGaugeOrBuilder>(
                        (IntGauge) data_,
                        getParentForChildren(),
                        isClean());
                data_ = null;
            }
            dataCase_ = 4;
            onChanged();
            ;
            return intGaugeBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
                Gauge, Gauge.Builder, GaugeOrBuilder> gaugeBuilder_;

        /**
         * <code>.opentelemetry.proto.metrics.v1.Gauge gauge = 5;</code>
         *
         * @return Whether the gauge field is set.
         */
        @Override
        public boolean hasGauge() {
            return dataCase_ == 5;
        }

        /**
         * <code>.opentelemetry.proto.metrics.v1.Gauge gauge = 5;</code>
         *
         * @return The gauge.
         */
        @Override
        public Gauge getGauge() {
            if (gaugeBuilder_ == null) {
                if (dataCase_ == 5) {
                    return (Gauge) data_;
                }
                return Gauge.getDefaultInstance();
            } else {
                if (dataCase_ == 5) {
                    return gaugeBuilder_.getMessage();
                }
                return Gauge.getDefaultInstance();
            }
        }

        /**
         * <code>.opentelemetry.proto.metrics.v1.Gauge gauge = 5;</code>
         */
        public Builder setGauge(Gauge value) {
            if (gaugeBuilder_ == null) {
                if (value == null) {
                    throw new NullPointerException();
                }
                data_ = value;
                onChanged();
            } else {
                gaugeBuilder_.setMessage(value);
            }
            dataCase_ = 5;
            return this;
        }

        /**
         * <code>.opentelemetry.proto.metrics.v1.Gauge gauge = 5;</code>
         */
        public Builder setGauge(
                Gauge.Builder builderForValue) {
            if (gaugeBuilder_ == null) {
                data_ = builderForValue.build();
                onChanged();
            } else {
                gaugeBuilder_.setMessage(builderForValue.build());
            }
            dataCase_ = 5;
            return this;
        }

        /**
         * <code>.opentelemetry.proto.metrics.v1.Gauge gauge = 5;</code>
         */
        public Builder mergeGauge(Gauge value) {
            if (gaugeBuilder_ == null) {
                if (dataCase_ == 5 &&
                        data_ != Gauge.getDefaultInstance()) {
                    data_ = Gauge.newBuilder((Gauge) data_)
                            .mergeFrom(value).buildPartial();
                } else {
                    data_ = value;
                }
                onChanged();
            } else {
                if (dataCase_ == 5) {
                    gaugeBuilder_.mergeFrom(value);
                }
                gaugeBuilder_.setMessage(value);
            }
            dataCase_ = 5;
            return this;
        }

        /**
         * <code>.opentelemetry.proto.metrics.v1.Gauge gauge = 5;</code>
         */
        public Builder clearGauge() {
            if (gaugeBuilder_ == null) {
                if (dataCase_ == 5) {
                    dataCase_ = 0;
                    data_ = null;
                    onChanged();
                }
            } else {
                if (dataCase_ == 5) {
                    dataCase_ = 0;
                    data_ = null;
                }
                gaugeBuilder_.clear();
            }
            return this;
        }

        /**
         * <code>.opentelemetry.proto.metrics.v1.Gauge gauge = 5;</code>
         */
        public Gauge.Builder getGaugeBuilder() {
            return getGaugeFieldBuilder().getBuilder();
        }

        /**
         * <code>.opentelemetry.proto.metrics.v1.Gauge gauge = 5;</code>
         */
        @Override
        public GaugeOrBuilder getGaugeOrBuilder() {
            if ((dataCase_ == 5) && (gaugeBuilder_ != null)) {
                return gaugeBuilder_.getMessageOrBuilder();
            } else {
                if (dataCase_ == 5) {
                    return (Gauge) data_;
                }
                return Gauge.getDefaultInstance();
            }
        }

        /**
         * <code>.opentelemetry.proto.metrics.v1.Gauge gauge = 5;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
                Gauge, Gauge.Builder, GaugeOrBuilder>
        getGaugeFieldBuilder() {
            if (gaugeBuilder_ == null) {
                if (!(dataCase_ == 5)) {
                    data_ = Gauge.getDefaultInstance();
                }
                gaugeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                        Gauge, Gauge.Builder, GaugeOrBuilder>(
                        (Gauge) data_,
                        getParentForChildren(),
                        isClean());
                data_ = null;
            }
            dataCase_ = 5;
            onChanged();
            ;
            return gaugeBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
                IntSum, IntSum.Builder, IntSumOrBuilder> intSumBuilder_;

        /**
         * <pre>
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>.opentelemetry.proto.metrics.v1.IntSum int_sum = 6 [deprecated = true];</code>
         *
         * @return Whether the intSum field is set.
         */
        @Override
        @Deprecated
        public boolean hasIntSum() {
            return dataCase_ == 6;
        }

        /**
         * <pre>
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>.opentelemetry.proto.metrics.v1.IntSum int_sum = 6 [deprecated = true];</code>
         *
         * @return The intSum.
         */
        @Override
        @Deprecated
        public IntSum getIntSum() {
            if (intSumBuilder_ == null) {
                if (dataCase_ == 6) {
                    return (IntSum) data_;
                }
                return IntSum.getDefaultInstance();
            } else {
                if (dataCase_ == 6) {
                    return intSumBuilder_.getMessage();
                }
                return IntSum.getDefaultInstance();
            }
        }

        /**
         * <pre>
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>.opentelemetry.proto.metrics.v1.IntSum int_sum = 6 [deprecated = true];</code>
         */
        @Deprecated
        public Builder setIntSum(IntSum value) {
            if (intSumBuilder_ == null) {
                if (value == null) {
                    throw new NullPointerException();
                }
                data_ = value;
                onChanged();
            } else {
                intSumBuilder_.setMessage(value);
            }
            dataCase_ = 6;
            return this;
        }

        /**
         * <pre>
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>.opentelemetry.proto.metrics.v1.IntSum int_sum = 6 [deprecated = true];</code>
         */
        @Deprecated
        public Builder setIntSum(
                IntSum.Builder builderForValue) {
            if (intSumBuilder_ == null) {
                data_ = builderForValue.build();
                onChanged();
            } else {
                intSumBuilder_.setMessage(builderForValue.build());
            }
            dataCase_ = 6;
            return this;
        }

        /**
         * <pre>
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>.opentelemetry.proto.metrics.v1.IntSum int_sum = 6 [deprecated = true];</code>
         */
        @Deprecated
        public Builder mergeIntSum(IntSum value) {
            if (intSumBuilder_ == null) {
                if (dataCase_ == 6 &&
                        data_ != IntSum.getDefaultInstance()) {
                    data_ = IntSum.newBuilder((IntSum) data_)
                            .mergeFrom(value).buildPartial();
                } else {
                    data_ = value;
                }
                onChanged();
            } else {
                if (dataCase_ == 6) {
                    intSumBuilder_.mergeFrom(value);
                }
                intSumBuilder_.setMessage(value);
            }
            dataCase_ = 6;
            return this;
        }

        /**
         * <pre>
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>.opentelemetry.proto.metrics.v1.IntSum int_sum = 6 [deprecated = true];</code>
         */
        @Deprecated
        public Builder clearIntSum() {
            if (intSumBuilder_ == null) {
                if (dataCase_ == 6) {
                    dataCase_ = 0;
                    data_ = null;
                    onChanged();
                }
            } else {
                if (dataCase_ == 6) {
                    dataCase_ = 0;
                    data_ = null;
                }
                intSumBuilder_.clear();
            }
            return this;
        }

        /**
         * <pre>
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>.opentelemetry.proto.metrics.v1.IntSum int_sum = 6 [deprecated = true];</code>
         */
        @Deprecated
        public IntSum.Builder getIntSumBuilder() {
            return getIntSumFieldBuilder().getBuilder();
        }

        /**
         * <pre>
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>.opentelemetry.proto.metrics.v1.IntSum int_sum = 6 [deprecated = true];</code>
         */
        @Override
        @Deprecated
        public IntSumOrBuilder getIntSumOrBuilder() {
            if ((dataCase_ == 6) && (intSumBuilder_ != null)) {
                return intSumBuilder_.getMessageOrBuilder();
            } else {
                if (dataCase_ == 6) {
                    return (IntSum) data_;
                }
                return IntSum.getDefaultInstance();
            }
        }

        /**
         * <pre>
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>.opentelemetry.proto.metrics.v1.IntSum int_sum = 6 [deprecated = true];</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
                IntSum, IntSum.Builder, IntSumOrBuilder>
        getIntSumFieldBuilder() {
            if (intSumBuilder_ == null) {
                if (!(dataCase_ == 6)) {
                    data_ = IntSum.getDefaultInstance();
                }
                intSumBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                        IntSum, IntSum.Builder, IntSumOrBuilder>(
                        (IntSum) data_,
                        getParentForChildren(),
                        isClean());
                data_ = null;
            }
            dataCase_ = 6;
            onChanged();
            ;
            return intSumBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
                Sum, Sum.Builder, SumOrBuilder> sumBuilder_;

        /**
         * <code>.opentelemetry.proto.metrics.v1.Sum sum = 7;</code>
         *
         * @return Whether the sum field is set.
         */
        @Override
        public boolean hasSum() {
            return dataCase_ == 7;
        }

        /**
         * <code>.opentelemetry.proto.metrics.v1.Sum sum = 7;</code>
         *
         * @return The sum.
         */
        @Override
        public Sum getSum() {
            if (sumBuilder_ == null) {
                if (dataCase_ == 7) {
                    return (Sum) data_;
                }
                return Sum.getDefaultInstance();
            } else {
                if (dataCase_ == 7) {
                    return sumBuilder_.getMessage();
                }
                return Sum.getDefaultInstance();
            }
        }

        /**
         * <code>.opentelemetry.proto.metrics.v1.Sum sum = 7;</code>
         */
        public Builder setSum(Sum value) {
            if (sumBuilder_ == null) {
                if (value == null) {
                    throw new NullPointerException();
                }
                data_ = value;
                onChanged();
            } else {
                sumBuilder_.setMessage(value);
            }
            dataCase_ = 7;
            return this;
        }

        /**
         * <code>.opentelemetry.proto.metrics.v1.Sum sum = 7;</code>
         */
        public Builder setSum(
                Sum.Builder builderForValue) {
            if (sumBuilder_ == null) {
                data_ = builderForValue.build();
                onChanged();
            } else {
                sumBuilder_.setMessage(builderForValue.build());
            }
            dataCase_ = 7;
            return this;
        }

        /**
         * <code>.opentelemetry.proto.metrics.v1.Sum sum = 7;</code>
         */
        public Builder mergeSum(Sum value) {
            if (sumBuilder_ == null) {
                if (dataCase_ == 7 &&
                        data_ != Sum.getDefaultInstance()) {
                    data_ = Sum.newBuilder((Sum) data_)
                            .mergeFrom(value).buildPartial();
                } else {
                    data_ = value;
                }
                onChanged();
            } else {
                if (dataCase_ == 7) {
                    sumBuilder_.mergeFrom(value);
                }
                sumBuilder_.setMessage(value);
            }
            dataCase_ = 7;
            return this;
        }

        /**
         * <code>.opentelemetry.proto.metrics.v1.Sum sum = 7;</code>
         */
        public Builder clearSum() {
            if (sumBuilder_ == null) {
                if (dataCase_ == 7) {
                    dataCase_ = 0;
                    data_ = null;
                    onChanged();
                }
            } else {
                if (dataCase_ == 7) {
                    dataCase_ = 0;
                    data_ = null;
                }
                sumBuilder_.clear();
            }
            return this;
        }

        /**
         * <code>.opentelemetry.proto.metrics.v1.Sum sum = 7;</code>
         */
        public Sum.Builder getSumBuilder() {
            return getSumFieldBuilder().getBuilder();
        }

        /**
         * <code>.opentelemetry.proto.metrics.v1.Sum sum = 7;</code>
         */
        @Override
        public SumOrBuilder getSumOrBuilder() {
            if ((dataCase_ == 7) && (sumBuilder_ != null)) {
                return sumBuilder_.getMessageOrBuilder();
            } else {
                if (dataCase_ == 7) {
                    return (Sum) data_;
                }
                return Sum.getDefaultInstance();
            }
        }

        /**
         * <code>.opentelemetry.proto.metrics.v1.Sum sum = 7;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
                Sum, Sum.Builder, SumOrBuilder>
        getSumFieldBuilder() {
            if (sumBuilder_ == null) {
                if (!(dataCase_ == 7)) {
                    data_ = Sum.getDefaultInstance();
                }
                sumBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                        Sum, Sum.Builder, SumOrBuilder>(
                        (Sum) data_,
                        getParentForChildren(),
                        isClean());
                data_ = null;
            }
            dataCase_ = 7;
            onChanged();
            ;
            return sumBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
                IntHistogram, IntHistogram.Builder, IntHistogramOrBuilder> intHistogramBuilder_;

        /**
         * <pre>
         * IntHistogram is deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `int_histogram` field.
         * 2. New senders, which are aware of this change MUST send only `histogram`.
         * 3. New receivers, which are aware of this change MUST convert this into
         * `histogram` by simply converting all int64 values into float.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>.opentelemetry.proto.metrics.v1.IntHistogram int_histogram = 8 [deprecated = true];</code>
         *
         * @return Whether the intHistogram field is set.
         */
        @Override
        @Deprecated
        public boolean hasIntHistogram() {
            return dataCase_ == 8;
        }

        /**
         * <pre>
         * IntHistogram is deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `int_histogram` field.
         * 2. New senders, which are aware of this change MUST send only `histogram`.
         * 3. New receivers, which are aware of this change MUST convert this into
         * `histogram` by simply converting all int64 values into float.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>.opentelemetry.proto.metrics.v1.IntHistogram int_histogram = 8 [deprecated = true];</code>
         *
         * @return The intHistogram.
         */
        @Override
        @Deprecated
        public IntHistogram getIntHistogram() {
            if (intHistogramBuilder_ == null) {
                if (dataCase_ == 8) {
                    return (IntHistogram) data_;
                }
                return IntHistogram.getDefaultInstance();
            } else {
                if (dataCase_ == 8) {
                    return intHistogramBuilder_.getMessage();
                }
                return IntHistogram.getDefaultInstance();
            }
        }

        /**
         * <pre>
         * IntHistogram is deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `int_histogram` field.
         * 2. New senders, which are aware of this change MUST send only `histogram`.
         * 3. New receivers, which are aware of this change MUST convert this into
         * `histogram` by simply converting all int64 values into float.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>.opentelemetry.proto.metrics.v1.IntHistogram int_histogram = 8 [deprecated = true];</code>
         */
        @Deprecated
        public Builder setIntHistogram(IntHistogram value) {
            if (intHistogramBuilder_ == null) {
                if (value == null) {
                    throw new NullPointerException();
                }
                data_ = value;
                onChanged();
            } else {
                intHistogramBuilder_.setMessage(value);
            }
            dataCase_ = 8;
            return this;
        }

        /**
         * <pre>
         * IntHistogram is deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `int_histogram` field.
         * 2. New senders, which are aware of this change MUST send only `histogram`.
         * 3. New receivers, which are aware of this change MUST convert this into
         * `histogram` by simply converting all int64 values into float.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>.opentelemetry.proto.metrics.v1.IntHistogram int_histogram = 8 [deprecated = true];</code>
         */
        @Deprecated
        public Builder setIntHistogram(
                IntHistogram.Builder builderForValue) {
            if (intHistogramBuilder_ == null) {
                data_ = builderForValue.build();
                onChanged();
            } else {
                intHistogramBuilder_.setMessage(builderForValue.build());
            }
            dataCase_ = 8;
            return this;
        }

        /**
         * <pre>
         * IntHistogram is deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `int_histogram` field.
         * 2. New senders, which are aware of this change MUST send only `histogram`.
         * 3. New receivers, which are aware of this change MUST convert this into
         * `histogram` by simply converting all int64 values into float.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>.opentelemetry.proto.metrics.v1.IntHistogram int_histogram = 8 [deprecated = true];</code>
         */
        @Deprecated
        public Builder mergeIntHistogram(IntHistogram value) {
            if (intHistogramBuilder_ == null) {
                if (dataCase_ == 8 &&
                        data_ != IntHistogram.getDefaultInstance()) {
                    data_ = IntHistogram.newBuilder((IntHistogram) data_)
                            .mergeFrom(value).buildPartial();
                } else {
                    data_ = value;
                }
                onChanged();
            } else {
                if (dataCase_ == 8) {
                    intHistogramBuilder_.mergeFrom(value);
                }
                intHistogramBuilder_.setMessage(value);
            }
            dataCase_ = 8;
            return this;
        }

        /**
         * <pre>
         * IntHistogram is deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `int_histogram` field.
         * 2. New senders, which are aware of this change MUST send only `histogram`.
         * 3. New receivers, which are aware of this change MUST convert this into
         * `histogram` by simply converting all int64 values into float.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>.opentelemetry.proto.metrics.v1.IntHistogram int_histogram = 8 [deprecated = true];</code>
         */
        @Deprecated
        public Builder clearIntHistogram() {
            if (intHistogramBuilder_ == null) {
                if (dataCase_ == 8) {
                    dataCase_ = 0;
                    data_ = null;
                    onChanged();
                }
            } else {
                if (dataCase_ == 8) {
                    dataCase_ = 0;
                    data_ = null;
                }
                intHistogramBuilder_.clear();
            }
            return this;
        }

        /**
         * <pre>
         * IntHistogram is deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `int_histogram` field.
         * 2. New senders, which are aware of this change MUST send only `histogram`.
         * 3. New receivers, which are aware of this change MUST convert this into
         * `histogram` by simply converting all int64 values into float.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>.opentelemetry.proto.metrics.v1.IntHistogram int_histogram = 8 [deprecated = true];</code>
         */
        @Deprecated
        public IntHistogram.Builder getIntHistogramBuilder() {
            return getIntHistogramFieldBuilder().getBuilder();
        }

        /**
         * <pre>
         * IntHistogram is deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `int_histogram` field.
         * 2. New senders, which are aware of this change MUST send only `histogram`.
         * 3. New receivers, which are aware of this change MUST convert this into
         * `histogram` by simply converting all int64 values into float.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>.opentelemetry.proto.metrics.v1.IntHistogram int_histogram = 8 [deprecated = true];</code>
         */
        @Override
        @Deprecated
        public IntHistogramOrBuilder getIntHistogramOrBuilder() {
            if ((dataCase_ == 8) && (intHistogramBuilder_ != null)) {
                return intHistogramBuilder_.getMessageOrBuilder();
            } else {
                if (dataCase_ == 8) {
                    return (IntHistogram) data_;
                }
                return IntHistogram.getDefaultInstance();
            }
        }

        /**
         * <pre>
         * IntHistogram is deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `int_histogram` field.
         * 2. New senders, which are aware of this change MUST send only `histogram`.
         * 3. New receivers, which are aware of this change MUST convert this into
         * `histogram` by simply converting all int64 values into float.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>.opentelemetry.proto.metrics.v1.IntHistogram int_histogram = 8 [deprecated = true];</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
                IntHistogram, IntHistogram.Builder, IntHistogramOrBuilder>
        getIntHistogramFieldBuilder() {
            if (intHistogramBuilder_ == null) {
                if (!(dataCase_ == 8)) {
                    data_ = IntHistogram.getDefaultInstance();
                }
                intHistogramBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                        IntHistogram, IntHistogram.Builder, IntHistogramOrBuilder>(
                        (IntHistogram) data_,
                        getParentForChildren(),
                        isClean());
                data_ = null;
            }
            dataCase_ = 8;
            onChanged();
            ;
            return intHistogramBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
                Histogram, Histogram.Builder, HistogramOrBuilder> histogramBuilder_;

        /**
         * <code>.opentelemetry.proto.metrics.v1.Histogram histogram = 9;</code>
         *
         * @return Whether the histogram field is set.
         */
        @Override
        public boolean hasHistogram() {
            return dataCase_ == 9;
        }

        /**
         * <code>.opentelemetry.proto.metrics.v1.Histogram histogram = 9;</code>
         *
         * @return The histogram.
         */
        @Override
        public Histogram getHistogram() {
            if (histogramBuilder_ == null) {
                if (dataCase_ == 9) {
                    return (Histogram) data_;
                }
                return Histogram.getDefaultInstance();
            } else {
                if (dataCase_ == 9) {
                    return histogramBuilder_.getMessage();
                }
                return Histogram.getDefaultInstance();
            }
        }

        /**
         * <code>.opentelemetry.proto.metrics.v1.Histogram histogram = 9;</code>
         */
        public Builder setHistogram(Histogram value) {
            if (histogramBuilder_ == null) {
                if (value == null) {
                    throw new NullPointerException();
                }
                data_ = value;
                onChanged();
            } else {
                histogramBuilder_.setMessage(value);
            }
            dataCase_ = 9;
            return this;
        }

        /**
         * <code>.opentelemetry.proto.metrics.v1.Histogram histogram = 9;</code>
         */
        public Builder setHistogram(
                Histogram.Builder builderForValue) {
            if (histogramBuilder_ == null) {
                data_ = builderForValue.build();
                onChanged();
            } else {
                histogramBuilder_.setMessage(builderForValue.build());
            }
            dataCase_ = 9;
            return this;
        }

        /**
         * <code>.opentelemetry.proto.metrics.v1.Histogram histogram = 9;</code>
         */
        public Builder mergeHistogram(Histogram value) {
            if (histogramBuilder_ == null) {
                if (dataCase_ == 9 &&
                        data_ != Histogram.getDefaultInstance()) {
                    data_ = Histogram.newBuilder((Histogram) data_)
                            .mergeFrom(value).buildPartial();
                } else {
                    data_ = value;
                }
                onChanged();
            } else {
                if (dataCase_ == 9) {
                    histogramBuilder_.mergeFrom(value);
                }
                histogramBuilder_.setMessage(value);
            }
            dataCase_ = 9;
            return this;
        }

        /**
         * <code>.opentelemetry.proto.metrics.v1.Histogram histogram = 9;</code>
         */
        public Builder clearHistogram() {
            if (histogramBuilder_ == null) {
                if (dataCase_ == 9) {
                    dataCase_ = 0;
                    data_ = null;
                    onChanged();
                }
            } else {
                if (dataCase_ == 9) {
                    dataCase_ = 0;
                    data_ = null;
                }
                histogramBuilder_.clear();
            }
            return this;
        }

        /**
         * <code>.opentelemetry.proto.metrics.v1.Histogram histogram = 9;</code>
         */
        public Histogram.Builder getHistogramBuilder() {
            return getHistogramFieldBuilder().getBuilder();
        }

        /**
         * <code>.opentelemetry.proto.metrics.v1.Histogram histogram = 9;</code>
         */
        @Override
        public HistogramOrBuilder getHistogramOrBuilder() {
            if ((dataCase_ == 9) && (histogramBuilder_ != null)) {
                return histogramBuilder_.getMessageOrBuilder();
            } else {
                if (dataCase_ == 9) {
                    return (Histogram) data_;
                }
                return Histogram.getDefaultInstance();
            }
        }

        /**
         * <code>.opentelemetry.proto.metrics.v1.Histogram histogram = 9;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
                Histogram, Histogram.Builder, HistogramOrBuilder>
        getHistogramFieldBuilder() {
            if (histogramBuilder_ == null) {
                if (!(dataCase_ == 9)) {
                    data_ = Histogram.getDefaultInstance();
                }
                histogramBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                        Histogram, Histogram.Builder, HistogramOrBuilder>(
                        (Histogram) data_,
                        getParentForChildren(),
                        isClean());
                data_ = null;
            }
            dataCase_ = 9;
            onChanged();
            ;
            return histogramBuilder_;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
                Summary, Summary.Builder, SummaryOrBuilder> summaryBuilder_;

        /**
         * <code>.opentelemetry.proto.metrics.v1.Summary summary = 11;</code>
         *
         * @return Whether the summary field is set.
         */
        @Override
        public boolean hasSummary() {
            return dataCase_ == 11;
        }

        /**
         * <code>.opentelemetry.proto.metrics.v1.Summary summary = 11;</code>
         *
         * @return The summary.
         */
        @Override
        public Summary getSummary() {
            if (summaryBuilder_ == null) {
                if (dataCase_ == 11) {
                    return (Summary) data_;
                }
                return Summary.getDefaultInstance();
            } else {
                if (dataCase_ == 11) {
                    return summaryBuilder_.getMessage();
                }
                return Summary.getDefaultInstance();
            }
        }

        /**
         * <code>.opentelemetry.proto.metrics.v1.Summary summary = 11;</code>
         */
        public Builder setSummary(Summary value) {
            if (summaryBuilder_ == null) {
                if (value == null) {
                    throw new NullPointerException();
                }
                data_ = value;
                onChanged();
            } else {
                summaryBuilder_.setMessage(value);
            }
            dataCase_ = 11;
            return this;
        }

        /**
         * <code>.opentelemetry.proto.metrics.v1.Summary summary = 11;</code>
         */
        public Builder setSummary(
                Summary.Builder builderForValue) {
            if (summaryBuilder_ == null) {
                data_ = builderForValue.build();
                onChanged();
            } else {
                summaryBuilder_.setMessage(builderForValue.build());
            }
            dataCase_ = 11;
            return this;
        }

        /**
         * <code>.opentelemetry.proto.metrics.v1.Summary summary = 11;</code>
         */
        public Builder mergeSummary(Summary value) {
            if (summaryBuilder_ == null) {
                if (dataCase_ == 11 &&
                        data_ != Summary.getDefaultInstance()) {
                    data_ = Summary.newBuilder((Summary) data_)
                            .mergeFrom(value).buildPartial();
                } else {
                    data_ = value;
                }
                onChanged();
            } else {
                if (dataCase_ == 11) {
                    summaryBuilder_.mergeFrom(value);
                }
                summaryBuilder_.setMessage(value);
            }
            dataCase_ = 11;
            return this;
        }

        /**
         * <code>.opentelemetry.proto.metrics.v1.Summary summary = 11;</code>
         */
        public Builder clearSummary() {
            if (summaryBuilder_ == null) {
                if (dataCase_ == 11) {
                    dataCase_ = 0;
                    data_ = null;
                    onChanged();
                }
            } else {
                if (dataCase_ == 11) {
                    dataCase_ = 0;
                    data_ = null;
                }
                summaryBuilder_.clear();
            }
            return this;
        }

        /**
         * <code>.opentelemetry.proto.metrics.v1.Summary summary = 11;</code>
         */
        public Summary.Builder getSummaryBuilder() {
            return getSummaryFieldBuilder().getBuilder();
        }

        /**
         * <code>.opentelemetry.proto.metrics.v1.Summary summary = 11;</code>
         */
        @Override
        public SummaryOrBuilder getSummaryOrBuilder() {
            if ((dataCase_ == 11) && (summaryBuilder_ != null)) {
                return summaryBuilder_.getMessageOrBuilder();
            } else {
                if (dataCase_ == 11) {
                    return (Summary) data_;
                }
                return Summary.getDefaultInstance();
            }
        }

        /**
         * <code>.opentelemetry.proto.metrics.v1.Summary summary = 11;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
                Summary, Summary.Builder, SummaryOrBuilder>
        getSummaryFieldBuilder() {
            if (summaryBuilder_ == null) {
                if (!(dataCase_ == 11)) {
                    data_ = Summary.getDefaultInstance();
                }
                summaryBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                        Summary, Summary.Builder, SummaryOrBuilder>(
                        (Summary) data_,
                        getParentForChildren(),
                        isClean());
                data_ = null;
            }
            dataCase_ = 11;
            onChanged();
            ;
            return summaryBuilder_;
        }

        @Override
        public final Builder setUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
        }

        @Override
        public final Builder mergeUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:opentelemetry.proto.metrics.v1.Metric)
    }

    // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.Metric)
    private static final Metric DEFAULT_INSTANCE;

    static {
        DEFAULT_INSTANCE = new Metric();
    }

    public static Metric getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Metric>
            PARSER = new com.google.protobuf.AbstractParser<Metric>() {
        @Override
        public Metric parsePartialFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return new Metric(input, extensionRegistry);
        }
    };

    public static com.google.protobuf.Parser<Metric> parser() {
        return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<Metric> getParserForType() {
        return PARSER;
    }

    @Override
    public Metric getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
    }

}

