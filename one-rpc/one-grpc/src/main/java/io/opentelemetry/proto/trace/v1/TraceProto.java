// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/trace/v1/trace.proto

package io.opentelemetry.proto.trace.v1;

public final class TraceProto {
    private TraceProto() {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistryLite registry) {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistry registry) {
        registerAllExtensions(
                (com.google.protobuf.ExtensionRegistryLite) registry);
    }

    static final com.google.protobuf.Descriptors.Descriptor
            internal_static_opentelemetry_proto_trace_v1_ResourceSpans_descriptor;
    static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_opentelemetry_proto_trace_v1_ResourceSpans_fieldAccessorTable;
    static final com.google.protobuf.Descriptors.Descriptor
            internal_static_opentelemetry_proto_trace_v1_InstrumentationLibrarySpans_descriptor;
    static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_opentelemetry_proto_trace_v1_InstrumentationLibrarySpans_fieldAccessorTable;
    static final com.google.protobuf.Descriptors.Descriptor
            internal_static_opentelemetry_proto_trace_v1_Span_descriptor;
    static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_opentelemetry_proto_trace_v1_Span_fieldAccessorTable;
    static final com.google.protobuf.Descriptors.Descriptor
            internal_static_opentelemetry_proto_trace_v1_Span_Event_descriptor;
    static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_opentelemetry_proto_trace_v1_Span_Event_fieldAccessorTable;
    static final com.google.protobuf.Descriptors.Descriptor
            internal_static_opentelemetry_proto_trace_v1_Span_Link_descriptor;
    static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_opentelemetry_proto_trace_v1_Span_Link_fieldAccessorTable;
    static final com.google.protobuf.Descriptors.Descriptor
            internal_static_opentelemetry_proto_trace_v1_Status_descriptor;
    static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_opentelemetry_proto_trace_v1_Status_fieldAccessorTable;

    public static com.google.protobuf.Descriptors.FileDescriptor
    getDescriptor() {
        return descriptor;
    }

    private static com.google.protobuf.Descriptors.FileDescriptor
            descriptor;

    static {
        String[] descriptorData = {
                "\n(opentelemetry/proto/trace/v1/trace.pro" +
                        "to\022\034opentelemetry.proto.trace.v1\032*opente" +
                        "lemetry/proto/common/v1/common.proto\032.op" +
                        "entelemetry/proto/resource/v1/resource.p" +
                        "roto\"\302\001\n\rResourceSpans\022;\n\010resource\030\001 \001(\013" +
                        "2).opentelemetry.proto.resource.v1.Resou" +
                        "rce\022`\n\035instrumentation_library_spans\030\002 \003" +
                        "(\01329.opentelemetry.proto.trace.v1.Instru" +
                        "mentationLibrarySpans\022\022\n\nschema_url\030\003 \001(" +
                        "\t\"\274\001\n\033InstrumentationLibrarySpans\022V\n\027ins" +
                        "trumentation_library\030\001 \001(\01325.opentelemet" +
                        "ry.proto.common.v1.InstrumentationLibrar" +
                        "y\0221\n\005spans\030\002 \003(\0132\".opentelemetry.proto.t" +
                        "race.v1.Span\022\022\n\nschema_url\030\003 \001(\t\"\346\007\n\004Spa" +
                        "n\022\020\n\010trace_id\030\001 \001(\014\022\017\n\007span_id\030\002 \001(\014\022\023\n\013" +
                        "trace_state\030\003 \001(\t\022\026\n\016parent_span_id\030\004 \001(" +
                        "\014\022\014\n\004name\030\005 \001(\t\0229\n\004kind\030\006 \001(\0162+.opentele" +
                        "metry.proto.trace.v1.Span.SpanKind\022\034\n\024st" +
                        "art_time_unix_nano\030\007 \001(\006\022\032\n\022end_time_uni" +
                        "x_nano\030\010 \001(\006\022;\n\nattributes\030\t \003(\0132\'.opent" +
                        "elemetry.proto.common.v1.KeyValue\022 \n\030dro" +
                        "pped_attributes_count\030\n \001(\r\0228\n\006events\030\013 " +
                        "\003(\0132(.opentelemetry.proto.trace.v1.Span." +
                        "Event\022\034\n\024dropped_events_count\030\014 \001(\r\0226\n\005l" +
                        "inks\030\r \003(\0132\'.opentelemetry.proto.trace.v" +
                        "1.Span.Link\022\033\n\023dropped_links_count\030\016 \001(\r" +
                        "\0224\n\006status\030\017 \001(\0132$.opentelemetry.proto.t" +
                        "race.v1.Status\032\214\001\n\005Event\022\026\n\016time_unix_na" +
                        "no\030\001 \001(\006\022\014\n\004name\030\002 \001(\t\022;\n\nattributes\030\003 \003" +
                        "(\0132\'.opentelemetry.proto.common.v1.KeyVa" +
                        "lue\022 \n\030dropped_attributes_count\030\004 \001(\r\032\235\001" +
                        "\n\004Link\022\020\n\010trace_id\030\001 \001(\014\022\017\n\007span_id\030\002 \001(" +
                        "\014\022\023\n\013trace_state\030\003 \001(\t\022;\n\nattributes\030\004 \003" +
                        "(\0132\'.opentelemetry.proto.common.v1.KeyVa" +
                        "lue\022 \n\030dropped_attributes_count\030\005 \001(\r\"\231\001" +
                        "\n\010SpanKind\022\031\n\025SPAN_KIND_UNSPECIFIED\020\000\022\026\n" +
                        "\022SPAN_KIND_INTERNAL\020\001\022\024\n\020SPAN_KIND_SERVE" +
                        "R\020\002\022\024\n\020SPAN_KIND_CLIENT\020\003\022\026\n\022SPAN_KIND_P" +
                        "RODUCER\020\004\022\026\n\022SPAN_KIND_CONSUMER\020\005\"\335\007\n\006St" +
                        "atus\022V\n\017deprecated_code\030\001 \001(\01629.opentele" +
                        "metry.proto.trace.v1.Status.DeprecatedSt" +
                        "atusCodeB\002\030\001\022\017\n\007message\030\002 \001(\t\022=\n\004code\030\003 " +
                        "\001(\0162/.opentelemetry.proto.trace.v1.Statu" +
                        "s.StatusCode\"\332\005\n\024DeprecatedStatusCode\022\035\n" +
                        "\031DEPRECATED_STATUS_CODE_OK\020\000\022$\n DEPRECAT" +
                        "ED_STATUS_CODE_CANCELLED\020\001\022(\n$DEPRECATED" +
                        "_STATUS_CODE_UNKNOWN_ERROR\020\002\022+\n\'DEPRECAT" +
                        "ED_STATUS_CODE_INVALID_ARGUMENT\020\003\022,\n(DEP" +
                        "RECATED_STATUS_CODE_DEADLINE_EXCEEDED\020\004\022" +
                        "$\n DEPRECATED_STATUS_CODE_NOT_FOUND\020\005\022)\n" +
                        "%DEPRECATED_STATUS_CODE_ALREADY_EXISTS\020\006" +
                        "\022,\n(DEPRECATED_STATUS_CODE_PERMISSION_DE" +
                        "NIED\020\007\022-\n)DEPRECATED_STATUS_CODE_RESOURC" +
                        "E_EXHAUSTED\020\010\022.\n*DEPRECATED_STATUS_CODE_" +
                        "FAILED_PRECONDITION\020\t\022\"\n\036DEPRECATED_STAT" +
                        "US_CODE_ABORTED\020\n\022\'\n#DEPRECATED_STATUS_C" +
                        "ODE_OUT_OF_RANGE\020\013\022(\n$DEPRECATED_STATUS_" +
                        "CODE_UNIMPLEMENTED\020\014\022)\n%DEPRECATED_STATU" +
                        "S_CODE_INTERNAL_ERROR\020\r\022&\n\"DEPRECATED_ST" +
                        "ATUS_CODE_UNAVAILABLE\020\016\022$\n DEPRECATED_ST" +
                        "ATUS_CODE_DATA_LOSS\020\017\022*\n&DEPRECATED_STAT" +
                        "US_CODE_UNAUTHENTICATED\020\020\"N\n\nStatusCode\022" +
                        "\025\n\021STATUS_CODE_UNSET\020\000\022\022\n\016STATUS_CODE_OK" +
                        "\020\001\022\025\n\021STATUS_CODE_ERROR\020\002Bn\n\037io.opentele" +
                        "metry.proto.trace.v1B\nTraceProtoP\001Z=gith" +
                        "ub.com/open-telemetry/opentelemetry-prot" +
                        "o/gen/go/trace/v1b\006proto3"
        };
        descriptor = com.google.protobuf.Descriptors.FileDescriptor
                .internalBuildGeneratedFileFrom(descriptorData,
                        new com.google.protobuf.Descriptors.FileDescriptor[]{
                                io.opentelemetry.proto.common.v1.CommonProto.getDescriptor(),
                                io.opentelemetry.proto.resource.v1.ResourceProto.getDescriptor(),
                        });
        internal_static_opentelemetry_proto_trace_v1_ResourceSpans_descriptor =
                getDescriptor().getMessageTypes().get(0);
        internal_static_opentelemetry_proto_trace_v1_ResourceSpans_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_opentelemetry_proto_trace_v1_ResourceSpans_descriptor,
                new String[]{"Resource", "InstrumentationLibrarySpans", "SchemaUrl",});
        internal_static_opentelemetry_proto_trace_v1_InstrumentationLibrarySpans_descriptor =
                getDescriptor().getMessageTypes().get(1);
        internal_static_opentelemetry_proto_trace_v1_InstrumentationLibrarySpans_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_opentelemetry_proto_trace_v1_InstrumentationLibrarySpans_descriptor,
                new String[]{"InstrumentationLibrary", "Spans", "SchemaUrl",});
        internal_static_opentelemetry_proto_trace_v1_Span_descriptor =
                getDescriptor().getMessageTypes().get(2);
        internal_static_opentelemetry_proto_trace_v1_Span_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_opentelemetry_proto_trace_v1_Span_descriptor,
                new String[]{"TraceId", "SpanId", "TraceState", "ParentSpanId", "Name", "Kind", "StartTimeUnixNano", "EndTimeUnixNano", "Attributes", "DroppedAttributesCount", "Events", "DroppedEventsCount", "Links", "DroppedLinksCount", "Status",});
        internal_static_opentelemetry_proto_trace_v1_Span_Event_descriptor =
                internal_static_opentelemetry_proto_trace_v1_Span_descriptor.getNestedTypes().get(0);
        internal_static_opentelemetry_proto_trace_v1_Span_Event_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_opentelemetry_proto_trace_v1_Span_Event_descriptor,
                new String[]{"TimeUnixNano", "Name", "Attributes", "DroppedAttributesCount",});
        internal_static_opentelemetry_proto_trace_v1_Span_Link_descriptor =
                internal_static_opentelemetry_proto_trace_v1_Span_descriptor.getNestedTypes().get(1);
        internal_static_opentelemetry_proto_trace_v1_Span_Link_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_opentelemetry_proto_trace_v1_Span_Link_descriptor,
                new String[]{"TraceId", "SpanId", "TraceState", "Attributes", "DroppedAttributesCount",});
        internal_static_opentelemetry_proto_trace_v1_Status_descriptor =
                getDescriptor().getMessageTypes().get(3);
        internal_static_opentelemetry_proto_trace_v1_Status_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_opentelemetry_proto_trace_v1_Status_descriptor,
                new String[]{"DeprecatedCode", "Message", "Code",});
        io.opentelemetry.proto.common.v1.CommonProto.getDescriptor();
        io.opentelemetry.proto.resource.v1.ResourceProto.getDescriptor();
    }

    // @@protoc_insertion_point(outer_class_scope)
}
