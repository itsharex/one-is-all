// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/metrics/v1/metrics.proto

package io.opentelemetry.proto.metrics.v1;

public interface ExemplarOrBuilder extends
        // @@protoc_insertion_point(interface_extends:opentelemetry.proto.metrics.v1.Exemplar)
        com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The set of key/value pairs that were filtered out by the aggregator, but
     * recorded alongside the original measurement. Only key/value pairs that were
     * filtered out by the aggregator should be included
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue filtered_attributes = 7;</code>
     */
    java.util.List<io.opentelemetry.proto.common.v1.KeyValue>
    getFilteredAttributesList();

    /**
     * <pre>
     * The set of key/value pairs that were filtered out by the aggregator, but
     * recorded alongside the original measurement. Only key/value pairs that were
     * filtered out by the aggregator should be included
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue filtered_attributes = 7;</code>
     */
    io.opentelemetry.proto.common.v1.KeyValue getFilteredAttributes(int index);

    /**
     * <pre>
     * The set of key/value pairs that were filtered out by the aggregator, but
     * recorded alongside the original measurement. Only key/value pairs that were
     * filtered out by the aggregator should be included
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue filtered_attributes = 7;</code>
     */
    int getFilteredAttributesCount();

    /**
     * <pre>
     * The set of key/value pairs that were filtered out by the aggregator, but
     * recorded alongside the original measurement. Only key/value pairs that were
     * filtered out by the aggregator should be included
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue filtered_attributes = 7;</code>
     */
    java.util.List<? extends io.opentelemetry.proto.common.v1.KeyValueOrBuilder>
    getFilteredAttributesOrBuilderList();

    /**
     * <pre>
     * The set of key/value pairs that were filtered out by the aggregator, but
     * recorded alongside the original measurement. Only key/value pairs that were
     * filtered out by the aggregator should be included
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue filtered_attributes = 7;</code>
     */
    io.opentelemetry.proto.common.v1.KeyValueOrBuilder getFilteredAttributesOrBuilder(
            int index);

    /**
     * <pre>
     * Labels is deprecated and will be removed soon.
     * 1. Old senders and receivers that are not aware of this change will
     * continue using the `filtered_labels` field.
     * 2. New senders, which are aware of this change MUST send only
     * `filtered_attributes`.
     * 3. New receivers, which are aware of this change MUST convert this into
     * `filtered_labels` by simply converting all int64 values into float.
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1 [deprecated = true];</code>
     */
    @Deprecated
    java.util.List<io.opentelemetry.proto.common.v1.StringKeyValue>
    getFilteredLabelsList();

    /**
     * <pre>
     * Labels is deprecated and will be removed soon.
     * 1. Old senders and receivers that are not aware of this change will
     * continue using the `filtered_labels` field.
     * 2. New senders, which are aware of this change MUST send only
     * `filtered_attributes`.
     * 3. New receivers, which are aware of this change MUST convert this into
     * `filtered_labels` by simply converting all int64 values into float.
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1 [deprecated = true];</code>
     */
    @Deprecated
    io.opentelemetry.proto.common.v1.StringKeyValue getFilteredLabels(int index);

    /**
     * <pre>
     * Labels is deprecated and will be removed soon.
     * 1. Old senders and receivers that are not aware of this change will
     * continue using the `filtered_labels` field.
     * 2. New senders, which are aware of this change MUST send only
     * `filtered_attributes`.
     * 3. New receivers, which are aware of this change MUST convert this into
     * `filtered_labels` by simply converting all int64 values into float.
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1 [deprecated = true];</code>
     */
    @Deprecated
    int getFilteredLabelsCount();

    /**
     * <pre>
     * Labels is deprecated and will be removed soon.
     * 1. Old senders and receivers that are not aware of this change will
     * continue using the `filtered_labels` field.
     * 2. New senders, which are aware of this change MUST send only
     * `filtered_attributes`.
     * 3. New receivers, which are aware of this change MUST convert this into
     * `filtered_labels` by simply converting all int64 values into float.
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1 [deprecated = true];</code>
     */
    @Deprecated
    java.util.List<? extends io.opentelemetry.proto.common.v1.StringKeyValueOrBuilder>
    getFilteredLabelsOrBuilderList();

    /**
     * <pre>
     * Labels is deprecated and will be removed soon.
     * 1. Old senders and receivers that are not aware of this change will
     * continue using the `filtered_labels` field.
     * 2. New senders, which are aware of this change MUST send only
     * `filtered_attributes`.
     * 3. New receivers, which are aware of this change MUST convert this into
     * `filtered_labels` by simply converting all int64 values into float.
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1 [deprecated = true];</code>
     */
    @Deprecated
    io.opentelemetry.proto.common.v1.StringKeyValueOrBuilder getFilteredLabelsOrBuilder(
            int index);

    /**
     * <pre>
     * time_unix_nano is the exact time when this exemplar was recorded
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 time_unix_nano = 2;</code>
     *
     * @return The timeUnixNano.
     */
    long getTimeUnixNano();

    /**
     * <code>double as_double = 3;</code>
     *
     * @return The asDouble.
     */
    double getAsDouble();

    /**
     * <code>sfixed64 as_int = 6;</code>
     *
     * @return The asInt.
     */
    long getAsInt();

    /**
     * <pre>
     * (Optional) Span ID of the exemplar trace.
     * span_id may be missing if the measurement is not recorded inside a trace
     * or if the trace is not sampled.
     * </pre>
     *
     * <code>bytes span_id = 4;</code>
     *
     * @return The spanId.
     */
    com.google.protobuf.ByteString getSpanId();

    /**
     * <pre>
     * (Optional) Trace ID of the exemplar trace.
     * trace_id may be missing if the measurement is not recorded inside a trace
     * or if the trace is not sampled.
     * </pre>
     *
     * <code>bytes trace_id = 5;</code>
     *
     * @return The traceId.
     */
    com.google.protobuf.ByteString getTraceId();

    public Exemplar.ValueCase getValueCase();
}
