// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/metrics/v1/metrics.proto

package io.opentelemetry.proto.metrics.v1;

@Deprecated
public interface IntDataPointOrBuilder extends
        // @@protoc_insertion_point(interface_extends:opentelemetry.proto.metrics.v1.IntDataPoint)
        com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;</code>
     */
    java.util.List<io.opentelemetry.proto.common.v1.StringKeyValue>
    getLabelsList();

    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;</code>
     */
    io.opentelemetry.proto.common.v1.StringKeyValue getLabels(int index);

    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;</code>
     */
    int getLabelsCount();

    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;</code>
     */
    java.util.List<? extends io.opentelemetry.proto.common.v1.StringKeyValueOrBuilder>
    getLabelsOrBuilderList();

    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;</code>
     */
    io.opentelemetry.proto.common.v1.StringKeyValueOrBuilder getLabelsOrBuilder(
            int index);

    /**
     * <pre>
     * StartTimeUnixNano is optional but strongly encouraged, see the
     * the detiled comments above Metric.
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 start_time_unix_nano = 2;</code>
     *
     * @return The startTimeUnixNano.
     */
    long getStartTimeUnixNano();

    /**
     * <pre>
     * TimeUnixNano is required, see the detailed comments above Metric.
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 time_unix_nano = 3;</code>
     *
     * @return The timeUnixNano.
     */
    long getTimeUnixNano();

    /**
     * <pre>
     * value itself.
     * </pre>
     *
     * <code>sfixed64 value = 4;</code>
     *
     * @return The value.
     */
    long getValue();

    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.IntExemplar exemplars = 5;</code>
     */
    java.util.List<IntExemplar>
    getExemplarsList();

    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.IntExemplar exemplars = 5;</code>
     */
    IntExemplar getExemplars(int index);

    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.IntExemplar exemplars = 5;</code>
     */
    int getExemplarsCount();

    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.IntExemplar exemplars = 5;</code>
     */
    java.util.List<? extends IntExemplarOrBuilder>
    getExemplarsOrBuilderList();

    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.IntExemplar exemplars = 5;</code>
     */
    IntExemplarOrBuilder getExemplarsOrBuilder(
            int index);
}
