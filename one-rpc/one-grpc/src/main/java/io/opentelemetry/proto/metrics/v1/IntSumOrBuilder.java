// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/metrics/v1/metrics.proto

package io.opentelemetry.proto.metrics.v1;

@Deprecated
public interface IntSumOrBuilder extends
        // @@protoc_insertion_point(interface_extends:opentelemetry.proto.metrics.v1.IntSum)
        com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .opentelemetry.proto.metrics.v1.IntDataPoint data_points = 1;</code>
     */
    java.util.List<IntDataPoint>
    getDataPointsList();

    /**
     * <code>repeated .opentelemetry.proto.metrics.v1.IntDataPoint data_points = 1;</code>
     */
    IntDataPoint getDataPoints(int index);

    /**
     * <code>repeated .opentelemetry.proto.metrics.v1.IntDataPoint data_points = 1;</code>
     */
    int getDataPointsCount();

    /**
     * <code>repeated .opentelemetry.proto.metrics.v1.IntDataPoint data_points = 1;</code>
     */
    java.util.List<? extends IntDataPointOrBuilder>
    getDataPointsOrBuilderList();

    /**
     * <code>repeated .opentelemetry.proto.metrics.v1.IntDataPoint data_points = 1;</code>
     */
    IntDataPointOrBuilder getDataPointsOrBuilder(
            int index);

    /**
     * <pre>
     * aggregation_temporality describes if the aggregator reports delta changes
     * since last report time, or cumulative changes since a fixed start time.
     * </pre>
     *
     * <code>.opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;</code>
     *
     * @return The enum numeric value on the wire for aggregationTemporality.
     */
    int getAggregationTemporalityValue();

    /**
     * <pre>
     * aggregation_temporality describes if the aggregator reports delta changes
     * since last report time, or cumulative changes since a fixed start time.
     * </pre>
     *
     * <code>.opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;</code>
     *
     * @return The aggregationTemporality.
     */
    AggregationTemporality getAggregationTemporality();

    /**
     * <pre>
     * If "true" means that the sum is monotonic.
     * </pre>
     *
     * <code>bool is_monotonic = 3;</code>
     *
     * @return The isMonotonic.
     */
    boolean getIsMonotonic();
}
