// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/metrics/experimental/metrics_config_service.proto

package io.opentelemetry.proto.metrics.experimental;

/**
 * Protobuf type {@code opentelemetry.proto.metrics.experimental.MetricConfigResponse}
 */
public final class MetricConfigResponse extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:opentelemetry.proto.metrics.experimental.MetricConfigResponse)
        MetricConfigResponseOrBuilder {
    private static final long serialVersionUID = 0L;

    // Use MetricConfigResponse.newBuilder() to construct.
    private MetricConfigResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
    }

    private MetricConfigResponse() {
        fingerprint_ = com.google.protobuf.ByteString.EMPTY;
        schedules_ = java.util.Collections.emptyList();
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
            UnusedPrivateParameter unused) {
        return new MetricConfigResponse();
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
        return this.unknownFields;
    }

    private MetricConfigResponse(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
            throw new NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
            boolean done = false;
            while (!done) {
                int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    case 10: {

                        fingerprint_ = input.readBytes();
                        break;
                    }
                    case 18: {
                        if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                            schedules_ = new java.util.ArrayList<Schedule>();
                            mutable_bitField0_ |= 0x00000001;
                        }
                        schedules_.add(
                                input.readMessage(Schedule.parser(), extensionRegistry));
                        break;
                    }
                    case 24: {

                        suggestedWaitTimeSec_ = input.readInt32();
                        break;
                    }
                    default: {
                        if (!parseUnknownField(
                                input, unknownFields, extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                }
            }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                    e).setUnfinishedMessage(this);
        } finally {
            if (((mutable_bitField0_ & 0x00000001) != 0)) {
                schedules_ = java.util.Collections.unmodifiableList(schedules_);
            }
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
        }
    }

    public static final com.google.protobuf.Descriptors.Descriptor
    getDescriptor() {
        return MetricConfigServiceProto.internal_static_opentelemetry_proto_metrics_experimental_MetricConfigResponse_descriptor;
    }

    @Override
    protected FieldAccessorTable
    internalGetFieldAccessorTable() {
        return MetricConfigServiceProto.internal_static_opentelemetry_proto_metrics_experimental_MetricConfigResponse_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                        MetricConfigResponse.class, Builder.class);
    }

    public interface ScheduleOrBuilder extends
            // @@protoc_insertion_point(interface_extends:opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * Metrics with names that match a rule in the inclusion_patterns are
         * targeted by this schedule. Metrics that match the exclusion_patterns
         * are not targeted for this schedule, even if they match an inclusion
         * pattern.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
         */
        java.util.List<Schedule.Pattern>
        getExclusionPatternsList();

        /**
         * <pre>
         * Metrics with names that match a rule in the inclusion_patterns are
         * targeted by this schedule. Metrics that match the exclusion_patterns
         * are not targeted for this schedule, even if they match an inclusion
         * pattern.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
         */
        Schedule.Pattern getExclusionPatterns(int index);

        /**
         * <pre>
         * Metrics with names that match a rule in the inclusion_patterns are
         * targeted by this schedule. Metrics that match the exclusion_patterns
         * are not targeted for this schedule, even if they match an inclusion
         * pattern.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
         */
        int getExclusionPatternsCount();

        /**
         * <pre>
         * Metrics with names that match a rule in the inclusion_patterns are
         * targeted by this schedule. Metrics that match the exclusion_patterns
         * are not targeted for this schedule, even if they match an inclusion
         * pattern.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
         */
        java.util.List<? extends Schedule.PatternOrBuilder>
        getExclusionPatternsOrBuilderList();

        /**
         * <pre>
         * Metrics with names that match a rule in the inclusion_patterns are
         * targeted by this schedule. Metrics that match the exclusion_patterns
         * are not targeted for this schedule, even if they match an inclusion
         * pattern.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
         */
        Schedule.PatternOrBuilder getExclusionPatternsOrBuilder(
                int index);

        /**
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
         */
        java.util.List<Schedule.Pattern>
        getInclusionPatternsList();

        /**
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
         */
        Schedule.Pattern getInclusionPatterns(int index);

        /**
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
         */
        int getInclusionPatternsCount();

        /**
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
         */
        java.util.List<? extends Schedule.PatternOrBuilder>
        getInclusionPatternsOrBuilderList();

        /**
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
         */
        Schedule.PatternOrBuilder getInclusionPatternsOrBuilder(
                int index);

        /**
         * <pre>
         * Describes the collection period for each metric in seconds.
         * A period of 0 means to not export.
         * </pre>
         *
         * <code>int32 period_sec = 3;</code>
         *
         * @return The periodSec.
         */
        int getPeriodSec();
    }

    /**
     * <pre>
     * A Schedule is used to apply a particular scheduling configuration to
     * a metric. If a metric name matches a schedule's patterns, then the metric
     * adopts the configuration specified by the schedule.
     * </pre>
     * <p>
     * Protobuf type {@code opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule}
     */
    public static final class Schedule extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule)
            ScheduleOrBuilder {
        private static final long serialVersionUID = 0L;

        // Use Schedule.newBuilder() to construct.
        private Schedule(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private Schedule() {
            exclusionPatterns_ = java.util.Collections.emptyList();
            inclusionPatterns_ = java.util.Collections.emptyList();
        }

        @Override
        @SuppressWarnings({"unused"})
        protected Object newInstance(
                UnusedPrivateParameter unused) {
            return new Schedule();
        }

        @Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private Schedule(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            if (extensionRegistry == null) {
                throw new NullPointerException();
            }
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10: {
                            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                                exclusionPatterns_ = new java.util.ArrayList<Pattern>();
                                mutable_bitField0_ |= 0x00000001;
                            }
                            exclusionPatterns_.add(
                                    input.readMessage(Pattern.parser(), extensionRegistry));
                            break;
                        }
                        case 18: {
                            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                                inclusionPatterns_ = new java.util.ArrayList<Pattern>();
                                mutable_bitField0_ |= 0x00000002;
                            }
                            inclusionPatterns_.add(
                                    input.readMessage(Pattern.parser(), extensionRegistry));
                            break;
                        }
                        case 24: {

                            periodSec_ = input.readInt32();
                            break;
                        }
                        default: {
                            if (!parseUnknownField(
                                    input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000001) != 0)) {
                    exclusionPatterns_ = java.util.Collections.unmodifiableList(exclusionPatterns_);
                }
                if (((mutable_bitField0_ & 0x00000002) != 0)) {
                    inclusionPatterns_ = java.util.Collections.unmodifiableList(inclusionPatterns_);
                }
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return MetricConfigServiceProto.internal_static_opentelemetry_proto_metrics_experimental_MetricConfigResponse_Schedule_descriptor;
        }

        @Override
        protected FieldAccessorTable
        internalGetFieldAccessorTable() {
            return MetricConfigServiceProto.internal_static_opentelemetry_proto_metrics_experimental_MetricConfigResponse_Schedule_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            Schedule.class, Builder.class);
        }

        public interface PatternOrBuilder extends
                // @@protoc_insertion_point(interface_extends:opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern)
                com.google.protobuf.MessageOrBuilder {

            /**
             * <pre>
             * matches the metric name exactly
             * </pre>
             *
             * <code>string equals = 1;</code>
             *
             * @return The equals.
             */
            String getEquals();

            /**
             * <pre>
             * matches the metric name exactly
             * </pre>
             *
             * <code>string equals = 1;</code>
             *
             * @return The bytes for equals.
             */
            com.google.protobuf.ByteString
            getEqualsBytes();

            /**
             * <pre>
             * prefix-matches the metric name
             * </pre>
             *
             * <code>string starts_with = 2;</code>
             *
             * @return The startsWith.
             */
            String getStartsWith();

            /**
             * <pre>
             * prefix-matches the metric name
             * </pre>
             *
             * <code>string starts_with = 2;</code>
             *
             * @return The bytes for startsWith.
             */
            com.google.protobuf.ByteString
            getStartsWithBytes();

            public Pattern.MatchCase getMatchCase();
        }

        /**
         * <pre>
         * A light-weight pattern that can match 1 or more
         * metrics, for which this schedule will apply. The string is used to
         * match against metric names. It should not exceed 100k characters.
         * </pre>
         * <p>
         * Protobuf type {@code opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern}
         */
        public static final class Pattern extends
                com.google.protobuf.GeneratedMessageV3 implements
                // @@protoc_insertion_point(message_implements:opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern)
                PatternOrBuilder {
            private static final long serialVersionUID = 0L;

            // Use Pattern.newBuilder() to construct.
            private Pattern(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
                super(builder);
            }

            private Pattern() {
            }

            @Override
            @SuppressWarnings({"unused"})
            protected Object newInstance(
                    UnusedPrivateParameter unused) {
                return new Pattern();
            }

            @Override
            public final com.google.protobuf.UnknownFieldSet
            getUnknownFields() {
                return this.unknownFields;
            }

            private Pattern(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                this();
                if (extensionRegistry == null) {
                    throw new NullPointerException();
                }
                com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                        com.google.protobuf.UnknownFieldSet.newBuilder();
                try {
                    boolean done = false;
                    while (!done) {
                        int tag = input.readTag();
                        switch (tag) {
                            case 0:
                                done = true;
                                break;
                            case 10: {
                                String s = input.readStringRequireUtf8();
                                matchCase_ = 1;
                                match_ = s;
                                break;
                            }
                            case 18: {
                                String s = input.readStringRequireUtf8();
                                matchCase_ = 2;
                                match_ = s;
                                break;
                            }
                            default: {
                                if (!parseUnknownField(
                                        input, unknownFields, extensionRegistry, tag)) {
                                    done = true;
                                }
                                break;
                            }
                        }
                    }
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (java.io.IOException e) {
                    throw new com.google.protobuf.InvalidProtocolBufferException(
                            e).setUnfinishedMessage(this);
                } finally {
                    this.unknownFields = unknownFields.build();
                    makeExtensionsImmutable();
                }
            }

            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return MetricConfigServiceProto.internal_static_opentelemetry_proto_metrics_experimental_MetricConfigResponse_Schedule_Pattern_descriptor;
            }

            @Override
            protected FieldAccessorTable
            internalGetFieldAccessorTable() {
                return MetricConfigServiceProto.internal_static_opentelemetry_proto_metrics_experimental_MetricConfigResponse_Schedule_Pattern_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                Pattern.class, Builder.class);
            }

            private int matchCase_ = 0;
            private Object match_;

            public enum MatchCase
                    implements com.google.protobuf.Internal.EnumLite,
                    InternalOneOfEnum {
                EQUALS(1),
                STARTS_WITH(2),
                MATCH_NOT_SET(0);
                private final int value;

                private MatchCase(int value) {
                    this.value = value;
                }

                /**
                 * @param value The number of the enum to look for.
                 * @return The enum associated with the given number.
                 * @deprecated Use {@link #forNumber(int)} instead.
                 */
                @Deprecated
                public static MatchCase valueOf(int value) {
                    return forNumber(value);
                }

                public static MatchCase forNumber(int value) {
                    switch (value) {
                        case 1:
                            return EQUALS;
                        case 2:
                            return STARTS_WITH;
                        case 0:
                            return MATCH_NOT_SET;
                        default:
                            return null;
                    }
                }

                public int getNumber() {
                    return this.value;
                }
            }

            ;

            public MatchCase
            getMatchCase() {
                return MatchCase.forNumber(
                        matchCase_);
            }

            public static final int EQUALS_FIELD_NUMBER = 1;

            /**
             * <pre>
             * matches the metric name exactly
             * </pre>
             *
             * <code>string equals = 1;</code>
             *
             * @return The equals.
             */
            public String getEquals() {
                Object ref = "";
                if (matchCase_ == 1) {
                    ref = match_;
                }
                if (ref instanceof String) {
                    return (String) ref;
                } else {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (matchCase_ == 1) {
                        match_ = s;
                    }
                    return s;
                }
            }

            /**
             * <pre>
             * matches the metric name exactly
             * </pre>
             *
             * <code>string equals = 1;</code>
             *
             * @return The bytes for equals.
             */
            public com.google.protobuf.ByteString
            getEqualsBytes() {
                Object ref = "";
                if (matchCase_ == 1) {
                    ref = match_;
                }
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    if (matchCase_ == 1) {
                        match_ = b;
                    }
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            public static final int STARTS_WITH_FIELD_NUMBER = 2;

            /**
             * <pre>
             * prefix-matches the metric name
             * </pre>
             *
             * <code>string starts_with = 2;</code>
             *
             * @return The startsWith.
             */
            public String getStartsWith() {
                Object ref = "";
                if (matchCase_ == 2) {
                    ref = match_;
                }
                if (ref instanceof String) {
                    return (String) ref;
                } else {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (matchCase_ == 2) {
                        match_ = s;
                    }
                    return s;
                }
            }

            /**
             * <pre>
             * prefix-matches the metric name
             * </pre>
             *
             * <code>string starts_with = 2;</code>
             *
             * @return The bytes for startsWith.
             */
            public com.google.protobuf.ByteString
            getStartsWithBytes() {
                Object ref = "";
                if (matchCase_ == 2) {
                    ref = match_;
                }
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    if (matchCase_ == 2) {
                        match_ = b;
                    }
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            private byte memoizedIsInitialized = -1;

            @Override
            public final boolean isInitialized() {
                byte isInitialized = memoizedIsInitialized;
                if (isInitialized == 1) return true;
                if (isInitialized == 0) return false;

                memoizedIsInitialized = 1;
                return true;
            }

            @Override
            public void writeTo(com.google.protobuf.CodedOutputStream output)
                    throws java.io.IOException {
                if (matchCase_ == 1) {
                    com.google.protobuf.GeneratedMessageV3.writeString(output, 1, match_);
                }
                if (matchCase_ == 2) {
                    com.google.protobuf.GeneratedMessageV3.writeString(output, 2, match_);
                }
                unknownFields.writeTo(output);
            }

            @Override
            public int getSerializedSize() {
                int size = memoizedSize;
                if (size != -1) return size;

                size = 0;
                if (matchCase_ == 1) {
                    size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, match_);
                }
                if (matchCase_ == 2) {
                    size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, match_);
                }
                size += unknownFields.getSerializedSize();
                memoizedSize = size;
                return size;
            }

            @Override
            public boolean equals(final Object obj) {
                if (obj == this) {
                    return true;
                }
                if (!(obj instanceof Pattern)) {
                    return super.equals(obj);
                }
                Pattern other = (Pattern) obj;

                if (!getMatchCase().equals(other.getMatchCase())) return false;
                switch (matchCase_) {
                    case 1:
                        if (!getEquals()
                                .equals(other.getEquals())) return false;
                        break;
                    case 2:
                        if (!getStartsWith()
                                .equals(other.getStartsWith())) return false;
                        break;
                    case 0:
                    default:
                }
                if (!unknownFields.equals(other.unknownFields)) return false;
                return true;
            }

            @Override
            public int hashCode() {
                if (memoizedHashCode != 0) {
                    return memoizedHashCode;
                }
                int hash = 41;
                hash = (19 * hash) + getDescriptor().hashCode();
                switch (matchCase_) {
                    case 1:
                        hash = (37 * hash) + EQUALS_FIELD_NUMBER;
                        hash = (53 * hash) + getEquals().hashCode();
                        break;
                    case 2:
                        hash = (37 * hash) + STARTS_WITH_FIELD_NUMBER;
                        hash = (53 * hash) + getStartsWith().hashCode();
                        break;
                    case 0:
                    default:
                }
                hash = (29 * hash) + unknownFields.hashCode();
                memoizedHashCode = hash;
                return hash;
            }

            public static Pattern parseFrom(
                    java.nio.ByteBuffer data)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return PARSER.parseFrom(data);
            }

            public static Pattern parseFrom(
                    java.nio.ByteBuffer data,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return PARSER.parseFrom(data, extensionRegistry);
            }

            public static Pattern parseFrom(
                    com.google.protobuf.ByteString data)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return PARSER.parseFrom(data);
            }

            public static Pattern parseFrom(
                    com.google.protobuf.ByteString data,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return PARSER.parseFrom(data, extensionRegistry);
            }

            public static Pattern parseFrom(byte[] data)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return PARSER.parseFrom(data);
            }

            public static Pattern parseFrom(
                    byte[] data,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return PARSER.parseFrom(data, extensionRegistry);
            }

            public static Pattern parseFrom(java.io.InputStream input)
                    throws java.io.IOException {
                return com.google.protobuf.GeneratedMessageV3
                        .parseWithIOException(PARSER, input);
            }

            public static Pattern parseFrom(
                    java.io.InputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return com.google.protobuf.GeneratedMessageV3
                        .parseWithIOException(PARSER, input, extensionRegistry);
            }

            public static Pattern parseDelimitedFrom(java.io.InputStream input)
                    throws java.io.IOException {
                return com.google.protobuf.GeneratedMessageV3
                        .parseDelimitedWithIOException(PARSER, input);
            }

            public static Pattern parseDelimitedFrom(
                    java.io.InputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return com.google.protobuf.GeneratedMessageV3
                        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
            }

            public static Pattern parseFrom(
                    com.google.protobuf.CodedInputStream input)
                    throws java.io.IOException {
                return com.google.protobuf.GeneratedMessageV3
                        .parseWithIOException(PARSER, input);
            }

            public static Pattern parseFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return com.google.protobuf.GeneratedMessageV3
                        .parseWithIOException(PARSER, input, extensionRegistry);
            }

            @Override
            public Builder newBuilderForType() {
                return newBuilder();
            }

            public static Builder newBuilder() {
                return DEFAULT_INSTANCE.toBuilder();
            }

            public static Builder newBuilder(Pattern prototype) {
                return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
            }

            @Override
            public Builder toBuilder() {
                return this == DEFAULT_INSTANCE
                        ? new Builder() : new Builder().mergeFrom(this);
            }

            @Override
            protected Builder newBuilderForType(
                    BuilderParent parent) {
                Builder builder = new Builder(parent);
                return builder;
            }

            /**
             * <pre>
             * A light-weight pattern that can match 1 or more
             * metrics, for which this schedule will apply. The string is used to
             * match against metric names. It should not exceed 100k characters.
             * </pre>
             * <p>
             * Protobuf type {@code opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern}
             */
            public static final class Builder extends
                    com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                    // @@protoc_insertion_point(builder_implements:opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern)
                    PatternOrBuilder {
                public static final com.google.protobuf.Descriptors.Descriptor
                getDescriptor() {
                    return MetricConfigServiceProto.internal_static_opentelemetry_proto_metrics_experimental_MetricConfigResponse_Schedule_Pattern_descriptor;
                }

                @Override
                protected FieldAccessorTable
                internalGetFieldAccessorTable() {
                    return MetricConfigServiceProto.internal_static_opentelemetry_proto_metrics_experimental_MetricConfigResponse_Schedule_Pattern_fieldAccessorTable
                            .ensureFieldAccessorsInitialized(
                                    Pattern.class, Builder.class);
                }

                // Construct using io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern.newBuilder()
                private Builder() {
                    maybeForceBuilderInitialization();
                }

                private Builder(
                        BuilderParent parent) {
                    super(parent);
                    maybeForceBuilderInitialization();
                }

                private void maybeForceBuilderInitialization() {
                    if (com.google.protobuf.GeneratedMessageV3
                            .alwaysUseFieldBuilders) {
                    }
                }

                @Override
                public Builder clear() {
                    super.clear();
                    matchCase_ = 0;
                    match_ = null;
                    return this;
                }

                @Override
                public com.google.protobuf.Descriptors.Descriptor
                getDescriptorForType() {
                    return MetricConfigServiceProto.internal_static_opentelemetry_proto_metrics_experimental_MetricConfigResponse_Schedule_Pattern_descriptor;
                }

                @Override
                public Pattern getDefaultInstanceForType() {
                    return Pattern.getDefaultInstance();
                }

                @Override
                public Pattern build() {
                    Pattern result = buildPartial();
                    if (!result.isInitialized()) {
                        throw newUninitializedMessageException(result);
                    }
                    return result;
                }

                @Override
                public Pattern buildPartial() {
                    Pattern result = new Pattern(this);
                    if (matchCase_ == 1) {
                        result.match_ = match_;
                    }
                    if (matchCase_ == 2) {
                        result.match_ = match_;
                    }
                    result.matchCase_ = matchCase_;
                    onBuilt();
                    return result;
                }

                @Override
                public Builder clone() {
                    return super.clone();
                }

                @Override
                public Builder setField(
                        com.google.protobuf.Descriptors.FieldDescriptor field,
                        Object value) {
                    return super.setField(field, value);
                }

                @Override
                public Builder clearField(
                        com.google.protobuf.Descriptors.FieldDescriptor field) {
                    return super.clearField(field);
                }

                @Override
                public Builder clearOneof(
                        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                    return super.clearOneof(oneof);
                }

                @Override
                public Builder setRepeatedField(
                        com.google.protobuf.Descriptors.FieldDescriptor field,
                        int index, Object value) {
                    return super.setRepeatedField(field, index, value);
                }

                @Override
                public Builder addRepeatedField(
                        com.google.protobuf.Descriptors.FieldDescriptor field,
                        Object value) {
                    return super.addRepeatedField(field, value);
                }

                @Override
                public Builder mergeFrom(com.google.protobuf.Message other) {
                    if (other instanceof Pattern) {
                        return mergeFrom((Pattern) other);
                    } else {
                        super.mergeFrom(other);
                        return this;
                    }
                }

                public Builder mergeFrom(Pattern other) {
                    if (other == Pattern.getDefaultInstance()) return this;
                    switch (other.getMatchCase()) {
                        case EQUALS: {
                            matchCase_ = 1;
                            match_ = other.match_;
                            onChanged();
                            break;
                        }
                        case STARTS_WITH: {
                            matchCase_ = 2;
                            match_ = other.match_;
                            onChanged();
                            break;
                        }
                        case MATCH_NOT_SET: {
                            break;
                        }
                    }
                    this.mergeUnknownFields(other.unknownFields);
                    onChanged();
                    return this;
                }

                @Override
                public final boolean isInitialized() {
                    return true;
                }

                @Override
                public Builder mergeFrom(
                        com.google.protobuf.CodedInputStream input,
                        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                        throws java.io.IOException {
                    Pattern parsedMessage = null;
                    try {
                        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                        parsedMessage = (Pattern) e.getUnfinishedMessage();
                        throw e.unwrapIOException();
                    } finally {
                        if (parsedMessage != null) {
                            mergeFrom(parsedMessage);
                        }
                    }
                    return this;
                }

                private int matchCase_ = 0;
                private Object match_;

                public MatchCase
                getMatchCase() {
                    return MatchCase.forNumber(
                            matchCase_);
                }

                public Builder clearMatch() {
                    matchCase_ = 0;
                    match_ = null;
                    onChanged();
                    return this;
                }


                /**
                 * <pre>
                 * matches the metric name exactly
                 * </pre>
                 *
                 * <code>string equals = 1;</code>
                 *
                 * @return The equals.
                 */
                @Override
                public String getEquals() {
                    Object ref = "";
                    if (matchCase_ == 1) {
                        ref = match_;
                    }
                    if (!(ref instanceof String)) {
                        com.google.protobuf.ByteString bs =
                                (com.google.protobuf.ByteString) ref;
                        String s = bs.toStringUtf8();
                        if (matchCase_ == 1) {
                            match_ = s;
                        }
                        return s;
                    } else {
                        return (String) ref;
                    }
                }

                /**
                 * <pre>
                 * matches the metric name exactly
                 * </pre>
                 *
                 * <code>string equals = 1;</code>
                 *
                 * @return The bytes for equals.
                 */
                @Override
                public com.google.protobuf.ByteString
                getEqualsBytes() {
                    Object ref = "";
                    if (matchCase_ == 1) {
                        ref = match_;
                    }
                    if (ref instanceof String) {
                        com.google.protobuf.ByteString b =
                                com.google.protobuf.ByteString.copyFromUtf8(
                                        (String) ref);
                        if (matchCase_ == 1) {
                            match_ = b;
                        }
                        return b;
                    } else {
                        return (com.google.protobuf.ByteString) ref;
                    }
                }

                /**
                 * <pre>
                 * matches the metric name exactly
                 * </pre>
                 *
                 * <code>string equals = 1;</code>
                 *
                 * @param value The equals to set.
                 * @return This builder for chaining.
                 */
                public Builder setEquals(
                        String value) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    matchCase_ = 1;
                    match_ = value;
                    onChanged();
                    return this;
                }

                /**
                 * <pre>
                 * matches the metric name exactly
                 * </pre>
                 *
                 * <code>string equals = 1;</code>
                 *
                 * @return This builder for chaining.
                 */
                public Builder clearEquals() {
                    if (matchCase_ == 1) {
                        matchCase_ = 0;
                        match_ = null;
                        onChanged();
                    }
                    return this;
                }

                /**
                 * <pre>
                 * matches the metric name exactly
                 * </pre>
                 *
                 * <code>string equals = 1;</code>
                 *
                 * @param value The bytes for equals to set.
                 * @return This builder for chaining.
                 */
                public Builder setEqualsBytes(
                        com.google.protobuf.ByteString value) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    checkByteStringIsUtf8(value);
                    matchCase_ = 1;
                    match_ = value;
                    onChanged();
                    return this;
                }

                /**
                 * <pre>
                 * prefix-matches the metric name
                 * </pre>
                 *
                 * <code>string starts_with = 2;</code>
                 *
                 * @return The startsWith.
                 */
                @Override
                public String getStartsWith() {
                    Object ref = "";
                    if (matchCase_ == 2) {
                        ref = match_;
                    }
                    if (!(ref instanceof String)) {
                        com.google.protobuf.ByteString bs =
                                (com.google.protobuf.ByteString) ref;
                        String s = bs.toStringUtf8();
                        if (matchCase_ == 2) {
                            match_ = s;
                        }
                        return s;
                    } else {
                        return (String) ref;
                    }
                }

                /**
                 * <pre>
                 * prefix-matches the metric name
                 * </pre>
                 *
                 * <code>string starts_with = 2;</code>
                 *
                 * @return The bytes for startsWith.
                 */
                @Override
                public com.google.protobuf.ByteString
                getStartsWithBytes() {
                    Object ref = "";
                    if (matchCase_ == 2) {
                        ref = match_;
                    }
                    if (ref instanceof String) {
                        com.google.protobuf.ByteString b =
                                com.google.protobuf.ByteString.copyFromUtf8(
                                        (String) ref);
                        if (matchCase_ == 2) {
                            match_ = b;
                        }
                        return b;
                    } else {
                        return (com.google.protobuf.ByteString) ref;
                    }
                }

                /**
                 * <pre>
                 * prefix-matches the metric name
                 * </pre>
                 *
                 * <code>string starts_with = 2;</code>
                 *
                 * @param value The startsWith to set.
                 * @return This builder for chaining.
                 */
                public Builder setStartsWith(
                        String value) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    matchCase_ = 2;
                    match_ = value;
                    onChanged();
                    return this;
                }

                /**
                 * <pre>
                 * prefix-matches the metric name
                 * </pre>
                 *
                 * <code>string starts_with = 2;</code>
                 *
                 * @return This builder for chaining.
                 */
                public Builder clearStartsWith() {
                    if (matchCase_ == 2) {
                        matchCase_ = 0;
                        match_ = null;
                        onChanged();
                    }
                    return this;
                }

                /**
                 * <pre>
                 * prefix-matches the metric name
                 * </pre>
                 *
                 * <code>string starts_with = 2;</code>
                 *
                 * @param value The bytes for startsWith to set.
                 * @return This builder for chaining.
                 */
                public Builder setStartsWithBytes(
                        com.google.protobuf.ByteString value) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    checkByteStringIsUtf8(value);
                    matchCase_ = 2;
                    match_ = value;
                    onChanged();
                    return this;
                }

                @Override
                public final Builder setUnknownFields(
                        final com.google.protobuf.UnknownFieldSet unknownFields) {
                    return super.setUnknownFields(unknownFields);
                }

                @Override
                public final Builder mergeUnknownFields(
                        final com.google.protobuf.UnknownFieldSet unknownFields) {
                    return super.mergeUnknownFields(unknownFields);
                }


                // @@protoc_insertion_point(builder_scope:opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern)
            }

            // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern)
            private static final Pattern DEFAULT_INSTANCE;

            static {
                DEFAULT_INSTANCE = new Pattern();
            }

            public static Pattern getDefaultInstance() {
                return DEFAULT_INSTANCE;
            }

            private static final com.google.protobuf.Parser<Pattern>
                    PARSER = new com.google.protobuf.AbstractParser<Pattern>() {
                @Override
                public Pattern parsePartialFrom(
                        com.google.protobuf.CodedInputStream input,
                        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                        throws com.google.protobuf.InvalidProtocolBufferException {
                    return new Pattern(input, extensionRegistry);
                }
            };

            public static com.google.protobuf.Parser<Pattern> parser() {
                return PARSER;
            }

            @Override
            public com.google.protobuf.Parser<Pattern> getParserForType() {
                return PARSER;
            }

            @Override
            public Pattern getDefaultInstanceForType() {
                return DEFAULT_INSTANCE;
            }

        }

        public static final int EXCLUSION_PATTERNS_FIELD_NUMBER = 1;
        private java.util.List<Pattern> exclusionPatterns_;

        /**
         * <pre>
         * Metrics with names that match a rule in the inclusion_patterns are
         * targeted by this schedule. Metrics that match the exclusion_patterns
         * are not targeted for this schedule, even if they match an inclusion
         * pattern.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
         */
        @Override
        public java.util.List<Pattern> getExclusionPatternsList() {
            return exclusionPatterns_;
        }

        /**
         * <pre>
         * Metrics with names that match a rule in the inclusion_patterns are
         * targeted by this schedule. Metrics that match the exclusion_patterns
         * are not targeted for this schedule, even if they match an inclusion
         * pattern.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
         */
        @Override
        public java.util.List<? extends PatternOrBuilder>
        getExclusionPatternsOrBuilderList() {
            return exclusionPatterns_;
        }

        /**
         * <pre>
         * Metrics with names that match a rule in the inclusion_patterns are
         * targeted by this schedule. Metrics that match the exclusion_patterns
         * are not targeted for this schedule, even if they match an inclusion
         * pattern.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
         */
        @Override
        public int getExclusionPatternsCount() {
            return exclusionPatterns_.size();
        }

        /**
         * <pre>
         * Metrics with names that match a rule in the inclusion_patterns are
         * targeted by this schedule. Metrics that match the exclusion_patterns
         * are not targeted for this schedule, even if they match an inclusion
         * pattern.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
         */
        @Override
        public Pattern getExclusionPatterns(int index) {
            return exclusionPatterns_.get(index);
        }

        /**
         * <pre>
         * Metrics with names that match a rule in the inclusion_patterns are
         * targeted by this schedule. Metrics that match the exclusion_patterns
         * are not targeted for this schedule, even if they match an inclusion
         * pattern.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
         */
        @Override
        public PatternOrBuilder getExclusionPatternsOrBuilder(
                int index) {
            return exclusionPatterns_.get(index);
        }

        public static final int INCLUSION_PATTERNS_FIELD_NUMBER = 2;
        private java.util.List<Pattern> inclusionPatterns_;

        /**
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
         */
        @Override
        public java.util.List<Pattern> getInclusionPatternsList() {
            return inclusionPatterns_;
        }

        /**
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
         */
        @Override
        public java.util.List<? extends PatternOrBuilder>
        getInclusionPatternsOrBuilderList() {
            return inclusionPatterns_;
        }

        /**
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
         */
        @Override
        public int getInclusionPatternsCount() {
            return inclusionPatterns_.size();
        }

        /**
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
         */
        @Override
        public Pattern getInclusionPatterns(int index) {
            return inclusionPatterns_.get(index);
        }

        /**
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
         */
        @Override
        public PatternOrBuilder getInclusionPatternsOrBuilder(
                int index) {
            return inclusionPatterns_.get(index);
        }

        public static final int PERIOD_SEC_FIELD_NUMBER = 3;
        private int periodSec_;

        /**
         * <pre>
         * Describes the collection period for each metric in seconds.
         * A period of 0 means to not export.
         * </pre>
         *
         * <code>int32 period_sec = 3;</code>
         *
         * @return The periodSec.
         */
        @Override
        public int getPeriodSec() {
            return periodSec_;
        }

        private byte memoizedIsInitialized = -1;

        @Override
        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        @Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            for (int i = 0; i < exclusionPatterns_.size(); i++) {
                output.writeMessage(1, exclusionPatterns_.get(i));
            }
            for (int i = 0; i < inclusionPatterns_.size(); i++) {
                output.writeMessage(2, inclusionPatterns_.get(i));
            }
            if (periodSec_ != 0) {
                output.writeInt32(3, periodSec_);
            }
            unknownFields.writeTo(output);
        }

        @Override
        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            for (int i = 0; i < exclusionPatterns_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, exclusionPatterns_.get(i));
            }
            for (int i = 0; i < inclusionPatterns_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(2, inclusionPatterns_.get(i));
            }
            if (periodSec_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(3, periodSec_);
            }
            size += unknownFields.getSerializedSize();
            memoizedSize = size;
            return size;
        }

        @Override
        public boolean equals(final Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof Schedule)) {
                return super.equals(obj);
            }
            Schedule other = (Schedule) obj;

            if (!getExclusionPatternsList()
                    .equals(other.getExclusionPatternsList())) return false;
            if (!getInclusionPatternsList()
                    .equals(other.getInclusionPatternsList())) return false;
            if (getPeriodSec()
                    != other.getPeriodSec()) return false;
            if (!unknownFields.equals(other.unknownFields)) return false;
            return true;
        }

        @Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            if (getExclusionPatternsCount() > 0) {
                hash = (37 * hash) + EXCLUSION_PATTERNS_FIELD_NUMBER;
                hash = (53 * hash) + getExclusionPatternsList().hashCode();
            }
            if (getInclusionPatternsCount() > 0) {
                hash = (37 * hash) + INCLUSION_PATTERNS_FIELD_NUMBER;
                hash = (53 * hash) + getInclusionPatternsList().hashCode();
            }
            hash = (37 * hash) + PERIOD_SEC_FIELD_NUMBER;
            hash = (53 * hash) + getPeriodSec();
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static Schedule parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static Schedule parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static Schedule parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static Schedule parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static Schedule parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static Schedule parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static Schedule parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static Schedule parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static Schedule parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static Schedule parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static Schedule parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static Schedule parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(Schedule prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        protected Builder newBuilderForType(
                BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * A Schedule is used to apply a particular scheduling configuration to
         * a metric. If a metric name matches a schedule's patterns, then the metric
         * adopts the configuration specified by the schedule.
         * </pre>
         * <p>
         * Protobuf type {@code opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule)
                ScheduleOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return MetricConfigServiceProto.internal_static_opentelemetry_proto_metrics_experimental_MetricConfigResponse_Schedule_descriptor;
            }

            @Override
            protected FieldAccessorTable
            internalGetFieldAccessorTable() {
                return MetricConfigServiceProto.internal_static_opentelemetry_proto_metrics_experimental_MetricConfigResponse_Schedule_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                Schedule.class, Builder.class);
            }

            // Construct using io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                    getExclusionPatternsFieldBuilder();
                    getInclusionPatternsFieldBuilder();
                }
            }

            @Override
            public Builder clear() {
                super.clear();
                if (exclusionPatternsBuilder_ == null) {
                    exclusionPatterns_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                } else {
                    exclusionPatternsBuilder_.clear();
                }
                if (inclusionPatternsBuilder_ == null) {
                    inclusionPatterns_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000002);
                } else {
                    inclusionPatternsBuilder_.clear();
                }
                periodSec_ = 0;

                return this;
            }

            @Override
            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return MetricConfigServiceProto.internal_static_opentelemetry_proto_metrics_experimental_MetricConfigResponse_Schedule_descriptor;
            }

            @Override
            public Schedule getDefaultInstanceForType() {
                return Schedule.getDefaultInstance();
            }

            @Override
            public Schedule build() {
                Schedule result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            @Override
            public Schedule buildPartial() {
                Schedule result = new Schedule(this);
                int from_bitField0_ = bitField0_;
                if (exclusionPatternsBuilder_ == null) {
                    if (((bitField0_ & 0x00000001) != 0)) {
                        exclusionPatterns_ = java.util.Collections.unmodifiableList(exclusionPatterns_);
                        bitField0_ = (bitField0_ & ~0x00000001);
                    }
                    result.exclusionPatterns_ = exclusionPatterns_;
                } else {
                    result.exclusionPatterns_ = exclusionPatternsBuilder_.build();
                }
                if (inclusionPatternsBuilder_ == null) {
                    if (((bitField0_ & 0x00000002) != 0)) {
                        inclusionPatterns_ = java.util.Collections.unmodifiableList(inclusionPatterns_);
                        bitField0_ = (bitField0_ & ~0x00000002);
                    }
                    result.inclusionPatterns_ = inclusionPatterns_;
                } else {
                    result.inclusionPatterns_ = inclusionPatternsBuilder_.build();
                }
                result.periodSec_ = periodSec_;
                onBuilt();
                return result;
            }

            @Override
            public Builder clone() {
                return super.clone();
            }

            @Override
            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return super.setField(field, value);
            }

            @Override
            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return super.clearField(field);
            }

            @Override
            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return super.clearOneof(oneof);
            }

            @Override
            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return super.setRepeatedField(field, index, value);
            }

            @Override
            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return super.addRepeatedField(field, value);
            }

            @Override
            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof Schedule) {
                    return mergeFrom((Schedule) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(Schedule other) {
                if (other == Schedule.getDefaultInstance()) return this;
                if (exclusionPatternsBuilder_ == null) {
                    if (!other.exclusionPatterns_.isEmpty()) {
                        if (exclusionPatterns_.isEmpty()) {
                            exclusionPatterns_ = other.exclusionPatterns_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                        } else {
                            ensureExclusionPatternsIsMutable();
                            exclusionPatterns_.addAll(other.exclusionPatterns_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.exclusionPatterns_.isEmpty()) {
                        if (exclusionPatternsBuilder_.isEmpty()) {
                            exclusionPatternsBuilder_.dispose();
                            exclusionPatternsBuilder_ = null;
                            exclusionPatterns_ = other.exclusionPatterns_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                            exclusionPatternsBuilder_ =
                                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                            getExclusionPatternsFieldBuilder() : null;
                        } else {
                            exclusionPatternsBuilder_.addAllMessages(other.exclusionPatterns_);
                        }
                    }
                }
                if (inclusionPatternsBuilder_ == null) {
                    if (!other.inclusionPatterns_.isEmpty()) {
                        if (inclusionPatterns_.isEmpty()) {
                            inclusionPatterns_ = other.inclusionPatterns_;
                            bitField0_ = (bitField0_ & ~0x00000002);
                        } else {
                            ensureInclusionPatternsIsMutable();
                            inclusionPatterns_.addAll(other.inclusionPatterns_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.inclusionPatterns_.isEmpty()) {
                        if (inclusionPatternsBuilder_.isEmpty()) {
                            inclusionPatternsBuilder_.dispose();
                            inclusionPatternsBuilder_ = null;
                            inclusionPatterns_ = other.inclusionPatterns_;
                            bitField0_ = (bitField0_ & ~0x00000002);
                            inclusionPatternsBuilder_ =
                                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                            getInclusionPatternsFieldBuilder() : null;
                        } else {
                            inclusionPatternsBuilder_.addAllMessages(other.inclusionPatterns_);
                        }
                    }
                }
                if (other.getPeriodSec() != 0) {
                    setPeriodSec(other.getPeriodSec());
                }
                this.mergeUnknownFields(other.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            @Override
            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                Schedule parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (Schedule) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private java.util.List<Pattern> exclusionPatterns_ =
                    java.util.Collections.emptyList();

            private void ensureExclusionPatternsIsMutable() {
                if (!((bitField0_ & 0x00000001) != 0)) {
                    exclusionPatterns_ = new java.util.ArrayList<Pattern>(exclusionPatterns_);
                    bitField0_ |= 0x00000001;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    Pattern, Pattern.Builder, PatternOrBuilder> exclusionPatternsBuilder_;

            /**
             * <pre>
             * Metrics with names that match a rule in the inclusion_patterns are
             * targeted by this schedule. Metrics that match the exclusion_patterns
             * are not targeted for this schedule, even if they match an inclusion
             * pattern.
             * </pre>
             *
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
             */
            public java.util.List<Pattern> getExclusionPatternsList() {
                if (exclusionPatternsBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(exclusionPatterns_);
                } else {
                    return exclusionPatternsBuilder_.getMessageList();
                }
            }

            /**
             * <pre>
             * Metrics with names that match a rule in the inclusion_patterns are
             * targeted by this schedule. Metrics that match the exclusion_patterns
             * are not targeted for this schedule, even if they match an inclusion
             * pattern.
             * </pre>
             *
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
             */
            public int getExclusionPatternsCount() {
                if (exclusionPatternsBuilder_ == null) {
                    return exclusionPatterns_.size();
                } else {
                    return exclusionPatternsBuilder_.getCount();
                }
            }

            /**
             * <pre>
             * Metrics with names that match a rule in the inclusion_patterns are
             * targeted by this schedule. Metrics that match the exclusion_patterns
             * are not targeted for this schedule, even if they match an inclusion
             * pattern.
             * </pre>
             *
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
             */
            public Pattern getExclusionPatterns(int index) {
                if (exclusionPatternsBuilder_ == null) {
                    return exclusionPatterns_.get(index);
                } else {
                    return exclusionPatternsBuilder_.getMessage(index);
                }
            }

            /**
             * <pre>
             * Metrics with names that match a rule in the inclusion_patterns are
             * targeted by this schedule. Metrics that match the exclusion_patterns
             * are not targeted for this schedule, even if they match an inclusion
             * pattern.
             * </pre>
             *
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
             */
            public Builder setExclusionPatterns(
                    int index, Pattern value) {
                if (exclusionPatternsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureExclusionPatternsIsMutable();
                    exclusionPatterns_.set(index, value);
                    onChanged();
                } else {
                    exclusionPatternsBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <pre>
             * Metrics with names that match a rule in the inclusion_patterns are
             * targeted by this schedule. Metrics that match the exclusion_patterns
             * are not targeted for this schedule, even if they match an inclusion
             * pattern.
             * </pre>
             *
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
             */
            public Builder setExclusionPatterns(
                    int index, Pattern.Builder builderForValue) {
                if (exclusionPatternsBuilder_ == null) {
                    ensureExclusionPatternsIsMutable();
                    exclusionPatterns_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    exclusionPatternsBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * Metrics with names that match a rule in the inclusion_patterns are
             * targeted by this schedule. Metrics that match the exclusion_patterns
             * are not targeted for this schedule, even if they match an inclusion
             * pattern.
             * </pre>
             *
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
             */
            public Builder addExclusionPatterns(Pattern value) {
                if (exclusionPatternsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureExclusionPatternsIsMutable();
                    exclusionPatterns_.add(value);
                    onChanged();
                } else {
                    exclusionPatternsBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <pre>
             * Metrics with names that match a rule in the inclusion_patterns are
             * targeted by this schedule. Metrics that match the exclusion_patterns
             * are not targeted for this schedule, even if they match an inclusion
             * pattern.
             * </pre>
             *
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
             */
            public Builder addExclusionPatterns(
                    int index, Pattern value) {
                if (exclusionPatternsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureExclusionPatternsIsMutable();
                    exclusionPatterns_.add(index, value);
                    onChanged();
                } else {
                    exclusionPatternsBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <pre>
             * Metrics with names that match a rule in the inclusion_patterns are
             * targeted by this schedule. Metrics that match the exclusion_patterns
             * are not targeted for this schedule, even if they match an inclusion
             * pattern.
             * </pre>
             *
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
             */
            public Builder addExclusionPatterns(
                    Pattern.Builder builderForValue) {
                if (exclusionPatternsBuilder_ == null) {
                    ensureExclusionPatternsIsMutable();
                    exclusionPatterns_.add(builderForValue.build());
                    onChanged();
                } else {
                    exclusionPatternsBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * Metrics with names that match a rule in the inclusion_patterns are
             * targeted by this schedule. Metrics that match the exclusion_patterns
             * are not targeted for this schedule, even if they match an inclusion
             * pattern.
             * </pre>
             *
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
             */
            public Builder addExclusionPatterns(
                    int index, Pattern.Builder builderForValue) {
                if (exclusionPatternsBuilder_ == null) {
                    ensureExclusionPatternsIsMutable();
                    exclusionPatterns_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    exclusionPatternsBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * Metrics with names that match a rule in the inclusion_patterns are
             * targeted by this schedule. Metrics that match the exclusion_patterns
             * are not targeted for this schedule, even if they match an inclusion
             * pattern.
             * </pre>
             *
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
             */
            public Builder addAllExclusionPatterns(
                    Iterable<? extends Pattern> values) {
                if (exclusionPatternsBuilder_ == null) {
                    ensureExclusionPatternsIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(
                            values, exclusionPatterns_);
                    onChanged();
                } else {
                    exclusionPatternsBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <pre>
             * Metrics with names that match a rule in the inclusion_patterns are
             * targeted by this schedule. Metrics that match the exclusion_patterns
             * are not targeted for this schedule, even if they match an inclusion
             * pattern.
             * </pre>
             *
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
             */
            public Builder clearExclusionPatterns() {
                if (exclusionPatternsBuilder_ == null) {
                    exclusionPatterns_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                    onChanged();
                } else {
                    exclusionPatternsBuilder_.clear();
                }
                return this;
            }

            /**
             * <pre>
             * Metrics with names that match a rule in the inclusion_patterns are
             * targeted by this schedule. Metrics that match the exclusion_patterns
             * are not targeted for this schedule, even if they match an inclusion
             * pattern.
             * </pre>
             *
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
             */
            public Builder removeExclusionPatterns(int index) {
                if (exclusionPatternsBuilder_ == null) {
                    ensureExclusionPatternsIsMutable();
                    exclusionPatterns_.remove(index);
                    onChanged();
                } else {
                    exclusionPatternsBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <pre>
             * Metrics with names that match a rule in the inclusion_patterns are
             * targeted by this schedule. Metrics that match the exclusion_patterns
             * are not targeted for this schedule, even if they match an inclusion
             * pattern.
             * </pre>
             *
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
             */
            public Pattern.Builder getExclusionPatternsBuilder(
                    int index) {
                return getExclusionPatternsFieldBuilder().getBuilder(index);
            }

            /**
             * <pre>
             * Metrics with names that match a rule in the inclusion_patterns are
             * targeted by this schedule. Metrics that match the exclusion_patterns
             * are not targeted for this schedule, even if they match an inclusion
             * pattern.
             * </pre>
             *
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
             */
            public PatternOrBuilder getExclusionPatternsOrBuilder(
                    int index) {
                if (exclusionPatternsBuilder_ == null) {
                    return exclusionPatterns_.get(index);
                } else {
                    return exclusionPatternsBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <pre>
             * Metrics with names that match a rule in the inclusion_patterns are
             * targeted by this schedule. Metrics that match the exclusion_patterns
             * are not targeted for this schedule, even if they match an inclusion
             * pattern.
             * </pre>
             *
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
             */
            public java.util.List<? extends PatternOrBuilder>
            getExclusionPatternsOrBuilderList() {
                if (exclusionPatternsBuilder_ != null) {
                    return exclusionPatternsBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(exclusionPatterns_);
                }
            }

            /**
             * <pre>
             * Metrics with names that match a rule in the inclusion_patterns are
             * targeted by this schedule. Metrics that match the exclusion_patterns
             * are not targeted for this schedule, even if they match an inclusion
             * pattern.
             * </pre>
             *
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
             */
            public Pattern.Builder addExclusionPatternsBuilder() {
                return getExclusionPatternsFieldBuilder().addBuilder(
                        Pattern.getDefaultInstance());
            }

            /**
             * <pre>
             * Metrics with names that match a rule in the inclusion_patterns are
             * targeted by this schedule. Metrics that match the exclusion_patterns
             * are not targeted for this schedule, even if they match an inclusion
             * pattern.
             * </pre>
             *
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
             */
            public Pattern.Builder addExclusionPatternsBuilder(
                    int index) {
                return getExclusionPatternsFieldBuilder().addBuilder(
                        index, Pattern.getDefaultInstance());
            }

            /**
             * <pre>
             * Metrics with names that match a rule in the inclusion_patterns are
             * targeted by this schedule. Metrics that match the exclusion_patterns
             * are not targeted for this schedule, even if they match an inclusion
             * pattern.
             * </pre>
             *
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern exclusion_patterns = 1;</code>
             */
            public java.util.List<Pattern.Builder>
            getExclusionPatternsBuilderList() {
                return getExclusionPatternsFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    Pattern, Pattern.Builder, PatternOrBuilder>
            getExclusionPatternsFieldBuilder() {
                if (exclusionPatternsBuilder_ == null) {
                    exclusionPatternsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                            Pattern, Pattern.Builder, PatternOrBuilder>(
                            exclusionPatterns_,
                            ((bitField0_ & 0x00000001) != 0),
                            getParentForChildren(),
                            isClean());
                    exclusionPatterns_ = null;
                }
                return exclusionPatternsBuilder_;
            }

            private java.util.List<Pattern> inclusionPatterns_ =
                    java.util.Collections.emptyList();

            private void ensureInclusionPatternsIsMutable() {
                if (!((bitField0_ & 0x00000002) != 0)) {
                    inclusionPatterns_ = new java.util.ArrayList<Pattern>(inclusionPatterns_);
                    bitField0_ |= 0x00000002;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    Pattern, Pattern.Builder, PatternOrBuilder> inclusionPatternsBuilder_;

            /**
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
             */
            public java.util.List<Pattern> getInclusionPatternsList() {
                if (inclusionPatternsBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(inclusionPatterns_);
                } else {
                    return inclusionPatternsBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
             */
            public int getInclusionPatternsCount() {
                if (inclusionPatternsBuilder_ == null) {
                    return inclusionPatterns_.size();
                } else {
                    return inclusionPatternsBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
             */
            public Pattern getInclusionPatterns(int index) {
                if (inclusionPatternsBuilder_ == null) {
                    return inclusionPatterns_.get(index);
                } else {
                    return inclusionPatternsBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
             */
            public Builder setInclusionPatterns(
                    int index, Pattern value) {
                if (inclusionPatternsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureInclusionPatternsIsMutable();
                    inclusionPatterns_.set(index, value);
                    onChanged();
                } else {
                    inclusionPatternsBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
             */
            public Builder setInclusionPatterns(
                    int index, Pattern.Builder builderForValue) {
                if (inclusionPatternsBuilder_ == null) {
                    ensureInclusionPatternsIsMutable();
                    inclusionPatterns_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    inclusionPatternsBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
             */
            public Builder addInclusionPatterns(Pattern value) {
                if (inclusionPatternsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureInclusionPatternsIsMutable();
                    inclusionPatterns_.add(value);
                    onChanged();
                } else {
                    inclusionPatternsBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
             */
            public Builder addInclusionPatterns(
                    int index, Pattern value) {
                if (inclusionPatternsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureInclusionPatternsIsMutable();
                    inclusionPatterns_.add(index, value);
                    onChanged();
                } else {
                    inclusionPatternsBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
             */
            public Builder addInclusionPatterns(
                    Pattern.Builder builderForValue) {
                if (inclusionPatternsBuilder_ == null) {
                    ensureInclusionPatternsIsMutable();
                    inclusionPatterns_.add(builderForValue.build());
                    onChanged();
                } else {
                    inclusionPatternsBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
             */
            public Builder addInclusionPatterns(
                    int index, Pattern.Builder builderForValue) {
                if (inclusionPatternsBuilder_ == null) {
                    ensureInclusionPatternsIsMutable();
                    inclusionPatterns_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    inclusionPatternsBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
             */
            public Builder addAllInclusionPatterns(
                    Iterable<? extends Pattern> values) {
                if (inclusionPatternsBuilder_ == null) {
                    ensureInclusionPatternsIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(
                            values, inclusionPatterns_);
                    onChanged();
                } else {
                    inclusionPatternsBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
             */
            public Builder clearInclusionPatterns() {
                if (inclusionPatternsBuilder_ == null) {
                    inclusionPatterns_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000002);
                    onChanged();
                } else {
                    inclusionPatternsBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
             */
            public Builder removeInclusionPatterns(int index) {
                if (inclusionPatternsBuilder_ == null) {
                    ensureInclusionPatternsIsMutable();
                    inclusionPatterns_.remove(index);
                    onChanged();
                } else {
                    inclusionPatternsBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
             */
            public Pattern.Builder getInclusionPatternsBuilder(
                    int index) {
                return getInclusionPatternsFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
             */
            public PatternOrBuilder getInclusionPatternsOrBuilder(
                    int index) {
                if (inclusionPatternsBuilder_ == null) {
                    return inclusionPatterns_.get(index);
                } else {
                    return inclusionPatternsBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
             */
            public java.util.List<? extends PatternOrBuilder>
            getInclusionPatternsOrBuilderList() {
                if (inclusionPatternsBuilder_ != null) {
                    return inclusionPatternsBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(inclusionPatterns_);
                }
            }

            /**
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
             */
            public Pattern.Builder addInclusionPatternsBuilder() {
                return getInclusionPatternsFieldBuilder().addBuilder(
                        Pattern.getDefaultInstance());
            }

            /**
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
             */
            public Pattern.Builder addInclusionPatternsBuilder(
                    int index) {
                return getInclusionPatternsFieldBuilder().addBuilder(
                        index, Pattern.getDefaultInstance());
            }

            /**
             * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule.Pattern inclusion_patterns = 2;</code>
             */
            public java.util.List<Pattern.Builder>
            getInclusionPatternsBuilderList() {
                return getInclusionPatternsFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    Pattern, Pattern.Builder, PatternOrBuilder>
            getInclusionPatternsFieldBuilder() {
                if (inclusionPatternsBuilder_ == null) {
                    inclusionPatternsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                            Pattern, Pattern.Builder, PatternOrBuilder>(
                            inclusionPatterns_,
                            ((bitField0_ & 0x00000002) != 0),
                            getParentForChildren(),
                            isClean());
                    inclusionPatterns_ = null;
                }
                return inclusionPatternsBuilder_;
            }

            private int periodSec_;

            /**
             * <pre>
             * Describes the collection period for each metric in seconds.
             * A period of 0 means to not export.
             * </pre>
             *
             * <code>int32 period_sec = 3;</code>
             *
             * @return The periodSec.
             */
            @Override
            public int getPeriodSec() {
                return periodSec_;
            }

            /**
             * <pre>
             * Describes the collection period for each metric in seconds.
             * A period of 0 means to not export.
             * </pre>
             *
             * <code>int32 period_sec = 3;</code>
             *
             * @param value The periodSec to set.
             * @return This builder for chaining.
             */
            public Builder setPeriodSec(int value) {

                periodSec_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * Describes the collection period for each metric in seconds.
             * A period of 0 means to not export.
             * </pre>
             *
             * <code>int32 period_sec = 3;</code>
             *
             * @return This builder for chaining.
             */
            public Builder clearPeriodSec() {

                periodSec_ = 0;
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return super.setUnknownFields(unknownFields);
            }

            @Override
            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return super.mergeUnknownFields(unknownFields);
            }


            // @@protoc_insertion_point(builder_scope:opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule)
        }

        // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule)
        private static final Schedule DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new Schedule();
        }

        public static Schedule getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<Schedule>
                PARSER = new com.google.protobuf.AbstractParser<Schedule>() {
            @Override
            public Schedule parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new Schedule(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<Schedule> parser() {
            return PARSER;
        }

        @Override
        public com.google.protobuf.Parser<Schedule> getParserForType() {
            return PARSER;
        }

        @Override
        public Schedule getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public static final int FINGERPRINT_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString fingerprint_;

    /**
     * <pre>
     * Optional. The fingerprint associated with this MetricConfigResponse. Each
     * change in configs yields a different fingerprint. The resource SHOULD copy
     * this value to MetricConfigRequest.last_known_fingerprint for the next
     * configuration request. If there are no changes between fingerprint and
     * MetricConfigRequest.last_known_fingerprint, then all other fields besides
     * fingerprint in the response are optional, or the same as the last update if
     * present.
     * The exact mechanics of generating the fingerprint is up to the
     * implementation. However, a fingerprint must be deterministically determined
     * by the configurations -- the same configuration will generate the same
     * fingerprint on any instance of an implementation. Hence using a timestamp is
     * unacceptable, but a deterministic hash is fine.
     * </pre>
     *
     * <code>bytes fingerprint = 1;</code>
     *
     * @return The fingerprint.
     */
    @Override
    public com.google.protobuf.ByteString getFingerprint() {
        return fingerprint_;
    }

    public static final int SCHEDULES_FIELD_NUMBER = 2;
    private java.util.List<Schedule> schedules_;

    /**
     * <pre>
     * A single metric may match multiple schedules. In such cases, the schedule
     * that specifies the smallest period is applied.
     * Note, for optimization purposes, it is recommended to use as few schedules
     * as possible to capture all required metric updates. Where you can be
     * conservative, do take full advantage of the inclusion/exclusion patterns to
     * capture as much of your targeted metrics.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
     */
    @Override
    public java.util.List<Schedule> getSchedulesList() {
        return schedules_;
    }

    /**
     * <pre>
     * A single metric may match multiple schedules. In such cases, the schedule
     * that specifies the smallest period is applied.
     * Note, for optimization purposes, it is recommended to use as few schedules
     * as possible to capture all required metric updates. Where you can be
     * conservative, do take full advantage of the inclusion/exclusion patterns to
     * capture as much of your targeted metrics.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
     */
    @Override
    public java.util.List<? extends ScheduleOrBuilder>
    getSchedulesOrBuilderList() {
        return schedules_;
    }

    /**
     * <pre>
     * A single metric may match multiple schedules. In such cases, the schedule
     * that specifies the smallest period is applied.
     * Note, for optimization purposes, it is recommended to use as few schedules
     * as possible to capture all required metric updates. Where you can be
     * conservative, do take full advantage of the inclusion/exclusion patterns to
     * capture as much of your targeted metrics.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
     */
    @Override
    public int getSchedulesCount() {
        return schedules_.size();
    }

    /**
     * <pre>
     * A single metric may match multiple schedules. In such cases, the schedule
     * that specifies the smallest period is applied.
     * Note, for optimization purposes, it is recommended to use as few schedules
     * as possible to capture all required metric updates. Where you can be
     * conservative, do take full advantage of the inclusion/exclusion patterns to
     * capture as much of your targeted metrics.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
     */
    @Override
    public Schedule getSchedules(int index) {
        return schedules_.get(index);
    }

    /**
     * <pre>
     * A single metric may match multiple schedules. In such cases, the schedule
     * that specifies the smallest period is applied.
     * Note, for optimization purposes, it is recommended to use as few schedules
     * as possible to capture all required metric updates. Where you can be
     * conservative, do take full advantage of the inclusion/exclusion patterns to
     * capture as much of your targeted metrics.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
     */
    @Override
    public ScheduleOrBuilder getSchedulesOrBuilder(
            int index) {
        return schedules_.get(index);
    }

    public static final int SUGGESTED_WAIT_TIME_SEC_FIELD_NUMBER = 3;
    private int suggestedWaitTimeSec_;

    /**
     * <pre>
     * Optional. The client is suggested to wait this long (in seconds) before
     * pinging the configuration service again.
     * </pre>
     *
     * <code>int32 suggested_wait_time_sec = 3;</code>
     *
     * @return The suggestedWaitTimeSec.
     */
    @Override
    public int getSuggestedWaitTimeSec() {
        return suggestedWaitTimeSec_;
    }

    private byte memoizedIsInitialized = -1;

    @Override
    public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
            throws java.io.IOException {
        if (!fingerprint_.isEmpty()) {
            output.writeBytes(1, fingerprint_);
        }
        for (int i = 0; i < schedules_.size(); i++) {
            output.writeMessage(2, schedules_.get(i));
        }
        if (suggestedWaitTimeSec_ != 0) {
            output.writeInt32(3, suggestedWaitTimeSec_);
        }
        unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!fingerprint_.isEmpty()) {
            size += com.google.protobuf.CodedOutputStream
                    .computeBytesSize(1, fingerprint_);
        }
        for (int i = 0; i < schedules_.size(); i++) {
            size += com.google.protobuf.CodedOutputStream
                    .computeMessageSize(2, schedules_.get(i));
        }
        if (suggestedWaitTimeSec_ != 0) {
            size += com.google.protobuf.CodedOutputStream
                    .computeInt32Size(3, suggestedWaitTimeSec_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
    }

    @Override
    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof MetricConfigResponse)) {
            return super.equals(obj);
        }
        MetricConfigResponse other = (MetricConfigResponse) obj;

        if (!getFingerprint()
                .equals(other.getFingerprint())) return false;
        if (!getSchedulesList()
                .equals(other.getSchedulesList())) return false;
        if (getSuggestedWaitTimeSec()
                != other.getSuggestedWaitTimeSec()) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
    }

    @Override
    public int hashCode() {
        if (memoizedHashCode != 0) {
            return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + FINGERPRINT_FIELD_NUMBER;
        hash = (53 * hash) + getFingerprint().hashCode();
        if (getSchedulesCount() > 0) {
            hash = (37 * hash) + SCHEDULES_FIELD_NUMBER;
            hash = (53 * hash) + getSchedulesList().hashCode();
        }
        hash = (37 * hash) + SUGGESTED_WAIT_TIME_SEC_FIELD_NUMBER;
        hash = (53 * hash) + getSuggestedWaitTimeSec();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
    }

    public static MetricConfigResponse parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static MetricConfigResponse parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static MetricConfigResponse parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static MetricConfigResponse parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static MetricConfigResponse parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static MetricConfigResponse parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static MetricConfigResponse parseFrom(java.io.InputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
    }

    public static MetricConfigResponse parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static MetricConfigResponse parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input);
    }

    public static MetricConfigResponse parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }

    public static MetricConfigResponse parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
    }

    public static MetricConfigResponse parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() {
        return newBuilder();
    }

    public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(MetricConfigResponse prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    @Override
    public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
                ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
            BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
    }

    /**
     * Protobuf type {@code opentelemetry.proto.metrics.experimental.MetricConfigResponse}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:opentelemetry.proto.metrics.experimental.MetricConfigResponse)
            MetricConfigResponseOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return MetricConfigServiceProto.internal_static_opentelemetry_proto_metrics_experimental_MetricConfigResponse_descriptor;
        }

        @Override
        protected FieldAccessorTable
        internalGetFieldAccessorTable() {
            return MetricConfigServiceProto.internal_static_opentelemetry_proto_metrics_experimental_MetricConfigResponse_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            MetricConfigResponse.class, Builder.class);
        }

        // Construct using io.opentelemetry.proto.metrics.experimental.MetricConfigResponse.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }

        private Builder(
                BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
        }

        private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessageV3
                    .alwaysUseFieldBuilders) {
                getSchedulesFieldBuilder();
            }
        }

        @Override
        public Builder clear() {
            super.clear();
            fingerprint_ = com.google.protobuf.ByteString.EMPTY;

            if (schedulesBuilder_ == null) {
                schedules_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000001);
            } else {
                schedulesBuilder_.clear();
            }
            suggestedWaitTimeSec_ = 0;

            return this;
        }

        @Override
        public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
            return MetricConfigServiceProto.internal_static_opentelemetry_proto_metrics_experimental_MetricConfigResponse_descriptor;
        }

        @Override
        public MetricConfigResponse getDefaultInstanceForType() {
            return MetricConfigResponse.getDefaultInstance();
        }

        @Override
        public MetricConfigResponse build() {
            MetricConfigResponse result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        @Override
        public MetricConfigResponse buildPartial() {
            MetricConfigResponse result = new MetricConfigResponse(this);
            int from_bitField0_ = bitField0_;
            result.fingerprint_ = fingerprint_;
            if (schedulesBuilder_ == null) {
                if (((bitField0_ & 0x00000001) != 0)) {
                    schedules_ = java.util.Collections.unmodifiableList(schedules_);
                    bitField0_ = (bitField0_ & ~0x00000001);
                }
                result.schedules_ = schedules_;
            } else {
                result.schedules_ = schedulesBuilder_.build();
            }
            result.suggestedWaitTimeSec_ = suggestedWaitTimeSec_;
            onBuilt();
            return result;
        }

        @Override
        public Builder clone() {
            return super.clone();
        }

        @Override
        public Builder setField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                Object value) {
            return super.setField(field, value);
        }

        @Override
        public Builder clearField(
                com.google.protobuf.Descriptors.FieldDescriptor field) {
            return super.clearField(field);
        }

        @Override
        public Builder clearOneof(
                com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return super.clearOneof(oneof);
        }

        @Override
        public Builder setRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                int index, Object value) {
            return super.setRepeatedField(field, index, value);
        }

        @Override
        public Builder addRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                Object value) {
            return super.addRepeatedField(field, value);
        }

        @Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof MetricConfigResponse) {
                return mergeFrom((MetricConfigResponse) other);
            } else {
                super.mergeFrom(other);
                return this;
            }
        }

        public Builder mergeFrom(MetricConfigResponse other) {
            if (other == MetricConfigResponse.getDefaultInstance()) return this;
            if (other.getFingerprint() != com.google.protobuf.ByteString.EMPTY) {
                setFingerprint(other.getFingerprint());
            }
            if (schedulesBuilder_ == null) {
                if (!other.schedules_.isEmpty()) {
                    if (schedules_.isEmpty()) {
                        schedules_ = other.schedules_;
                        bitField0_ = (bitField0_ & ~0x00000001);
                    } else {
                        ensureSchedulesIsMutable();
                        schedules_.addAll(other.schedules_);
                    }
                    onChanged();
                }
            } else {
                if (!other.schedules_.isEmpty()) {
                    if (schedulesBuilder_.isEmpty()) {
                        schedulesBuilder_.dispose();
                        schedulesBuilder_ = null;
                        schedules_ = other.schedules_;
                        bitField0_ = (bitField0_ & ~0x00000001);
                        schedulesBuilder_ =
                                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                        getSchedulesFieldBuilder() : null;
                    } else {
                        schedulesBuilder_.addAllMessages(other.schedules_);
                    }
                }
            }
            if (other.getSuggestedWaitTimeSec() != 0) {
                setSuggestedWaitTimeSec(other.getSuggestedWaitTimeSec());
            }
            this.mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
        }

        @Override
        public final boolean isInitialized() {
            return true;
        }

        @Override
        public Builder mergeFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            MetricConfigResponse parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                parsedMessage = (MetricConfigResponse) e.getUnfinishedMessage();
                throw e.unwrapIOException();
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }

        private int bitField0_;

        private com.google.protobuf.ByteString fingerprint_ = com.google.protobuf.ByteString.EMPTY;

        /**
         * <pre>
         * Optional. The fingerprint associated with this MetricConfigResponse. Each
         * change in configs yields a different fingerprint. The resource SHOULD copy
         * this value to MetricConfigRequest.last_known_fingerprint for the next
         * configuration request. If there are no changes between fingerprint and
         * MetricConfigRequest.last_known_fingerprint, then all other fields besides
         * fingerprint in the response are optional, or the same as the last update if
         * present.
         * The exact mechanics of generating the fingerprint is up to the
         * implementation. However, a fingerprint must be deterministically determined
         * by the configurations -- the same configuration will generate the same
         * fingerprint on any instance of an implementation. Hence using a timestamp is
         * unacceptable, but a deterministic hash is fine.
         * </pre>
         *
         * <code>bytes fingerprint = 1;</code>
         *
         * @return The fingerprint.
         */
        @Override
        public com.google.protobuf.ByteString getFingerprint() {
            return fingerprint_;
        }

        /**
         * <pre>
         * Optional. The fingerprint associated with this MetricConfigResponse. Each
         * change in configs yields a different fingerprint. The resource SHOULD copy
         * this value to MetricConfigRequest.last_known_fingerprint for the next
         * configuration request. If there are no changes between fingerprint and
         * MetricConfigRequest.last_known_fingerprint, then all other fields besides
         * fingerprint in the response are optional, or the same as the last update if
         * present.
         * The exact mechanics of generating the fingerprint is up to the
         * implementation. However, a fingerprint must be deterministically determined
         * by the configurations -- the same configuration will generate the same
         * fingerprint on any instance of an implementation. Hence using a timestamp is
         * unacceptable, but a deterministic hash is fine.
         * </pre>
         *
         * <code>bytes fingerprint = 1;</code>
         *
         * @param value The fingerprint to set.
         * @return This builder for chaining.
         */
        public Builder setFingerprint(com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }

            fingerprint_ = value;
            onChanged();
            return this;
        }

        /**
         * <pre>
         * Optional. The fingerprint associated with this MetricConfigResponse. Each
         * change in configs yields a different fingerprint. The resource SHOULD copy
         * this value to MetricConfigRequest.last_known_fingerprint for the next
         * configuration request. If there are no changes between fingerprint and
         * MetricConfigRequest.last_known_fingerprint, then all other fields besides
         * fingerprint in the response are optional, or the same as the last update if
         * present.
         * The exact mechanics of generating the fingerprint is up to the
         * implementation. However, a fingerprint must be deterministically determined
         * by the configurations -- the same configuration will generate the same
         * fingerprint on any instance of an implementation. Hence using a timestamp is
         * unacceptable, but a deterministic hash is fine.
         * </pre>
         *
         * <code>bytes fingerprint = 1;</code>
         *
         * @return This builder for chaining.
         */
        public Builder clearFingerprint() {

            fingerprint_ = getDefaultInstance().getFingerprint();
            onChanged();
            return this;
        }

        private java.util.List<Schedule> schedules_ =
                java.util.Collections.emptyList();

        private void ensureSchedulesIsMutable() {
            if (!((bitField0_ & 0x00000001) != 0)) {
                schedules_ = new java.util.ArrayList<Schedule>(schedules_);
                bitField0_ |= 0x00000001;
            }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
                Schedule, Schedule.Builder, ScheduleOrBuilder> schedulesBuilder_;

        /**
         * <pre>
         * A single metric may match multiple schedules. In such cases, the schedule
         * that specifies the smallest period is applied.
         * Note, for optimization purposes, it is recommended to use as few schedules
         * as possible to capture all required metric updates. Where you can be
         * conservative, do take full advantage of the inclusion/exclusion patterns to
         * capture as much of your targeted metrics.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
         */
        public java.util.List<Schedule> getSchedulesList() {
            if (schedulesBuilder_ == null) {
                return java.util.Collections.unmodifiableList(schedules_);
            } else {
                return schedulesBuilder_.getMessageList();
            }
        }

        /**
         * <pre>
         * A single metric may match multiple schedules. In such cases, the schedule
         * that specifies the smallest period is applied.
         * Note, for optimization purposes, it is recommended to use as few schedules
         * as possible to capture all required metric updates. Where you can be
         * conservative, do take full advantage of the inclusion/exclusion patterns to
         * capture as much of your targeted metrics.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
         */
        public int getSchedulesCount() {
            if (schedulesBuilder_ == null) {
                return schedules_.size();
            } else {
                return schedulesBuilder_.getCount();
            }
        }

        /**
         * <pre>
         * A single metric may match multiple schedules. In such cases, the schedule
         * that specifies the smallest period is applied.
         * Note, for optimization purposes, it is recommended to use as few schedules
         * as possible to capture all required metric updates. Where you can be
         * conservative, do take full advantage of the inclusion/exclusion patterns to
         * capture as much of your targeted metrics.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
         */
        public Schedule getSchedules(int index) {
            if (schedulesBuilder_ == null) {
                return schedules_.get(index);
            } else {
                return schedulesBuilder_.getMessage(index);
            }
        }

        /**
         * <pre>
         * A single metric may match multiple schedules. In such cases, the schedule
         * that specifies the smallest period is applied.
         * Note, for optimization purposes, it is recommended to use as few schedules
         * as possible to capture all required metric updates. Where you can be
         * conservative, do take full advantage of the inclusion/exclusion patterns to
         * capture as much of your targeted metrics.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
         */
        public Builder setSchedules(
                int index, Schedule value) {
            if (schedulesBuilder_ == null) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureSchedulesIsMutable();
                schedules_.set(index, value);
                onChanged();
            } else {
                schedulesBuilder_.setMessage(index, value);
            }
            return this;
        }

        /**
         * <pre>
         * A single metric may match multiple schedules. In such cases, the schedule
         * that specifies the smallest period is applied.
         * Note, for optimization purposes, it is recommended to use as few schedules
         * as possible to capture all required metric updates. Where you can be
         * conservative, do take full advantage of the inclusion/exclusion patterns to
         * capture as much of your targeted metrics.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
         */
        public Builder setSchedules(
                int index, Schedule.Builder builderForValue) {
            if (schedulesBuilder_ == null) {
                ensureSchedulesIsMutable();
                schedules_.set(index, builderForValue.build());
                onChanged();
            } else {
                schedulesBuilder_.setMessage(index, builderForValue.build());
            }
            return this;
        }

        /**
         * <pre>
         * A single metric may match multiple schedules. In such cases, the schedule
         * that specifies the smallest period is applied.
         * Note, for optimization purposes, it is recommended to use as few schedules
         * as possible to capture all required metric updates. Where you can be
         * conservative, do take full advantage of the inclusion/exclusion patterns to
         * capture as much of your targeted metrics.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
         */
        public Builder addSchedules(Schedule value) {
            if (schedulesBuilder_ == null) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureSchedulesIsMutable();
                schedules_.add(value);
                onChanged();
            } else {
                schedulesBuilder_.addMessage(value);
            }
            return this;
        }

        /**
         * <pre>
         * A single metric may match multiple schedules. In such cases, the schedule
         * that specifies the smallest period is applied.
         * Note, for optimization purposes, it is recommended to use as few schedules
         * as possible to capture all required metric updates. Where you can be
         * conservative, do take full advantage of the inclusion/exclusion patterns to
         * capture as much of your targeted metrics.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
         */
        public Builder addSchedules(
                int index, Schedule value) {
            if (schedulesBuilder_ == null) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureSchedulesIsMutable();
                schedules_.add(index, value);
                onChanged();
            } else {
                schedulesBuilder_.addMessage(index, value);
            }
            return this;
        }

        /**
         * <pre>
         * A single metric may match multiple schedules. In such cases, the schedule
         * that specifies the smallest period is applied.
         * Note, for optimization purposes, it is recommended to use as few schedules
         * as possible to capture all required metric updates. Where you can be
         * conservative, do take full advantage of the inclusion/exclusion patterns to
         * capture as much of your targeted metrics.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
         */
        public Builder addSchedules(
                Schedule.Builder builderForValue) {
            if (schedulesBuilder_ == null) {
                ensureSchedulesIsMutable();
                schedules_.add(builderForValue.build());
                onChanged();
            } else {
                schedulesBuilder_.addMessage(builderForValue.build());
            }
            return this;
        }

        /**
         * <pre>
         * A single metric may match multiple schedules. In such cases, the schedule
         * that specifies the smallest period is applied.
         * Note, for optimization purposes, it is recommended to use as few schedules
         * as possible to capture all required metric updates. Where you can be
         * conservative, do take full advantage of the inclusion/exclusion patterns to
         * capture as much of your targeted metrics.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
         */
        public Builder addSchedules(
                int index, Schedule.Builder builderForValue) {
            if (schedulesBuilder_ == null) {
                ensureSchedulesIsMutable();
                schedules_.add(index, builderForValue.build());
                onChanged();
            } else {
                schedulesBuilder_.addMessage(index, builderForValue.build());
            }
            return this;
        }

        /**
         * <pre>
         * A single metric may match multiple schedules. In such cases, the schedule
         * that specifies the smallest period is applied.
         * Note, for optimization purposes, it is recommended to use as few schedules
         * as possible to capture all required metric updates. Where you can be
         * conservative, do take full advantage of the inclusion/exclusion patterns to
         * capture as much of your targeted metrics.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
         */
        public Builder addAllSchedules(
                Iterable<? extends Schedule> values) {
            if (schedulesBuilder_ == null) {
                ensureSchedulesIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, schedules_);
                onChanged();
            } else {
                schedulesBuilder_.addAllMessages(values);
            }
            return this;
        }

        /**
         * <pre>
         * A single metric may match multiple schedules. In such cases, the schedule
         * that specifies the smallest period is applied.
         * Note, for optimization purposes, it is recommended to use as few schedules
         * as possible to capture all required metric updates. Where you can be
         * conservative, do take full advantage of the inclusion/exclusion patterns to
         * capture as much of your targeted metrics.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
         */
        public Builder clearSchedules() {
            if (schedulesBuilder_ == null) {
                schedules_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000001);
                onChanged();
            } else {
                schedulesBuilder_.clear();
            }
            return this;
        }

        /**
         * <pre>
         * A single metric may match multiple schedules. In such cases, the schedule
         * that specifies the smallest period is applied.
         * Note, for optimization purposes, it is recommended to use as few schedules
         * as possible to capture all required metric updates. Where you can be
         * conservative, do take full advantage of the inclusion/exclusion patterns to
         * capture as much of your targeted metrics.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
         */
        public Builder removeSchedules(int index) {
            if (schedulesBuilder_ == null) {
                ensureSchedulesIsMutable();
                schedules_.remove(index);
                onChanged();
            } else {
                schedulesBuilder_.remove(index);
            }
            return this;
        }

        /**
         * <pre>
         * A single metric may match multiple schedules. In such cases, the schedule
         * that specifies the smallest period is applied.
         * Note, for optimization purposes, it is recommended to use as few schedules
         * as possible to capture all required metric updates. Where you can be
         * conservative, do take full advantage of the inclusion/exclusion patterns to
         * capture as much of your targeted metrics.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
         */
        public Schedule.Builder getSchedulesBuilder(
                int index) {
            return getSchedulesFieldBuilder().getBuilder(index);
        }

        /**
         * <pre>
         * A single metric may match multiple schedules. In such cases, the schedule
         * that specifies the smallest period is applied.
         * Note, for optimization purposes, it is recommended to use as few schedules
         * as possible to capture all required metric updates. Where you can be
         * conservative, do take full advantage of the inclusion/exclusion patterns to
         * capture as much of your targeted metrics.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
         */
        public ScheduleOrBuilder getSchedulesOrBuilder(
                int index) {
            if (schedulesBuilder_ == null) {
                return schedules_.get(index);
            } else {
                return schedulesBuilder_.getMessageOrBuilder(index);
            }
        }

        /**
         * <pre>
         * A single metric may match multiple schedules. In such cases, the schedule
         * that specifies the smallest period is applied.
         * Note, for optimization purposes, it is recommended to use as few schedules
         * as possible to capture all required metric updates. Where you can be
         * conservative, do take full advantage of the inclusion/exclusion patterns to
         * capture as much of your targeted metrics.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
         */
        public java.util.List<? extends ScheduleOrBuilder>
        getSchedulesOrBuilderList() {
            if (schedulesBuilder_ != null) {
                return schedulesBuilder_.getMessageOrBuilderList();
            } else {
                return java.util.Collections.unmodifiableList(schedules_);
            }
        }

        /**
         * <pre>
         * A single metric may match multiple schedules. In such cases, the schedule
         * that specifies the smallest period is applied.
         * Note, for optimization purposes, it is recommended to use as few schedules
         * as possible to capture all required metric updates. Where you can be
         * conservative, do take full advantage of the inclusion/exclusion patterns to
         * capture as much of your targeted metrics.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
         */
        public Schedule.Builder addSchedulesBuilder() {
            return getSchedulesFieldBuilder().addBuilder(
                    Schedule.getDefaultInstance());
        }

        /**
         * <pre>
         * A single metric may match multiple schedules. In such cases, the schedule
         * that specifies the smallest period is applied.
         * Note, for optimization purposes, it is recommended to use as few schedules
         * as possible to capture all required metric updates. Where you can be
         * conservative, do take full advantage of the inclusion/exclusion patterns to
         * capture as much of your targeted metrics.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
         */
        public Schedule.Builder addSchedulesBuilder(
                int index) {
            return getSchedulesFieldBuilder().addBuilder(
                    index, Schedule.getDefaultInstance());
        }

        /**
         * <pre>
         * A single metric may match multiple schedules. In such cases, the schedule
         * that specifies the smallest period is applied.
         * Note, for optimization purposes, it is recommended to use as few schedules
         * as possible to capture all required metric updates. Where you can be
         * conservative, do take full advantage of the inclusion/exclusion patterns to
         * capture as much of your targeted metrics.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.experimental.MetricConfigResponse.Schedule schedules = 2;</code>
         */
        public java.util.List<Schedule.Builder>
        getSchedulesBuilderList() {
            return getSchedulesFieldBuilder().getBuilderList();
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
                Schedule, Schedule.Builder, ScheduleOrBuilder>
        getSchedulesFieldBuilder() {
            if (schedulesBuilder_ == null) {
                schedulesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                        Schedule, Schedule.Builder, ScheduleOrBuilder>(
                        schedules_,
                        ((bitField0_ & 0x00000001) != 0),
                        getParentForChildren(),
                        isClean());
                schedules_ = null;
            }
            return schedulesBuilder_;
        }

        private int suggestedWaitTimeSec_;

        /**
         * <pre>
         * Optional. The client is suggested to wait this long (in seconds) before
         * pinging the configuration service again.
         * </pre>
         *
         * <code>int32 suggested_wait_time_sec = 3;</code>
         *
         * @return The suggestedWaitTimeSec.
         */
        @Override
        public int getSuggestedWaitTimeSec() {
            return suggestedWaitTimeSec_;
        }

        /**
         * <pre>
         * Optional. The client is suggested to wait this long (in seconds) before
         * pinging the configuration service again.
         * </pre>
         *
         * <code>int32 suggested_wait_time_sec = 3;</code>
         *
         * @param value The suggestedWaitTimeSec to set.
         * @return This builder for chaining.
         */
        public Builder setSuggestedWaitTimeSec(int value) {

            suggestedWaitTimeSec_ = value;
            onChanged();
            return this;
        }

        /**
         * <pre>
         * Optional. The client is suggested to wait this long (in seconds) before
         * pinging the configuration service again.
         * </pre>
         *
         * <code>int32 suggested_wait_time_sec = 3;</code>
         *
         * @return This builder for chaining.
         */
        public Builder clearSuggestedWaitTimeSec() {

            suggestedWaitTimeSec_ = 0;
            onChanged();
            return this;
        }

        @Override
        public final Builder setUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
        }

        @Override
        public final Builder mergeUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:opentelemetry.proto.metrics.experimental.MetricConfigResponse)
    }

    // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.experimental.MetricConfigResponse)
    private static final MetricConfigResponse DEFAULT_INSTANCE;

    static {
        DEFAULT_INSTANCE = new MetricConfigResponse();
    }

    public static MetricConfigResponse getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MetricConfigResponse>
            PARSER = new com.google.protobuf.AbstractParser<MetricConfigResponse>() {
        @Override
        public MetricConfigResponse parsePartialFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return new MetricConfigResponse(input, extensionRegistry);
        }
    };

    public static com.google.protobuf.Parser<MetricConfigResponse> parser() {
        return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<MetricConfigResponse> getParserForType() {
        return PARSER;
    }

    @Override
    public MetricConfigResponse getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
    }

}

