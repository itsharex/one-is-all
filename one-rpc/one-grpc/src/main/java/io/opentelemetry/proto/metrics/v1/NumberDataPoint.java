// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/metrics/v1/metrics.proto

package io.opentelemetry.proto.metrics.v1;

/**
 * <pre>
 * NumberDataPoint is a single data point in a timeseries that describes the
 * time-varying value of a double metric.
 * </pre>
 * <p>
 * Protobuf type {@code opentelemetry.proto.metrics.v1.NumberDataPoint}
 */
public final class NumberDataPoint extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:opentelemetry.proto.metrics.v1.NumberDataPoint)
        NumberDataPointOrBuilder {
    private static final long serialVersionUID = 0L;

    // Use NumberDataPoint.newBuilder() to construct.
    private NumberDataPoint(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
    }

    private NumberDataPoint() {
        attributes_ = java.util.Collections.emptyList();
        labels_ = java.util.Collections.emptyList();
        exemplars_ = java.util.Collections.emptyList();
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
            UnusedPrivateParameter unused) {
        return new NumberDataPoint();
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
        return this.unknownFields;
    }

    private NumberDataPoint(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
            throw new NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
            boolean done = false;
            while (!done) {
                int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    case 10: {
                        if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                            labels_ = new java.util.ArrayList<io.opentelemetry.proto.common.v1.StringKeyValue>();
                            mutable_bitField0_ |= 0x00000002;
                        }
                        labels_.add(
                                input.readMessage(io.opentelemetry.proto.common.v1.StringKeyValue.parser(), extensionRegistry));
                        break;
                    }
                    case 17: {

                        startTimeUnixNano_ = input.readFixed64();
                        break;
                    }
                    case 25: {

                        timeUnixNano_ = input.readFixed64();
                        break;
                    }
                    case 33: {
                        valueCase_ = 4;
                        value_ = input.readDouble();
                        break;
                    }
                    case 42: {
                        if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                            exemplars_ = new java.util.ArrayList<Exemplar>();
                            mutable_bitField0_ |= 0x00000004;
                        }
                        exemplars_.add(
                                input.readMessage(Exemplar.parser(), extensionRegistry));
                        break;
                    }
                    case 49: {
                        valueCase_ = 6;
                        value_ = input.readSFixed64();
                        break;
                    }
                    case 58: {
                        if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                            attributes_ = new java.util.ArrayList<io.opentelemetry.proto.common.v1.KeyValue>();
                            mutable_bitField0_ |= 0x00000001;
                        }
                        attributes_.add(
                                input.readMessage(io.opentelemetry.proto.common.v1.KeyValue.parser(), extensionRegistry));
                        break;
                    }
                    default: {
                        if (!parseUnknownField(
                                input, unknownFields, extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                }
            }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                    e).setUnfinishedMessage(this);
        } finally {
            if (((mutable_bitField0_ & 0x00000002) != 0)) {
                labels_ = java.util.Collections.unmodifiableList(labels_);
            }
            if (((mutable_bitField0_ & 0x00000004) != 0)) {
                exemplars_ = java.util.Collections.unmodifiableList(exemplars_);
            }
            if (((mutable_bitField0_ & 0x00000001) != 0)) {
                attributes_ = java.util.Collections.unmodifiableList(attributes_);
            }
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
        }
    }

    public static final com.google.protobuf.Descriptors.Descriptor
    getDescriptor() {
        return MetricsProto.internal_static_opentelemetry_proto_metrics_v1_NumberDataPoint_descriptor;
    }

    @Override
    protected FieldAccessorTable
    internalGetFieldAccessorTable() {
        return MetricsProto.internal_static_opentelemetry_proto_metrics_v1_NumberDataPoint_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                        NumberDataPoint.class, Builder.class);
    }

    private int valueCase_ = 0;
    private Object value_;

    public enum ValueCase
            implements com.google.protobuf.Internal.EnumLite,
            InternalOneOfEnum {
        AS_DOUBLE(4),
        AS_INT(6),
        VALUE_NOT_SET(0);
        private final int value;

        private ValueCase(int value) {
            this.value = value;
        }

        /**
         * @param value The number of the enum to look for.
         * @return The enum associated with the given number.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @Deprecated
        public static ValueCase valueOf(int value) {
            return forNumber(value);
        }

        public static ValueCase forNumber(int value) {
            switch (value) {
                case 4:
                    return AS_DOUBLE;
                case 6:
                    return AS_INT;
                case 0:
                    return VALUE_NOT_SET;
                default:
                    return null;
            }
        }

        public int getNumber() {
            return this.value;
        }
    }

    ;

    public ValueCase
    getValueCase() {
        return ValueCase.forNumber(
                valueCase_);
    }

    public static final int ATTRIBUTES_FIELD_NUMBER = 7;
    private java.util.List<io.opentelemetry.proto.common.v1.KeyValue> attributes_;

    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
     */
    @Override
    public java.util.List<io.opentelemetry.proto.common.v1.KeyValue> getAttributesList() {
        return attributes_;
    }

    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
     */
    @Override
    public java.util.List<? extends io.opentelemetry.proto.common.v1.KeyValueOrBuilder>
    getAttributesOrBuilderList() {
        return attributes_;
    }

    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
     */
    @Override
    public int getAttributesCount() {
        return attributes_.size();
    }

    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
     */
    @Override
    public io.opentelemetry.proto.common.v1.KeyValue getAttributes(int index) {
        return attributes_.get(index);
    }

    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
     */
    @Override
    public io.opentelemetry.proto.common.v1.KeyValueOrBuilder getAttributesOrBuilder(
            int index) {
        return attributes_.get(index);
    }

    public static final int LABELS_FIELD_NUMBER = 1;
    private java.util.List<io.opentelemetry.proto.common.v1.StringKeyValue> labels_;

    /**
     * <pre>
     * Labels is deprecated and will be removed soon.
     * 1. Old senders and receivers that are not aware of this change will
     * continue using the `labels` field.
     * 2. New senders, which are aware of this change MUST send only `attributes`.
     * 3. New receivers, which are aware of this change MUST convert this into
     * `labels` by simply converting all int64 values into float.
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];</code>
     */
    @Override
    @Deprecated
    public java.util.List<io.opentelemetry.proto.common.v1.StringKeyValue> getLabelsList() {
        return labels_;
    }

    /**
     * <pre>
     * Labels is deprecated and will be removed soon.
     * 1. Old senders and receivers that are not aware of this change will
     * continue using the `labels` field.
     * 2. New senders, which are aware of this change MUST send only `attributes`.
     * 3. New receivers, which are aware of this change MUST convert this into
     * `labels` by simply converting all int64 values into float.
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];</code>
     */
    @Override
    @Deprecated
    public java.util.List<? extends io.opentelemetry.proto.common.v1.StringKeyValueOrBuilder>
    getLabelsOrBuilderList() {
        return labels_;
    }

    /**
     * <pre>
     * Labels is deprecated and will be removed soon.
     * 1. Old senders and receivers that are not aware of this change will
     * continue using the `labels` field.
     * 2. New senders, which are aware of this change MUST send only `attributes`.
     * 3. New receivers, which are aware of this change MUST convert this into
     * `labels` by simply converting all int64 values into float.
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];</code>
     */
    @Override
    @Deprecated
    public int getLabelsCount() {
        return labels_.size();
    }

    /**
     * <pre>
     * Labels is deprecated and will be removed soon.
     * 1. Old senders and receivers that are not aware of this change will
     * continue using the `labels` field.
     * 2. New senders, which are aware of this change MUST send only `attributes`.
     * 3. New receivers, which are aware of this change MUST convert this into
     * `labels` by simply converting all int64 values into float.
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];</code>
     */
    @Override
    @Deprecated
    public io.opentelemetry.proto.common.v1.StringKeyValue getLabels(int index) {
        return labels_.get(index);
    }

    /**
     * <pre>
     * Labels is deprecated and will be removed soon.
     * 1. Old senders and receivers that are not aware of this change will
     * continue using the `labels` field.
     * 2. New senders, which are aware of this change MUST send only `attributes`.
     * 3. New receivers, which are aware of this change MUST convert this into
     * `labels` by simply converting all int64 values into float.
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];</code>
     */
    @Override
    @Deprecated
    public io.opentelemetry.proto.common.v1.StringKeyValueOrBuilder getLabelsOrBuilder(
            int index) {
        return labels_.get(index);
    }

    public static final int START_TIME_UNIX_NANO_FIELD_NUMBER = 2;
    private long startTimeUnixNano_;

    /**
     * <pre>
     * StartTimeUnixNano is optional but strongly encouraged, see the
     * the detiled comments above Metric.
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 start_time_unix_nano = 2;</code>
     *
     * @return The startTimeUnixNano.
     */
    @Override
    public long getStartTimeUnixNano() {
        return startTimeUnixNano_;
    }

    public static final int TIME_UNIX_NANO_FIELD_NUMBER = 3;
    private long timeUnixNano_;

    /**
     * <pre>
     * TimeUnixNano is required, see the detailed comments above Metric.
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 time_unix_nano = 3;</code>
     *
     * @return The timeUnixNano.
     */
    @Override
    public long getTimeUnixNano() {
        return timeUnixNano_;
    }

    public static final int AS_DOUBLE_FIELD_NUMBER = 4;

    /**
     * <code>double as_double = 4;</code>
     *
     * @return The asDouble.
     */
    @Override
    public double getAsDouble() {
        if (valueCase_ == 4) {
            return (Double) value_;
        }
        return 0D;
    }

    public static final int AS_INT_FIELD_NUMBER = 6;

    /**
     * <code>sfixed64 as_int = 6;</code>
     *
     * @return The asInt.
     */
    @Override
    public long getAsInt() {
        if (valueCase_ == 6) {
            return (Long) value_;
        }
        return 0L;
    }

    public static final int EXEMPLARS_FIELD_NUMBER = 5;
    private java.util.List<Exemplar> exemplars_;

    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 5;</code>
     */
    @Override
    public java.util.List<Exemplar> getExemplarsList() {
        return exemplars_;
    }

    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 5;</code>
     */
    @Override
    public java.util.List<? extends ExemplarOrBuilder>
    getExemplarsOrBuilderList() {
        return exemplars_;
    }

    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 5;</code>
     */
    @Override
    public int getExemplarsCount() {
        return exemplars_.size();
    }

    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 5;</code>
     */
    @Override
    public Exemplar getExemplars(int index) {
        return exemplars_.get(index);
    }

    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 5;</code>
     */
    @Override
    public ExemplarOrBuilder getExemplarsOrBuilder(
            int index) {
        return exemplars_.get(index);
    }

    private byte memoizedIsInitialized = -1;

    @Override
    public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
            throws java.io.IOException {
        for (int i = 0; i < labels_.size(); i++) {
            output.writeMessage(1, labels_.get(i));
        }
        if (startTimeUnixNano_ != 0L) {
            output.writeFixed64(2, startTimeUnixNano_);
        }
        if (timeUnixNano_ != 0L) {
            output.writeFixed64(3, timeUnixNano_);
        }
        if (valueCase_ == 4) {
            output.writeDouble(
                    4, (double) ((Double) value_));
        }
        for (int i = 0; i < exemplars_.size(); i++) {
            output.writeMessage(5, exemplars_.get(i));
        }
        if (valueCase_ == 6) {
            output.writeSFixed64(
                    6, (long) ((Long) value_));
        }
        for (int i = 0; i < attributes_.size(); i++) {
            output.writeMessage(7, attributes_.get(i));
        }
        unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        for (int i = 0; i < labels_.size(); i++) {
            size += com.google.protobuf.CodedOutputStream
                    .computeMessageSize(1, labels_.get(i));
        }
        if (startTimeUnixNano_ != 0L) {
            size += com.google.protobuf.CodedOutputStream
                    .computeFixed64Size(2, startTimeUnixNano_);
        }
        if (timeUnixNano_ != 0L) {
            size += com.google.protobuf.CodedOutputStream
                    .computeFixed64Size(3, timeUnixNano_);
        }
        if (valueCase_ == 4) {
            size += com.google.protobuf.CodedOutputStream
                    .computeDoubleSize(
                            4, (double) ((Double) value_));
        }
        for (int i = 0; i < exemplars_.size(); i++) {
            size += com.google.protobuf.CodedOutputStream
                    .computeMessageSize(5, exemplars_.get(i));
        }
        if (valueCase_ == 6) {
            size += com.google.protobuf.CodedOutputStream
                    .computeSFixed64Size(
                            6, (long) ((Long) value_));
        }
        for (int i = 0; i < attributes_.size(); i++) {
            size += com.google.protobuf.CodedOutputStream
                    .computeMessageSize(7, attributes_.get(i));
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
    }

    @Override
    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof NumberDataPoint)) {
            return super.equals(obj);
        }
        NumberDataPoint other = (NumberDataPoint) obj;

        if (!getAttributesList()
                .equals(other.getAttributesList())) return false;
        if (!getLabelsList()
                .equals(other.getLabelsList())) return false;
        if (getStartTimeUnixNano()
                != other.getStartTimeUnixNano()) return false;
        if (getTimeUnixNano()
                != other.getTimeUnixNano()) return false;
        if (!getExemplarsList()
                .equals(other.getExemplarsList())) return false;
        if (!getValueCase().equals(other.getValueCase())) return false;
        switch (valueCase_) {
            case 4:
                if (Double.doubleToLongBits(getAsDouble())
                        != Double.doubleToLongBits(
                        other.getAsDouble())) return false;
                break;
            case 6:
                if (getAsInt()
                        != other.getAsInt()) return false;
                break;
            case 0:
            default:
        }
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
    }

    @Override
    public int hashCode() {
        if (memoizedHashCode != 0) {
            return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (getAttributesCount() > 0) {
            hash = (37 * hash) + ATTRIBUTES_FIELD_NUMBER;
            hash = (53 * hash) + getAttributesList().hashCode();
        }
        if (getLabelsCount() > 0) {
            hash = (37 * hash) + LABELS_FIELD_NUMBER;
            hash = (53 * hash) + getLabelsList().hashCode();
        }
        hash = (37 * hash) + START_TIME_UNIX_NANO_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                getStartTimeUnixNano());
        hash = (37 * hash) + TIME_UNIX_NANO_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                getTimeUnixNano());
        if (getExemplarsCount() > 0) {
            hash = (37 * hash) + EXEMPLARS_FIELD_NUMBER;
            hash = (53 * hash) + getExemplarsList().hashCode();
        }
        switch (valueCase_) {
            case 4:
                hash = (37 * hash) + AS_DOUBLE_FIELD_NUMBER;
                hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                        Double.doubleToLongBits(getAsDouble()));
                break;
            case 6:
                hash = (37 * hash) + AS_INT_FIELD_NUMBER;
                hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                        getAsInt());
                break;
            case 0:
            default:
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
    }

    public static NumberDataPoint parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static NumberDataPoint parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static NumberDataPoint parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static NumberDataPoint parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static NumberDataPoint parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static NumberDataPoint parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static NumberDataPoint parseFrom(java.io.InputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
    }

    public static NumberDataPoint parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static NumberDataPoint parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input);
    }

    public static NumberDataPoint parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }

    public static NumberDataPoint parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
    }

    public static NumberDataPoint parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() {
        return newBuilder();
    }

    public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(NumberDataPoint prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    @Override
    public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
                ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
            BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
    }

    /**
     * <pre>
     * NumberDataPoint is a single data point in a timeseries that describes the
     * time-varying value of a double metric.
     * </pre>
     * <p>
     * Protobuf type {@code opentelemetry.proto.metrics.v1.NumberDataPoint}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:opentelemetry.proto.metrics.v1.NumberDataPoint)
            NumberDataPointOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return MetricsProto.internal_static_opentelemetry_proto_metrics_v1_NumberDataPoint_descriptor;
        }

        @Override
        protected FieldAccessorTable
        internalGetFieldAccessorTable() {
            return MetricsProto.internal_static_opentelemetry_proto_metrics_v1_NumberDataPoint_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            NumberDataPoint.class, Builder.class);
        }

        // Construct using io.opentelemetry.proto.metrics.v1.NumberDataPoint.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }

        private Builder(
                BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
        }

        private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessageV3
                    .alwaysUseFieldBuilders) {
                getAttributesFieldBuilder();
                getLabelsFieldBuilder();
                getExemplarsFieldBuilder();
            }
        }

        @Override
        public Builder clear() {
            super.clear();
            if (attributesBuilder_ == null) {
                attributes_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000001);
            } else {
                attributesBuilder_.clear();
            }
            if (labelsBuilder_ == null) {
                labels_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000002);
            } else {
                labelsBuilder_.clear();
            }
            startTimeUnixNano_ = 0L;

            timeUnixNano_ = 0L;

            if (exemplarsBuilder_ == null) {
                exemplars_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000004);
            } else {
                exemplarsBuilder_.clear();
            }
            valueCase_ = 0;
            value_ = null;
            return this;
        }

        @Override
        public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
            return MetricsProto.internal_static_opentelemetry_proto_metrics_v1_NumberDataPoint_descriptor;
        }

        @Override
        public NumberDataPoint getDefaultInstanceForType() {
            return NumberDataPoint.getDefaultInstance();
        }

        @Override
        public NumberDataPoint build() {
            NumberDataPoint result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        @Override
        public NumberDataPoint buildPartial() {
            NumberDataPoint result = new NumberDataPoint(this);
            int from_bitField0_ = bitField0_;
            if (attributesBuilder_ == null) {
                if (((bitField0_ & 0x00000001) != 0)) {
                    attributes_ = java.util.Collections.unmodifiableList(attributes_);
                    bitField0_ = (bitField0_ & ~0x00000001);
                }
                result.attributes_ = attributes_;
            } else {
                result.attributes_ = attributesBuilder_.build();
            }
            if (labelsBuilder_ == null) {
                if (((bitField0_ & 0x00000002) != 0)) {
                    labels_ = java.util.Collections.unmodifiableList(labels_);
                    bitField0_ = (bitField0_ & ~0x00000002);
                }
                result.labels_ = labels_;
            } else {
                result.labels_ = labelsBuilder_.build();
            }
            result.startTimeUnixNano_ = startTimeUnixNano_;
            result.timeUnixNano_ = timeUnixNano_;
            if (valueCase_ == 4) {
                result.value_ = value_;
            }
            if (valueCase_ == 6) {
                result.value_ = value_;
            }
            if (exemplarsBuilder_ == null) {
                if (((bitField0_ & 0x00000004) != 0)) {
                    exemplars_ = java.util.Collections.unmodifiableList(exemplars_);
                    bitField0_ = (bitField0_ & ~0x00000004);
                }
                result.exemplars_ = exemplars_;
            } else {
                result.exemplars_ = exemplarsBuilder_.build();
            }
            result.valueCase_ = valueCase_;
            onBuilt();
            return result;
        }

        @Override
        public Builder clone() {
            return super.clone();
        }

        @Override
        public Builder setField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                Object value) {
            return super.setField(field, value);
        }

        @Override
        public Builder clearField(
                com.google.protobuf.Descriptors.FieldDescriptor field) {
            return super.clearField(field);
        }

        @Override
        public Builder clearOneof(
                com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return super.clearOneof(oneof);
        }

        @Override
        public Builder setRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                int index, Object value) {
            return super.setRepeatedField(field, index, value);
        }

        @Override
        public Builder addRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                Object value) {
            return super.addRepeatedField(field, value);
        }

        @Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof NumberDataPoint) {
                return mergeFrom((NumberDataPoint) other);
            } else {
                super.mergeFrom(other);
                return this;
            }
        }

        public Builder mergeFrom(NumberDataPoint other) {
            if (other == NumberDataPoint.getDefaultInstance()) return this;
            if (attributesBuilder_ == null) {
                if (!other.attributes_.isEmpty()) {
                    if (attributes_.isEmpty()) {
                        attributes_ = other.attributes_;
                        bitField0_ = (bitField0_ & ~0x00000001);
                    } else {
                        ensureAttributesIsMutable();
                        attributes_.addAll(other.attributes_);
                    }
                    onChanged();
                }
            } else {
                if (!other.attributes_.isEmpty()) {
                    if (attributesBuilder_.isEmpty()) {
                        attributesBuilder_.dispose();
                        attributesBuilder_ = null;
                        attributes_ = other.attributes_;
                        bitField0_ = (bitField0_ & ~0x00000001);
                        attributesBuilder_ =
                                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                        getAttributesFieldBuilder() : null;
                    } else {
                        attributesBuilder_.addAllMessages(other.attributes_);
                    }
                }
            }
            if (labelsBuilder_ == null) {
                if (!other.labels_.isEmpty()) {
                    if (labels_.isEmpty()) {
                        labels_ = other.labels_;
                        bitField0_ = (bitField0_ & ~0x00000002);
                    } else {
                        ensureLabelsIsMutable();
                        labels_.addAll(other.labels_);
                    }
                    onChanged();
                }
            } else {
                if (!other.labels_.isEmpty()) {
                    if (labelsBuilder_.isEmpty()) {
                        labelsBuilder_.dispose();
                        labelsBuilder_ = null;
                        labels_ = other.labels_;
                        bitField0_ = (bitField0_ & ~0x00000002);
                        labelsBuilder_ =
                                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                        getLabelsFieldBuilder() : null;
                    } else {
                        labelsBuilder_.addAllMessages(other.labels_);
                    }
                }
            }
            if (other.getStartTimeUnixNano() != 0L) {
                setStartTimeUnixNano(other.getStartTimeUnixNano());
            }
            if (other.getTimeUnixNano() != 0L) {
                setTimeUnixNano(other.getTimeUnixNano());
            }
            if (exemplarsBuilder_ == null) {
                if (!other.exemplars_.isEmpty()) {
                    if (exemplars_.isEmpty()) {
                        exemplars_ = other.exemplars_;
                        bitField0_ = (bitField0_ & ~0x00000004);
                    } else {
                        ensureExemplarsIsMutable();
                        exemplars_.addAll(other.exemplars_);
                    }
                    onChanged();
                }
            } else {
                if (!other.exemplars_.isEmpty()) {
                    if (exemplarsBuilder_.isEmpty()) {
                        exemplarsBuilder_.dispose();
                        exemplarsBuilder_ = null;
                        exemplars_ = other.exemplars_;
                        bitField0_ = (bitField0_ & ~0x00000004);
                        exemplarsBuilder_ =
                                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                        getExemplarsFieldBuilder() : null;
                    } else {
                        exemplarsBuilder_.addAllMessages(other.exemplars_);
                    }
                }
            }
            switch (other.getValueCase()) {
                case AS_DOUBLE: {
                    setAsDouble(other.getAsDouble());
                    break;
                }
                case AS_INT: {
                    setAsInt(other.getAsInt());
                    break;
                }
                case VALUE_NOT_SET: {
                    break;
                }
            }
            this.mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
        }

        @Override
        public final boolean isInitialized() {
            return true;
        }

        @Override
        public Builder mergeFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            NumberDataPoint parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                parsedMessage = (NumberDataPoint) e.getUnfinishedMessage();
                throw e.unwrapIOException();
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }

        private int valueCase_ = 0;
        private Object value_;

        public ValueCase
        getValueCase() {
            return ValueCase.forNumber(
                    valueCase_);
        }

        public Builder clearValue() {
            valueCase_ = 0;
            value_ = null;
            onChanged();
            return this;
        }

        private int bitField0_;

        private java.util.List<io.opentelemetry.proto.common.v1.KeyValue> attributes_ =
                java.util.Collections.emptyList();

        private void ensureAttributesIsMutable() {
            if (!((bitField0_ & 0x00000001) != 0)) {
                attributes_ = new java.util.ArrayList<io.opentelemetry.proto.common.v1.KeyValue>(attributes_);
                bitField0_ |= 0x00000001;
            }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
                io.opentelemetry.proto.common.v1.KeyValue, io.opentelemetry.proto.common.v1.KeyValue.Builder, io.opentelemetry.proto.common.v1.KeyValueOrBuilder> attributesBuilder_;

        /**
         * <pre>
         * The set of key/value pairs that uniquely identify the timeseries from
         * where this point belongs. The list may be empty (may contain 0 elements).
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
         */
        public java.util.List<io.opentelemetry.proto.common.v1.KeyValue> getAttributesList() {
            if (attributesBuilder_ == null) {
                return java.util.Collections.unmodifiableList(attributes_);
            } else {
                return attributesBuilder_.getMessageList();
            }
        }

        /**
         * <pre>
         * The set of key/value pairs that uniquely identify the timeseries from
         * where this point belongs. The list may be empty (may contain 0 elements).
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
         */
        public int getAttributesCount() {
            if (attributesBuilder_ == null) {
                return attributes_.size();
            } else {
                return attributesBuilder_.getCount();
            }
        }

        /**
         * <pre>
         * The set of key/value pairs that uniquely identify the timeseries from
         * where this point belongs. The list may be empty (may contain 0 elements).
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
         */
        public io.opentelemetry.proto.common.v1.KeyValue getAttributes(int index) {
            if (attributesBuilder_ == null) {
                return attributes_.get(index);
            } else {
                return attributesBuilder_.getMessage(index);
            }
        }

        /**
         * <pre>
         * The set of key/value pairs that uniquely identify the timeseries from
         * where this point belongs. The list may be empty (may contain 0 elements).
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
         */
        public Builder setAttributes(
                int index, io.opentelemetry.proto.common.v1.KeyValue value) {
            if (attributesBuilder_ == null) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureAttributesIsMutable();
                attributes_.set(index, value);
                onChanged();
            } else {
                attributesBuilder_.setMessage(index, value);
            }
            return this;
        }

        /**
         * <pre>
         * The set of key/value pairs that uniquely identify the timeseries from
         * where this point belongs. The list may be empty (may contain 0 elements).
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
         */
        public Builder setAttributes(
                int index, io.opentelemetry.proto.common.v1.KeyValue.Builder builderForValue) {
            if (attributesBuilder_ == null) {
                ensureAttributesIsMutable();
                attributes_.set(index, builderForValue.build());
                onChanged();
            } else {
                attributesBuilder_.setMessage(index, builderForValue.build());
            }
            return this;
        }

        /**
         * <pre>
         * The set of key/value pairs that uniquely identify the timeseries from
         * where this point belongs. The list may be empty (may contain 0 elements).
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
         */
        public Builder addAttributes(io.opentelemetry.proto.common.v1.KeyValue value) {
            if (attributesBuilder_ == null) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureAttributesIsMutable();
                attributes_.add(value);
                onChanged();
            } else {
                attributesBuilder_.addMessage(value);
            }
            return this;
        }

        /**
         * <pre>
         * The set of key/value pairs that uniquely identify the timeseries from
         * where this point belongs. The list may be empty (may contain 0 elements).
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
         */
        public Builder addAttributes(
                int index, io.opentelemetry.proto.common.v1.KeyValue value) {
            if (attributesBuilder_ == null) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureAttributesIsMutable();
                attributes_.add(index, value);
                onChanged();
            } else {
                attributesBuilder_.addMessage(index, value);
            }
            return this;
        }

        /**
         * <pre>
         * The set of key/value pairs that uniquely identify the timeseries from
         * where this point belongs. The list may be empty (may contain 0 elements).
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
         */
        public Builder addAttributes(
                io.opentelemetry.proto.common.v1.KeyValue.Builder builderForValue) {
            if (attributesBuilder_ == null) {
                ensureAttributesIsMutable();
                attributes_.add(builderForValue.build());
                onChanged();
            } else {
                attributesBuilder_.addMessage(builderForValue.build());
            }
            return this;
        }

        /**
         * <pre>
         * The set of key/value pairs that uniquely identify the timeseries from
         * where this point belongs. The list may be empty (may contain 0 elements).
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
         */
        public Builder addAttributes(
                int index, io.opentelemetry.proto.common.v1.KeyValue.Builder builderForValue) {
            if (attributesBuilder_ == null) {
                ensureAttributesIsMutable();
                attributes_.add(index, builderForValue.build());
                onChanged();
            } else {
                attributesBuilder_.addMessage(index, builderForValue.build());
            }
            return this;
        }

        /**
         * <pre>
         * The set of key/value pairs that uniquely identify the timeseries from
         * where this point belongs. The list may be empty (may contain 0 elements).
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
         */
        public Builder addAllAttributes(
                Iterable<? extends io.opentelemetry.proto.common.v1.KeyValue> values) {
            if (attributesBuilder_ == null) {
                ensureAttributesIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, attributes_);
                onChanged();
            } else {
                attributesBuilder_.addAllMessages(values);
            }
            return this;
        }

        /**
         * <pre>
         * The set of key/value pairs that uniquely identify the timeseries from
         * where this point belongs. The list may be empty (may contain 0 elements).
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
         */
        public Builder clearAttributes() {
            if (attributesBuilder_ == null) {
                attributes_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000001);
                onChanged();
            } else {
                attributesBuilder_.clear();
            }
            return this;
        }

        /**
         * <pre>
         * The set of key/value pairs that uniquely identify the timeseries from
         * where this point belongs. The list may be empty (may contain 0 elements).
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
         */
        public Builder removeAttributes(int index) {
            if (attributesBuilder_ == null) {
                ensureAttributesIsMutable();
                attributes_.remove(index);
                onChanged();
            } else {
                attributesBuilder_.remove(index);
            }
            return this;
        }

        /**
         * <pre>
         * The set of key/value pairs that uniquely identify the timeseries from
         * where this point belongs. The list may be empty (may contain 0 elements).
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
         */
        public io.opentelemetry.proto.common.v1.KeyValue.Builder getAttributesBuilder(
                int index) {
            return getAttributesFieldBuilder().getBuilder(index);
        }

        /**
         * <pre>
         * The set of key/value pairs that uniquely identify the timeseries from
         * where this point belongs. The list may be empty (may contain 0 elements).
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
         */
        public io.opentelemetry.proto.common.v1.KeyValueOrBuilder getAttributesOrBuilder(
                int index) {
            if (attributesBuilder_ == null) {
                return attributes_.get(index);
            } else {
                return attributesBuilder_.getMessageOrBuilder(index);
            }
        }

        /**
         * <pre>
         * The set of key/value pairs that uniquely identify the timeseries from
         * where this point belongs. The list may be empty (may contain 0 elements).
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
         */
        public java.util.List<? extends io.opentelemetry.proto.common.v1.KeyValueOrBuilder>
        getAttributesOrBuilderList() {
            if (attributesBuilder_ != null) {
                return attributesBuilder_.getMessageOrBuilderList();
            } else {
                return java.util.Collections.unmodifiableList(attributes_);
            }
        }

        /**
         * <pre>
         * The set of key/value pairs that uniquely identify the timeseries from
         * where this point belongs. The list may be empty (may contain 0 elements).
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
         */
        public io.opentelemetry.proto.common.v1.KeyValue.Builder addAttributesBuilder() {
            return getAttributesFieldBuilder().addBuilder(
                    io.opentelemetry.proto.common.v1.KeyValue.getDefaultInstance());
        }

        /**
         * <pre>
         * The set of key/value pairs that uniquely identify the timeseries from
         * where this point belongs. The list may be empty (may contain 0 elements).
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
         */
        public io.opentelemetry.proto.common.v1.KeyValue.Builder addAttributesBuilder(
                int index) {
            return getAttributesFieldBuilder().addBuilder(
                    index, io.opentelemetry.proto.common.v1.KeyValue.getDefaultInstance());
        }

        /**
         * <pre>
         * The set of key/value pairs that uniquely identify the timeseries from
         * where this point belongs. The list may be empty (may contain 0 elements).
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
         */
        public java.util.List<io.opentelemetry.proto.common.v1.KeyValue.Builder>
        getAttributesBuilderList() {
            return getAttributesFieldBuilder().getBuilderList();
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
                io.opentelemetry.proto.common.v1.KeyValue, io.opentelemetry.proto.common.v1.KeyValue.Builder, io.opentelemetry.proto.common.v1.KeyValueOrBuilder>
        getAttributesFieldBuilder() {
            if (attributesBuilder_ == null) {
                attributesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                        io.opentelemetry.proto.common.v1.KeyValue, io.opentelemetry.proto.common.v1.KeyValue.Builder, io.opentelemetry.proto.common.v1.KeyValueOrBuilder>(
                        attributes_,
                        ((bitField0_ & 0x00000001) != 0),
                        getParentForChildren(),
                        isClean());
                attributes_ = null;
            }
            return attributesBuilder_;
        }

        private java.util.List<io.opentelemetry.proto.common.v1.StringKeyValue> labels_ =
                java.util.Collections.emptyList();

        private void ensureLabelsIsMutable() {
            if (!((bitField0_ & 0x00000002) != 0)) {
                labels_ = new java.util.ArrayList<io.opentelemetry.proto.common.v1.StringKeyValue>(labels_);
                bitField0_ |= 0x00000002;
            }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
                io.opentelemetry.proto.common.v1.StringKeyValue, io.opentelemetry.proto.common.v1.StringKeyValue.Builder, io.opentelemetry.proto.common.v1.StringKeyValueOrBuilder> labelsBuilder_;

        /**
         * <pre>
         * Labels is deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `labels` field.
         * 2. New senders, which are aware of this change MUST send only `attributes`.
         * 3. New receivers, which are aware of this change MUST convert this into
         * `labels` by simply converting all int64 values into float.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];</code>
         */
        @Deprecated
        public java.util.List<io.opentelemetry.proto.common.v1.StringKeyValue> getLabelsList() {
            if (labelsBuilder_ == null) {
                return java.util.Collections.unmodifiableList(labels_);
            } else {
                return labelsBuilder_.getMessageList();
            }
        }

        /**
         * <pre>
         * Labels is deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `labels` field.
         * 2. New senders, which are aware of this change MUST send only `attributes`.
         * 3. New receivers, which are aware of this change MUST convert this into
         * `labels` by simply converting all int64 values into float.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];</code>
         */
        @Deprecated
        public int getLabelsCount() {
            if (labelsBuilder_ == null) {
                return labels_.size();
            } else {
                return labelsBuilder_.getCount();
            }
        }

        /**
         * <pre>
         * Labels is deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `labels` field.
         * 2. New senders, which are aware of this change MUST send only `attributes`.
         * 3. New receivers, which are aware of this change MUST convert this into
         * `labels` by simply converting all int64 values into float.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];</code>
         */
        @Deprecated
        public io.opentelemetry.proto.common.v1.StringKeyValue getLabels(int index) {
            if (labelsBuilder_ == null) {
                return labels_.get(index);
            } else {
                return labelsBuilder_.getMessage(index);
            }
        }

        /**
         * <pre>
         * Labels is deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `labels` field.
         * 2. New senders, which are aware of this change MUST send only `attributes`.
         * 3. New receivers, which are aware of this change MUST convert this into
         * `labels` by simply converting all int64 values into float.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];</code>
         */
        @Deprecated
        public Builder setLabels(
                int index, io.opentelemetry.proto.common.v1.StringKeyValue value) {
            if (labelsBuilder_ == null) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureLabelsIsMutable();
                labels_.set(index, value);
                onChanged();
            } else {
                labelsBuilder_.setMessage(index, value);
            }
            return this;
        }

        /**
         * <pre>
         * Labels is deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `labels` field.
         * 2. New senders, which are aware of this change MUST send only `attributes`.
         * 3. New receivers, which are aware of this change MUST convert this into
         * `labels` by simply converting all int64 values into float.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];</code>
         */
        @Deprecated
        public Builder setLabels(
                int index, io.opentelemetry.proto.common.v1.StringKeyValue.Builder builderForValue) {
            if (labelsBuilder_ == null) {
                ensureLabelsIsMutable();
                labels_.set(index, builderForValue.build());
                onChanged();
            } else {
                labelsBuilder_.setMessage(index, builderForValue.build());
            }
            return this;
        }

        /**
         * <pre>
         * Labels is deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `labels` field.
         * 2. New senders, which are aware of this change MUST send only `attributes`.
         * 3. New receivers, which are aware of this change MUST convert this into
         * `labels` by simply converting all int64 values into float.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];</code>
         */
        @Deprecated
        public Builder addLabels(io.opentelemetry.proto.common.v1.StringKeyValue value) {
            if (labelsBuilder_ == null) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureLabelsIsMutable();
                labels_.add(value);
                onChanged();
            } else {
                labelsBuilder_.addMessage(value);
            }
            return this;
        }

        /**
         * <pre>
         * Labels is deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `labels` field.
         * 2. New senders, which are aware of this change MUST send only `attributes`.
         * 3. New receivers, which are aware of this change MUST convert this into
         * `labels` by simply converting all int64 values into float.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];</code>
         */
        @Deprecated
        public Builder addLabels(
                int index, io.opentelemetry.proto.common.v1.StringKeyValue value) {
            if (labelsBuilder_ == null) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureLabelsIsMutable();
                labels_.add(index, value);
                onChanged();
            } else {
                labelsBuilder_.addMessage(index, value);
            }
            return this;
        }

        /**
         * <pre>
         * Labels is deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `labels` field.
         * 2. New senders, which are aware of this change MUST send only `attributes`.
         * 3. New receivers, which are aware of this change MUST convert this into
         * `labels` by simply converting all int64 values into float.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];</code>
         */
        @Deprecated
        public Builder addLabels(
                io.opentelemetry.proto.common.v1.StringKeyValue.Builder builderForValue) {
            if (labelsBuilder_ == null) {
                ensureLabelsIsMutable();
                labels_.add(builderForValue.build());
                onChanged();
            } else {
                labelsBuilder_.addMessage(builderForValue.build());
            }
            return this;
        }

        /**
         * <pre>
         * Labels is deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `labels` field.
         * 2. New senders, which are aware of this change MUST send only `attributes`.
         * 3. New receivers, which are aware of this change MUST convert this into
         * `labels` by simply converting all int64 values into float.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];</code>
         */
        @Deprecated
        public Builder addLabels(
                int index, io.opentelemetry.proto.common.v1.StringKeyValue.Builder builderForValue) {
            if (labelsBuilder_ == null) {
                ensureLabelsIsMutable();
                labels_.add(index, builderForValue.build());
                onChanged();
            } else {
                labelsBuilder_.addMessage(index, builderForValue.build());
            }
            return this;
        }

        /**
         * <pre>
         * Labels is deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `labels` field.
         * 2. New senders, which are aware of this change MUST send only `attributes`.
         * 3. New receivers, which are aware of this change MUST convert this into
         * `labels` by simply converting all int64 values into float.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];</code>
         */
        @Deprecated
        public Builder addAllLabels(
                Iterable<? extends io.opentelemetry.proto.common.v1.StringKeyValue> values) {
            if (labelsBuilder_ == null) {
                ensureLabelsIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, labels_);
                onChanged();
            } else {
                labelsBuilder_.addAllMessages(values);
            }
            return this;
        }

        /**
         * <pre>
         * Labels is deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `labels` field.
         * 2. New senders, which are aware of this change MUST send only `attributes`.
         * 3. New receivers, which are aware of this change MUST convert this into
         * `labels` by simply converting all int64 values into float.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];</code>
         */
        @Deprecated
        public Builder clearLabels() {
            if (labelsBuilder_ == null) {
                labels_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000002);
                onChanged();
            } else {
                labelsBuilder_.clear();
            }
            return this;
        }

        /**
         * <pre>
         * Labels is deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `labels` field.
         * 2. New senders, which are aware of this change MUST send only `attributes`.
         * 3. New receivers, which are aware of this change MUST convert this into
         * `labels` by simply converting all int64 values into float.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];</code>
         */
        @Deprecated
        public Builder removeLabels(int index) {
            if (labelsBuilder_ == null) {
                ensureLabelsIsMutable();
                labels_.remove(index);
                onChanged();
            } else {
                labelsBuilder_.remove(index);
            }
            return this;
        }

        /**
         * <pre>
         * Labels is deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `labels` field.
         * 2. New senders, which are aware of this change MUST send only `attributes`.
         * 3. New receivers, which are aware of this change MUST convert this into
         * `labels` by simply converting all int64 values into float.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];</code>
         */
        @Deprecated
        public io.opentelemetry.proto.common.v1.StringKeyValue.Builder getLabelsBuilder(
                int index) {
            return getLabelsFieldBuilder().getBuilder(index);
        }

        /**
         * <pre>
         * Labels is deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `labels` field.
         * 2. New senders, which are aware of this change MUST send only `attributes`.
         * 3. New receivers, which are aware of this change MUST convert this into
         * `labels` by simply converting all int64 values into float.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];</code>
         */
        @Deprecated
        public io.opentelemetry.proto.common.v1.StringKeyValueOrBuilder getLabelsOrBuilder(
                int index) {
            if (labelsBuilder_ == null) {
                return labels_.get(index);
            } else {
                return labelsBuilder_.getMessageOrBuilder(index);
            }
        }

        /**
         * <pre>
         * Labels is deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `labels` field.
         * 2. New senders, which are aware of this change MUST send only `attributes`.
         * 3. New receivers, which are aware of this change MUST convert this into
         * `labels` by simply converting all int64 values into float.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];</code>
         */
        @Deprecated
        public java.util.List<? extends io.opentelemetry.proto.common.v1.StringKeyValueOrBuilder>
        getLabelsOrBuilderList() {
            if (labelsBuilder_ != null) {
                return labelsBuilder_.getMessageOrBuilderList();
            } else {
                return java.util.Collections.unmodifiableList(labels_);
            }
        }

        /**
         * <pre>
         * Labels is deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `labels` field.
         * 2. New senders, which are aware of this change MUST send only `attributes`.
         * 3. New receivers, which are aware of this change MUST convert this into
         * `labels` by simply converting all int64 values into float.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];</code>
         */
        @Deprecated
        public io.opentelemetry.proto.common.v1.StringKeyValue.Builder addLabelsBuilder() {
            return getLabelsFieldBuilder().addBuilder(
                    io.opentelemetry.proto.common.v1.StringKeyValue.getDefaultInstance());
        }

        /**
         * <pre>
         * Labels is deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `labels` field.
         * 2. New senders, which are aware of this change MUST send only `attributes`.
         * 3. New receivers, which are aware of this change MUST convert this into
         * `labels` by simply converting all int64 values into float.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];</code>
         */
        @Deprecated
        public io.opentelemetry.proto.common.v1.StringKeyValue.Builder addLabelsBuilder(
                int index) {
            return getLabelsFieldBuilder().addBuilder(
                    index, io.opentelemetry.proto.common.v1.StringKeyValue.getDefaultInstance());
        }

        /**
         * <pre>
         * Labels is deprecated and will be removed soon.
         * 1. Old senders and receivers that are not aware of this change will
         * continue using the `labels` field.
         * 2. New senders, which are aware of this change MUST send only `attributes`.
         * 3. New receivers, which are aware of this change MUST convert this into
         * `labels` by simply converting all int64 values into float.
         * This field will be removed in ~3 months, on July 1, 2021.
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];</code>
         */
        @Deprecated
        public java.util.List<io.opentelemetry.proto.common.v1.StringKeyValue.Builder>
        getLabelsBuilderList() {
            return getLabelsFieldBuilder().getBuilderList();
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
                io.opentelemetry.proto.common.v1.StringKeyValue, io.opentelemetry.proto.common.v1.StringKeyValue.Builder, io.opentelemetry.proto.common.v1.StringKeyValueOrBuilder>
        getLabelsFieldBuilder() {
            if (labelsBuilder_ == null) {
                labelsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                        io.opentelemetry.proto.common.v1.StringKeyValue, io.opentelemetry.proto.common.v1.StringKeyValue.Builder, io.opentelemetry.proto.common.v1.StringKeyValueOrBuilder>(
                        labels_,
                        ((bitField0_ & 0x00000002) != 0),
                        getParentForChildren(),
                        isClean());
                labels_ = null;
            }
            return labelsBuilder_;
        }

        private long startTimeUnixNano_;

        /**
         * <pre>
         * StartTimeUnixNano is optional but strongly encouraged, see the
         * the detiled comments above Metric.
         * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
         * 1970.
         * </pre>
         *
         * <code>fixed64 start_time_unix_nano = 2;</code>
         *
         * @return The startTimeUnixNano.
         */
        @Override
        public long getStartTimeUnixNano() {
            return startTimeUnixNano_;
        }

        /**
         * <pre>
         * StartTimeUnixNano is optional but strongly encouraged, see the
         * the detiled comments above Metric.
         * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
         * 1970.
         * </pre>
         *
         * <code>fixed64 start_time_unix_nano = 2;</code>
         *
         * @param value The startTimeUnixNano to set.
         * @return This builder for chaining.
         */
        public Builder setStartTimeUnixNano(long value) {

            startTimeUnixNano_ = value;
            onChanged();
            return this;
        }

        /**
         * <pre>
         * StartTimeUnixNano is optional but strongly encouraged, see the
         * the detiled comments above Metric.
         * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
         * 1970.
         * </pre>
         *
         * <code>fixed64 start_time_unix_nano = 2;</code>
         *
         * @return This builder for chaining.
         */
        public Builder clearStartTimeUnixNano() {

            startTimeUnixNano_ = 0L;
            onChanged();
            return this;
        }

        private long timeUnixNano_;

        /**
         * <pre>
         * TimeUnixNano is required, see the detailed comments above Metric.
         * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
         * 1970.
         * </pre>
         *
         * <code>fixed64 time_unix_nano = 3;</code>
         *
         * @return The timeUnixNano.
         */
        @Override
        public long getTimeUnixNano() {
            return timeUnixNano_;
        }

        /**
         * <pre>
         * TimeUnixNano is required, see the detailed comments above Metric.
         * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
         * 1970.
         * </pre>
         *
         * <code>fixed64 time_unix_nano = 3;</code>
         *
         * @param value The timeUnixNano to set.
         * @return This builder for chaining.
         */
        public Builder setTimeUnixNano(long value) {

            timeUnixNano_ = value;
            onChanged();
            return this;
        }

        /**
         * <pre>
         * TimeUnixNano is required, see the detailed comments above Metric.
         * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
         * 1970.
         * </pre>
         *
         * <code>fixed64 time_unix_nano = 3;</code>
         *
         * @return This builder for chaining.
         */
        public Builder clearTimeUnixNano() {

            timeUnixNano_ = 0L;
            onChanged();
            return this;
        }

        /**
         * <code>double as_double = 4;</code>
         *
         * @return The asDouble.
         */
        public double getAsDouble() {
            if (valueCase_ == 4) {
                return (Double) value_;
            }
            return 0D;
        }

        /**
         * <code>double as_double = 4;</code>
         *
         * @param value The asDouble to set.
         * @return This builder for chaining.
         */
        public Builder setAsDouble(double value) {
            valueCase_ = 4;
            value_ = value;
            onChanged();
            return this;
        }

        /**
         * <code>double as_double = 4;</code>
         *
         * @return This builder for chaining.
         */
        public Builder clearAsDouble() {
            if (valueCase_ == 4) {
                valueCase_ = 0;
                value_ = null;
                onChanged();
            }
            return this;
        }

        /**
         * <code>sfixed64 as_int = 6;</code>
         *
         * @return The asInt.
         */
        public long getAsInt() {
            if (valueCase_ == 6) {
                return (Long) value_;
            }
            return 0L;
        }

        /**
         * <code>sfixed64 as_int = 6;</code>
         *
         * @param value The asInt to set.
         * @return This builder for chaining.
         */
        public Builder setAsInt(long value) {
            valueCase_ = 6;
            value_ = value;
            onChanged();
            return this;
        }

        /**
         * <code>sfixed64 as_int = 6;</code>
         *
         * @return This builder for chaining.
         */
        public Builder clearAsInt() {
            if (valueCase_ == 6) {
                valueCase_ = 0;
                value_ = null;
                onChanged();
            }
            return this;
        }

        private java.util.List<Exemplar> exemplars_ =
                java.util.Collections.emptyList();

        private void ensureExemplarsIsMutable() {
            if (!((bitField0_ & 0x00000004) != 0)) {
                exemplars_ = new java.util.ArrayList<Exemplar>(exemplars_);
                bitField0_ |= 0x00000004;
            }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
                Exemplar, Exemplar.Builder, ExemplarOrBuilder> exemplarsBuilder_;

        /**
         * <pre>
         * (Optional) List of exemplars collected from
         * measurements that were used to form the data point
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 5;</code>
         */
        public java.util.List<Exemplar> getExemplarsList() {
            if (exemplarsBuilder_ == null) {
                return java.util.Collections.unmodifiableList(exemplars_);
            } else {
                return exemplarsBuilder_.getMessageList();
            }
        }

        /**
         * <pre>
         * (Optional) List of exemplars collected from
         * measurements that were used to form the data point
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 5;</code>
         */
        public int getExemplarsCount() {
            if (exemplarsBuilder_ == null) {
                return exemplars_.size();
            } else {
                return exemplarsBuilder_.getCount();
            }
        }

        /**
         * <pre>
         * (Optional) List of exemplars collected from
         * measurements that were used to form the data point
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 5;</code>
         */
        public Exemplar getExemplars(int index) {
            if (exemplarsBuilder_ == null) {
                return exemplars_.get(index);
            } else {
                return exemplarsBuilder_.getMessage(index);
            }
        }

        /**
         * <pre>
         * (Optional) List of exemplars collected from
         * measurements that were used to form the data point
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 5;</code>
         */
        public Builder setExemplars(
                int index, Exemplar value) {
            if (exemplarsBuilder_ == null) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureExemplarsIsMutable();
                exemplars_.set(index, value);
                onChanged();
            } else {
                exemplarsBuilder_.setMessage(index, value);
            }
            return this;
        }

        /**
         * <pre>
         * (Optional) List of exemplars collected from
         * measurements that were used to form the data point
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 5;</code>
         */
        public Builder setExemplars(
                int index, Exemplar.Builder builderForValue) {
            if (exemplarsBuilder_ == null) {
                ensureExemplarsIsMutable();
                exemplars_.set(index, builderForValue.build());
                onChanged();
            } else {
                exemplarsBuilder_.setMessage(index, builderForValue.build());
            }
            return this;
        }

        /**
         * <pre>
         * (Optional) List of exemplars collected from
         * measurements that were used to form the data point
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 5;</code>
         */
        public Builder addExemplars(Exemplar value) {
            if (exemplarsBuilder_ == null) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureExemplarsIsMutable();
                exemplars_.add(value);
                onChanged();
            } else {
                exemplarsBuilder_.addMessage(value);
            }
            return this;
        }

        /**
         * <pre>
         * (Optional) List of exemplars collected from
         * measurements that were used to form the data point
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 5;</code>
         */
        public Builder addExemplars(
                int index, Exemplar value) {
            if (exemplarsBuilder_ == null) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureExemplarsIsMutable();
                exemplars_.add(index, value);
                onChanged();
            } else {
                exemplarsBuilder_.addMessage(index, value);
            }
            return this;
        }

        /**
         * <pre>
         * (Optional) List of exemplars collected from
         * measurements that were used to form the data point
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 5;</code>
         */
        public Builder addExemplars(
                Exemplar.Builder builderForValue) {
            if (exemplarsBuilder_ == null) {
                ensureExemplarsIsMutable();
                exemplars_.add(builderForValue.build());
                onChanged();
            } else {
                exemplarsBuilder_.addMessage(builderForValue.build());
            }
            return this;
        }

        /**
         * <pre>
         * (Optional) List of exemplars collected from
         * measurements that were used to form the data point
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 5;</code>
         */
        public Builder addExemplars(
                int index, Exemplar.Builder builderForValue) {
            if (exemplarsBuilder_ == null) {
                ensureExemplarsIsMutable();
                exemplars_.add(index, builderForValue.build());
                onChanged();
            } else {
                exemplarsBuilder_.addMessage(index, builderForValue.build());
            }
            return this;
        }

        /**
         * <pre>
         * (Optional) List of exemplars collected from
         * measurements that were used to form the data point
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 5;</code>
         */
        public Builder addAllExemplars(
                Iterable<? extends Exemplar> values) {
            if (exemplarsBuilder_ == null) {
                ensureExemplarsIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, exemplars_);
                onChanged();
            } else {
                exemplarsBuilder_.addAllMessages(values);
            }
            return this;
        }

        /**
         * <pre>
         * (Optional) List of exemplars collected from
         * measurements that were used to form the data point
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 5;</code>
         */
        public Builder clearExemplars() {
            if (exemplarsBuilder_ == null) {
                exemplars_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000004);
                onChanged();
            } else {
                exemplarsBuilder_.clear();
            }
            return this;
        }

        /**
         * <pre>
         * (Optional) List of exemplars collected from
         * measurements that were used to form the data point
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 5;</code>
         */
        public Builder removeExemplars(int index) {
            if (exemplarsBuilder_ == null) {
                ensureExemplarsIsMutable();
                exemplars_.remove(index);
                onChanged();
            } else {
                exemplarsBuilder_.remove(index);
            }
            return this;
        }

        /**
         * <pre>
         * (Optional) List of exemplars collected from
         * measurements that were used to form the data point
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 5;</code>
         */
        public Exemplar.Builder getExemplarsBuilder(
                int index) {
            return getExemplarsFieldBuilder().getBuilder(index);
        }

        /**
         * <pre>
         * (Optional) List of exemplars collected from
         * measurements that were used to form the data point
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 5;</code>
         */
        public ExemplarOrBuilder getExemplarsOrBuilder(
                int index) {
            if (exemplarsBuilder_ == null) {
                return exemplars_.get(index);
            } else {
                return exemplarsBuilder_.getMessageOrBuilder(index);
            }
        }

        /**
         * <pre>
         * (Optional) List of exemplars collected from
         * measurements that were used to form the data point
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 5;</code>
         */
        public java.util.List<? extends ExemplarOrBuilder>
        getExemplarsOrBuilderList() {
            if (exemplarsBuilder_ != null) {
                return exemplarsBuilder_.getMessageOrBuilderList();
            } else {
                return java.util.Collections.unmodifiableList(exemplars_);
            }
        }

        /**
         * <pre>
         * (Optional) List of exemplars collected from
         * measurements that were used to form the data point
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 5;</code>
         */
        public Exemplar.Builder addExemplarsBuilder() {
            return getExemplarsFieldBuilder().addBuilder(
                    Exemplar.getDefaultInstance());
        }

        /**
         * <pre>
         * (Optional) List of exemplars collected from
         * measurements that were used to form the data point
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 5;</code>
         */
        public Exemplar.Builder addExemplarsBuilder(
                int index) {
            return getExemplarsFieldBuilder().addBuilder(
                    index, Exemplar.getDefaultInstance());
        }

        /**
         * <pre>
         * (Optional) List of exemplars collected from
         * measurements that were used to form the data point
         * </pre>
         *
         * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 5;</code>
         */
        public java.util.List<Exemplar.Builder>
        getExemplarsBuilderList() {
            return getExemplarsFieldBuilder().getBuilderList();
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
                Exemplar, Exemplar.Builder, ExemplarOrBuilder>
        getExemplarsFieldBuilder() {
            if (exemplarsBuilder_ == null) {
                exemplarsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                        Exemplar, Exemplar.Builder, ExemplarOrBuilder>(
                        exemplars_,
                        ((bitField0_ & 0x00000004) != 0),
                        getParentForChildren(),
                        isClean());
                exemplars_ = null;
            }
            return exemplarsBuilder_;
        }

        @Override
        public final Builder setUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
        }

        @Override
        public final Builder mergeUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:opentelemetry.proto.metrics.v1.NumberDataPoint)
    }

    // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.NumberDataPoint)
    private static final NumberDataPoint DEFAULT_INSTANCE;

    static {
        DEFAULT_INSTANCE = new NumberDataPoint();
    }

    public static NumberDataPoint getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<NumberDataPoint>
            PARSER = new com.google.protobuf.AbstractParser<NumberDataPoint>() {
        @Override
        public NumberDataPoint parsePartialFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return new NumberDataPoint(input, extensionRegistry);
        }
    };

    public static com.google.protobuf.Parser<NumberDataPoint> parser() {
        return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<NumberDataPoint> getParserForType() {
        return PARSER;
    }

    @Override
    public NumberDataPoint getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
    }

}

