// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/metrics/v1/metrics.proto

package io.opentelemetry.proto.metrics.v1;

public interface SummaryDataPointOrBuilder extends
        // @@protoc_insertion_point(interface_extends:opentelemetry.proto.metrics.v1.SummaryDataPoint)
        com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
     */
    java.util.List<io.opentelemetry.proto.common.v1.KeyValue>
    getAttributesList();

    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
     */
    io.opentelemetry.proto.common.v1.KeyValue getAttributes(int index);

    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
     */
    int getAttributesCount();

    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
     */
    java.util.List<? extends io.opentelemetry.proto.common.v1.KeyValueOrBuilder>
    getAttributesOrBuilderList();

    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;</code>
     */
    io.opentelemetry.proto.common.v1.KeyValueOrBuilder getAttributesOrBuilder(
            int index);

    /**
     * <pre>
     * Labels is deprecated and will be removed soon.
     * 1. Old senders and receivers that are not aware of this change will
     * continue using the `labels` field.
     * 2. New senders, which are aware of this change MUST send only `attributes`.
     * 3. New receivers, which are aware of this change MUST convert this into
     * `labels` by simply converting all int64 values into float.
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];</code>
     */
    @Deprecated
    java.util.List<io.opentelemetry.proto.common.v1.StringKeyValue>
    getLabelsList();

    /**
     * <pre>
     * Labels is deprecated and will be removed soon.
     * 1. Old senders and receivers that are not aware of this change will
     * continue using the `labels` field.
     * 2. New senders, which are aware of this change MUST send only `attributes`.
     * 3. New receivers, which are aware of this change MUST convert this into
     * `labels` by simply converting all int64 values into float.
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];</code>
     */
    @Deprecated
    io.opentelemetry.proto.common.v1.StringKeyValue getLabels(int index);

    /**
     * <pre>
     * Labels is deprecated and will be removed soon.
     * 1. Old senders and receivers that are not aware of this change will
     * continue using the `labels` field.
     * 2. New senders, which are aware of this change MUST send only `attributes`.
     * 3. New receivers, which are aware of this change MUST convert this into
     * `labels` by simply converting all int64 values into float.
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];</code>
     */
    @Deprecated
    int getLabelsCount();

    /**
     * <pre>
     * Labels is deprecated and will be removed soon.
     * 1. Old senders and receivers that are not aware of this change will
     * continue using the `labels` field.
     * 2. New senders, which are aware of this change MUST send only `attributes`.
     * 3. New receivers, which are aware of this change MUST convert this into
     * `labels` by simply converting all int64 values into float.
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];</code>
     */
    @Deprecated
    java.util.List<? extends io.opentelemetry.proto.common.v1.StringKeyValueOrBuilder>
    getLabelsOrBuilderList();

    /**
     * <pre>
     * Labels is deprecated and will be removed soon.
     * 1. Old senders and receivers that are not aware of this change will
     * continue using the `labels` field.
     * 2. New senders, which are aware of this change MUST send only `attributes`.
     * 3. New receivers, which are aware of this change MUST convert this into
     * `labels` by simply converting all int64 values into float.
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];</code>
     */
    @Deprecated
    io.opentelemetry.proto.common.v1.StringKeyValueOrBuilder getLabelsOrBuilder(
            int index);

    /**
     * <pre>
     * StartTimeUnixNano is optional but strongly encouraged, see the
     * the detiled comments above Metric.
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 start_time_unix_nano = 2;</code>
     *
     * @return The startTimeUnixNano.
     */
    long getStartTimeUnixNano();

    /**
     * <pre>
     * TimeUnixNano is required, see the detailed comments above Metric.
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 time_unix_nano = 3;</code>
     *
     * @return The timeUnixNano.
     */
    long getTimeUnixNano();

    /**
     * <pre>
     * count is the number of values in the population. Must be non-negative.
     * </pre>
     *
     * <code>fixed64 count = 4;</code>
     *
     * @return The count.
     */
    long getCount();

    /**
     * <pre>
     * sum of the values in the population. If count is zero then this field
     * must be zero.
     * Note: Sum should only be filled out when measuring non-negative discrete
     * events, and is assumed to be monotonic over the values of these events.
     * Negative events *can* be recorded, but sum should not be filled out when
     * doing so.  This is specifically to enforce compatibility w/ OpenMetrics,
     * see: https://github.com/OpenObservability/OpenMetrics/blob/main/specification/OpenMetrics.md#summary
     * </pre>
     *
     * <code>double sum = 5;</code>
     *
     * @return The sum.
     */
    double getSum();

    /**
     * <pre>
     * (Optional) list of values at different quantiles of the distribution calculated
     * from the current snapshot. The quantiles must be strictly increasing.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
     */
    java.util.List<SummaryDataPoint.ValueAtQuantile>
    getQuantileValuesList();

    /**
     * <pre>
     * (Optional) list of values at different quantiles of the distribution calculated
     * from the current snapshot. The quantiles must be strictly increasing.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
     */
    SummaryDataPoint.ValueAtQuantile getQuantileValues(int index);

    /**
     * <pre>
     * (Optional) list of values at different quantiles of the distribution calculated
     * from the current snapshot. The quantiles must be strictly increasing.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
     */
    int getQuantileValuesCount();

    /**
     * <pre>
     * (Optional) list of values at different quantiles of the distribution calculated
     * from the current snapshot. The quantiles must be strictly increasing.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
     */
    java.util.List<? extends SummaryDataPoint.ValueAtQuantileOrBuilder>
    getQuantileValuesOrBuilderList();

    /**
     * <pre>
     * (Optional) list of values at different quantiles of the distribution calculated
     * from the current snapshot. The quantiles must be strictly increasing.
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
     */
    SummaryDataPoint.ValueAtQuantileOrBuilder getQuantileValuesOrBuilder(
            int index);
}
